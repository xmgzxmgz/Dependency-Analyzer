{
  "nodes": {
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.component.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.component.ts",
      "name": "app.component",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "Component": [
          {
            "location": 13,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "trigger": [
          {
            "location": 19,
            "context": "",
            "arguments": [
              "string",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "transition": [
          {
            "location": 20,
            "context": "",
            "arguments": [
              "string",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "style": [
          {
            "location": 21,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 22,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "animate": [
          {
            "location": 22,
            "context": "",
            "arguments": [
              "string",
              "call-result"
            ],
            "argumentCount": 2
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "document",
            "announcement"
          ],
          "parameters": []
        },
        "fromEvent": [
          {
            "location": 76,
            "context": "",
            "arguments": [
              "variable",
              "string"
            ],
            "argumentCount": 2
          },
          {
            "location": 93,
            "context": "",
            "arguments": [
              "variable",
              "string"
            ],
            "argumentCount": 2
          }
        ],
        "debounceTime": [
          {
            "location": 78,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "takeUntil": [
          {
            "location": 79,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 94,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "Promise.all": [
          {
            "location": 111,
            "context": "Promise",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ],
        "retry": [
          {
            "location": 113,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 120,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "catchError": [
          {
            "location": 114,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 121,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 197,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 225,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 254,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "location": 115,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 122,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 144,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 198,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 226,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 255,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "setTimeout": [
          {
            "location": 153,
            "context": "",
            "arguments": [
              "function",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 362,
            "context": "",
            "arguments": [
              "function",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 409,
            "context": "",
            "arguments": [
              "function",
              "number"
            ],
            "argumentCount": 2
          }
        ],
        "confirm": [
          {
            "location": 249,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "document.createElement": [
          {
            "location": 400,
            "context": "document",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "announcement.setAttribute": [
          {
            "location": 401,
            "context": "announcement",
            "arguments": [
              "string",
              "string"
            ],
            "argumentCount": 2
          },
          {
            "location": 402,
            "context": "announcement",
            "arguments": [
              "string",
              "string"
            ],
            "argumentCount": 2
          }
        ]
      },
      "variableReferences": {
        "ChangeDetectionStrategy": [
          {
            "property": "OnPush",
            "location": 17,
            "isComputed": false
          }
        ],
        "task": [
          {
            "property": "id",
            "location": 50,
            "isComputed": false
          },
          {
            "property": "assigneeId",
            "location": 175,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 179,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 220,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 279,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 280,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 286,
            "isComputed": false
          },
          {
            "property": "assigneeId",
            "location": 300,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 378,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 381,
            "isComputed": false
          },
          {
            "property": "dueDate",
            "location": 381,
            "isComputed": false
          },
          {
            "property": "dueDate",
            "location": 381,
            "isComputed": false
          },
          {
            "property": "assigneeId",
            "location": 392,
            "isComputed": false
          }
        ],
        "user": [
          {
            "property": "id",
            "location": 51,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 175,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 300,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 307,
            "isComputed": false
          }
        ],
        "event": [
          {
            "property": "key",
            "location": 82,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 338,
            "isComputed": false
          }
        ],
        "Promise": [
          {
            "property": "all",
            "location": 111,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "error",
            "location": 115,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 122,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 144,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 198,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 226,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 255,
            "isComputed": false
          }
        ],
        "error": [
          {
            "property": "message",
            "location": 145,
            "isComputed": false
          }
        ],
        "taskData": [
          {
            "property": "title",
            "location": 192,
            "isComputed": false
          }
        ],
        "t": [
          {
            "property": "id",
            "location": 232,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 260,
            "isComputed": false
          }
        ],
        "updatedTask": [
          {
            "property": "id",
            "location": 232,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 285,
            "isComputed": false
          }
        ],
        "userTasks": [
          {
            "property": "length",
            "location": 301,
            "isComputed": false
          },
          {
            "property": "computed",
            "location": 302,
            "isComputed": true
          }
        ],
        "img": [
          {
            "property": "src",
            "location": 339,
            "isComputed": false
          }
        ],
        "u": [
          {
            "property": "id",
            "location": 347,
            "isComputed": false
          }
        ],
        "document": [
          {
            "property": "createElement",
            "location": 400,
            "isComputed": false
          },
          {
            "property": "body",
            "location": 406,
            "isComputed": false
          },
          {
            "property": "body",
            "location": 410,
            "isComputed": false
          }
        ],
        "announcement": [
          {
            "property": "setAttribute",
            "location": 401,
            "isComputed": false
          },
          {
            "property": "setAttribute",
            "location": 402,
            "isComputed": false
          },
          {
            "property": "className",
            "location": 403,
            "isComputed": false
          },
          {
            "property": "textContent",
            "location": 404,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "newTask": {
          "type": "unknown",
          "dependencies": [],
          "location": 196,
          "isDeclaration": true
        },
        "updatedTask": {
          "type": "object",
          "dependencies": [],
          "location": 277,
          "isDeclaration": true
        },
        "status": {
          "type": "unknown",
          "dependencies": [],
          "location": 321,
          "isDeclaration": true
        },
        "userTasks": {
          "type": "call-result",
          "dependencies": [],
          "location": 300,
          "isDeclaration": true
        },
        "img": {
          "type": "unknown",
          "dependencies": [],
          "location": 338,
          "isDeclaration": true
        },
        "user": {
          "type": "call-result",
          "dependencies": [],
          "location": 347,
          "isDeclaration": true
        },
        "index": {
          "type": "call-result",
          "dependencies": [
            "message"
          ],
          "location": 363,
          "isDeclaration": true
        },
        "completed": {
          "type": "unknown",
          "dependencies": [],
          "location": 378,
          "isDeclaration": true
        },
        "pending": {
          "type": "unknown",
          "dependencies": [],
          "location": 379,
          "isDeclaration": true
        },
        "overdue": {
          "type": "unknown",
          "dependencies": [],
          "location": 380,
          "isDeclaration": true
        },
        "announcement": {
          "type": "call-result",
          "dependencies": [],
          "location": 400,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [
        {
          "name": "constructor",
          "location": 54,
          "isAsync": false
        }
      ],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "tasks || null",
          "location": 128,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "users || null",
          "location": 129,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "error.message || null",
          "location": 145,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 175,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 348,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null && task.dueDate && null < null",
          "location": 381,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null && task.dueDate",
          "location": 381,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "destroy$.next": [
          {
            "chain": [
              "destroy$",
              "next"
            ],
            "location": 68,
            "argumentCount": 0
          }
        ],
        "destroy$.complete": [
          {
            "chain": [
              "destroy$",
              "complete"
            ],
            "location": 69,
            "argumentCount": 0
          }
        ],
        "cdr.markForCheck": [
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 109,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 136,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 165,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 176,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 206,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 235,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 265,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 304,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 318,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 331,
            "argumentCount": 0
          },
          {
            "chain": [
              "cdr",
              "markForCheck"
            ],
            "location": 366,
            "argumentCount": 0
          }
        ],
        "Promise.all": [
          {
            "chain": [
              "Promise",
              "all"
            ],
            "location": 111,
            "argumentCount": 1
          }
        ],
        "taskService.getTasks": [
          {
            "chain": [
              "taskService",
              "getTasks"
            ],
            "location": 112,
            "argumentCount": 0
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 115,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 122,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 144,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 198,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 226,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 255,
            "argumentCount": 2
          }
        ],
        "userService.getUsers": [
          {
            "chain": [
              "userService",
              "getUsers"
            ],
            "location": 119,
            "argumentCount": 0
          }
        ],
        "users.find": [
          {
            "chain": [
              "users",
              "find"
            ],
            "location": 175,
            "argumentCount": 1
          },
          {
            "chain": [
              "users",
              "find"
            ],
            "location": 347,
            "argumentCount": 1
          }
        ],
        "taskService.createTask": [
          {
            "chain": [
              "taskService",
              "createTask"
            ],
            "location": 196,
            "argumentCount": 1
          }
        ],
        "taskService.updateTask": [
          {
            "chain": [
              "taskService",
              "updateTask"
            ],
            "location": 224,
            "argumentCount": 1
          }
        ],
        "tasks.map": [
          {
            "chain": [
              "tasks",
              "map"
            ],
            "location": 232,
            "argumentCount": 1
          }
        ],
        "taskService.deleteTask": [
          {
            "chain": [
              "taskService",
              "deleteTask"
            ],
            "location": 253,
            "argumentCount": 1
          }
        ],
        "tasks.filter": [
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 260,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 300,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 378,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 380,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 392,
            "argumentCount": 1
          }
        ],
        "demoData.notifications.unshift": [
          {
            "chain": [
              "demoData",
              "notifications",
              "unshift"
            ],
            "location": 356,
            "argumentCount": 1
          }
        ],
        "demoData.notifications.pop": [
          {
            "chain": [
              "demoData",
              "notifications",
              "pop"
            ],
            "location": 358,
            "argumentCount": 0
          }
        ],
        "demoData.notifications.indexOf": [
          {
            "chain": [
              "demoData",
              "notifications",
              "indexOf"
            ],
            "location": 363,
            "argumentCount": 1
          }
        ],
        "demoData.notifications.splice": [
          {
            "chain": [
              "demoData",
              "notifications",
              "splice"
            ],
            "location": 365,
            "argumentCount": 2
          }
        ],
        "document.createElement": [
          {
            "chain": [
              "document",
              "createElement"
            ],
            "location": 400,
            "argumentCount": 1
          }
        ],
        "announcement.setAttribute": [
          {
            "chain": [
              "announcement",
              "setAttribute"
            ],
            "location": 401,
            "argumentCount": 2
          },
          {
            "chain": [
              "announcement",
              "setAttribute"
            ],
            "location": 402,
            "argumentCount": 2
          }
        ],
        "document.body.appendChild": [
          {
            "chain": [
              "document",
              "body",
              "appendChild"
            ],
            "location": 406,
            "argumentCount": 1
          }
        ],
        "document.body.removeChild": [
          {
            "chain": [
              "document",
              "body",
              "removeChild"
            ],
            "location": 410,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "promise",
          "method": "all",
          "location": 111
        },
        {
          "type": "timer",
          "method": "setTimeout",
          "location": 153
        },
        {
          "type": "timer",
          "method": "setTimeout",
          "location": 362
        },
        {
          "type": "timer",
          "method": "setTimeout",
          "location": 409
        }
      ],
      "relativePath": "Dependency-Analyzer/examples/angular-demo/src/app/app.component.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.module.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.module.ts",
      "name": "app.module",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "NgModule": [
          {
            "location": 15,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {},
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/angular-demo/src/app/app.module.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/task.service.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/task.service.ts",
      "name": "task.service",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "Injectable": [
          {
            "location": 9,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "of": [
          {
            "location": 72,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          },
          {
            "location": 82,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 110,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 137,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 152,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 162,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 172,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 192,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 217,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "delay": [
          {
            "location": 72,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 82,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 110,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 137,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 152,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 162,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 172,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 192,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 217,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "task",
            "id"
          ],
          "parameters": [
            "task"
          ]
        },
        "throwError": [
          {
            "location": 93,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 121,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 126,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 148,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "query.trim": [
          {
            "location": 181,
            "context": "query",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "query.toLowerCase": [
          {
            "location": 185,
            "context": "query",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "tag.toLowerCase": [
          {
            "location": 189,
            "context": "tag",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "taskIds.forEach": [
          {
            "location": 204,
            "context": "taskIds",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "updatedTasks.push": [
          {
            "location": 213,
            "context": "updatedTasks",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "task": [
          {
            "property": "id",
            "location": 81,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 120,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 124,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 131,
            "isComputed": false
          },
          {
            "property": "description",
            "location": 132,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 146,
            "isComputed": false
          },
          {
            "property": "assigneeId",
            "location": 161,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 171,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 187,
            "isComputed": false
          },
          {
            "property": "description",
            "location": 188,
            "isComputed": false
          },
          {
            "property": "tags",
            "location": 189,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 205,
            "isComputed": false
          }
        ],
        "taskData": [
          {
            "property": "title",
            "location": 92,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 98,
            "isComputed": false
          },
          {
            "property": "description",
            "location": 99,
            "isComputed": false
          },
          {
            "property": "priority",
            "location": 101,
            "isComputed": false
          },
          {
            "property": "assigneeId",
            "location": 102,
            "isComputed": false
          },
          {
            "property": "dueDate",
            "location": 105,
            "isComputed": false
          },
          {
            "property": "tags",
            "location": 106,
            "isComputed": false
          }
        ],
        "t": [
          {
            "property": "id",
            "location": 124,
            "isComputed": false
          }
        ],
        "query": [
          {
            "property": "trim",
            "location": 181,
            "isComputed": false
          },
          {
            "property": "toLowerCase",
            "location": 185,
            "isComputed": false
          }
        ],
        "tag": [
          {
            "property": "toLowerCase",
            "location": 189,
            "isComputed": false
          }
        ],
        "taskIds": [
          {
            "property": "forEach",
            "location": 204,
            "isComputed": false
          }
        ],
        "updatedTasks": [
          {
            "property": "push",
            "location": 213,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "task": {
          "type": "unknown",
          "dependencies": [],
          "location": 81,
          "isDeclaration": true
        },
        "newTask": {
          "type": "object",
          "dependencies": [
            "taskData"
          ],
          "location": 96,
          "isDeclaration": true
        },
        "index": {
          "type": "call-result",
          "dependencies": [],
          "location": 205,
          "isDeclaration": true
        },
        "updatedTask": {
          "type": "object",
          "dependencies": [],
          "location": 129,
          "isDeclaration": true
        },
        "userTasks": {
          "type": "call-result",
          "dependencies": [],
          "location": 161,
          "isDeclaration": true
        },
        "statusTasks": {
          "type": "call-result",
          "dependencies": [],
          "location": 171,
          "isDeclaration": true
        },
        "searchQuery": {
          "type": "call-result",
          "dependencies": [],
          "location": 185,
          "isDeclaration": true
        },
        "filteredTasks": {
          "type": "call-result",
          "dependencies": [],
          "location": 186,
          "isDeclaration": true
        },
        "updatedTasks": {
          "type": "array",
          "dependencies": [],
          "location": 202,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [
        {
          "name": "constructor",
          "location": 65,
          "isAsync": false
        }
      ],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 81,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 99,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "taskData.priority || null",
          "location": 101,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "taskData.assigneeId || null",
          "location": 102,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "taskData.tags || null",
          "location": 106,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 132,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null || null",
          "location": 187,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 187,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "tasks.find": [
          {
            "chain": [
              "tasks",
              "find"
            ],
            "location": 81,
            "argumentCount": 1
          }
        ],
        "taskData.title.trim": [
          {
            "chain": [
              "taskData",
              "title",
              "trim"
            ],
            "location": 98,
            "argumentCount": 0
          }
        ],
        "tasks.push": [
          {
            "chain": [
              "tasks",
              "push"
            ],
            "location": 109,
            "argumentCount": 1
          }
        ],
        "tasks.findIndex": [
          {
            "chain": [
              "tasks",
              "findIndex"
            ],
            "location": 124,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "findIndex"
            ],
            "location": 146,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "findIndex"
            ],
            "location": 205,
            "argumentCount": 1
          }
        ],
        "task.title.trim": [
          {
            "chain": [
              "task",
              "title",
              "trim"
            ],
            "location": 131,
            "argumentCount": 0
          }
        ],
        "tasks.splice": [
          {
            "chain": [
              "tasks",
              "splice"
            ],
            "location": 151,
            "argumentCount": 2
          }
        ],
        "tasks.filter": [
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 161,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 171,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 186,
            "argumentCount": 1
          }
        ],
        "query.trim": [
          {
            "chain": [
              "query",
              "trim"
            ],
            "location": 181,
            "argumentCount": 0
          }
        ],
        "query.toLowerCase": [
          {
            "chain": [
              "query",
              "toLowerCase"
            ],
            "location": 185,
            "argumentCount": 0
          }
        ],
        "task.title.toLowerCase": [
          {
            "chain": [
              "task",
              "title",
              "toLowerCase"
            ],
            "location": 187,
            "argumentCount": 0
          }
        ],
        "task.description.toLowerCase": [
          {
            "chain": [
              "task",
              "description",
              "toLowerCase"
            ],
            "location": 188,
            "argumentCount": 0
          }
        ],
        "task.tags.some": [
          {
            "chain": [
              "task",
              "tags",
              "some"
            ],
            "location": 189,
            "argumentCount": 1
          }
        ],
        "tag.toLowerCase": [
          {
            "chain": [
              "tag",
              "toLowerCase"
            ],
            "location": 189,
            "argumentCount": 0
          }
        ],
        "taskIds.forEach": [
          {
            "chain": [
              "taskIds",
              "forEach"
            ],
            "location": 204,
            "argumentCount": 1
          }
        ],
        "updatedTasks.push": [
          {
            "chain": [
              "updatedTasks",
              "push"
            ],
            "location": 213,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/angular-demo/src/app/services/task.service.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/user.service.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/user.service.ts",
      "name": "user.service",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "Injectable": [
          {
            "location": 9,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "of": [
          {
            "location": 69,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          },
          {
            "location": 79,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 114,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 153,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 168,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 179,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 189,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 198,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 218,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 241,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "delay": [
          {
            "location": 69,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 79,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 114,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 153,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 168,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 179,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 189,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 198,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 218,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 241,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "user",
            "id"
          ],
          "parameters": [
            "user"
          ]
        },
        "throwError": [
          {
            "location": 90,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 94,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 99,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 126,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 131,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 135,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 141,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 164,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "department.toLowerCase": [
          {
            "location": 178,
            "context": "department",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "query.trim": [
          {
            "location": 207,
            "context": "query",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "query.toLowerCase": [
          {
            "location": 211,
            "context": "query",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "userIds.forEach": [
          {
            "location": 230,
            "context": "userIds",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "updatedUsers.push": [
          {
            "location": 237,
            "context": "updatedUsers",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "emailRegex.test": [
          {
            "location": 251,
            "context": "emailRegex",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "user": [
          {
            "property": "id",
            "location": 78,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 98,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 124,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 140,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 140,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 162,
            "isComputed": false
          },
          {
            "property": "department",
            "location": 178,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 188,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 197,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 213,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 214,
            "isComputed": false
          },
          {
            "property": "department",
            "location": 215,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 231,
            "isComputed": false
          }
        ],
        "userData": [
          {
            "property": "name",
            "location": 89,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 93,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 93,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 98,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 104,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 105,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 106,
            "isComputed": false
          },
          {
            "property": "department",
            "location": 107,
            "isComputed": false
          },
          {
            "property": "avatar",
            "location": 108,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 130,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 130,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 134,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 134,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 134,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 139,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 140,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 147,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 148,
            "isComputed": false
          },
          {
            "property": "department",
            "location": 149,
            "isComputed": false
          }
        ],
        "department": [
          {
            "property": "toLowerCase",
            "location": 178,
            "isComputed": false
          }
        ],
        "query": [
          {
            "property": "trim",
            "location": 207,
            "isComputed": false
          },
          {
            "property": "toLowerCase",
            "location": 211,
            "isComputed": false
          }
        ],
        "userIds": [
          {
            "property": "forEach",
            "location": 230,
            "isComputed": false
          }
        ],
        "updatedUsers": [
          {
            "property": "push",
            "location": 237,
            "isComputed": false
          }
        ],
        "emailRegex": [
          {
            "property": "test",
            "location": 251,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "user": {
          "type": "unknown",
          "dependencies": [],
          "location": 78,
          "isDeclaration": true
        },
        "newUser": {
          "type": "object",
          "dependencies": [
            "userData",
            "userData"
          ],
          "location": 102,
          "isDeclaration": true
        },
        "index": {
          "type": "call-result",
          "dependencies": [],
          "location": 231,
          "isDeclaration": true
        },
        "updatedUser": {
          "type": "object",
          "dependencies": [],
          "location": 144,
          "isDeclaration": true
        },
        "departmentUsers": {
          "type": "call-result",
          "dependencies": [],
          "location": 177,
          "isDeclaration": true
        },
        "roleUsers": {
          "type": "call-result",
          "dependencies": [],
          "location": 188,
          "isDeclaration": true
        },
        "activeUsers": {
          "type": "call-result",
          "dependencies": [],
          "location": 197,
          "isDeclaration": true
        },
        "searchQuery": {
          "type": "call-result",
          "dependencies": [],
          "location": 211,
          "isDeclaration": true
        },
        "filteredUsers": {
          "type": "call-result",
          "dependencies": [],
          "location": 212,
          "isDeclaration": true
        },
        "updatedUsers": {
          "type": "array",
          "dependencies": [],
          "location": 228,
          "isDeclaration": true
        },
        "emailRegex": {
          "type": "unknown",
          "dependencies": [],
          "location": 250,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [
        {
          "name": "constructor",
          "location": 62,
          "isAsync": false
        }
      ],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 78,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 93,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "userData.name !== undefined && null",
          "location": 130,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "userData.email !== undefined && null || null",
          "location": 134,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 134,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "userData.email && null",
          "location": 139,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "user.id !== id && null === null",
          "location": 140,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 147,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 148,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 149,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null || null",
          "location": 213,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 213,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "users.find": [
          {
            "chain": [
              "users",
              "find"
            ],
            "location": 78,
            "argumentCount": 1
          }
        ],
        "users.some": [
          {
            "chain": [
              "users",
              "some"
            ],
            "location": 98,
            "argumentCount": 1
          },
          {
            "chain": [
              "users",
              "some"
            ],
            "location": 139,
            "argumentCount": 1
          }
        ],
        "user.email.toLowerCase": [
          {
            "chain": [
              "user",
              "email",
              "toLowerCase"
            ],
            "location": 98,
            "argumentCount": 0
          },
          {
            "chain": [
              "user",
              "email",
              "toLowerCase"
            ],
            "location": 140,
            "argumentCount": 0
          },
          {
            "chain": [
              "user",
              "email",
              "toLowerCase"
            ],
            "location": 214,
            "argumentCount": 0
          }
        ],
        "userData.email.toLowerCase": [
          {
            "chain": [
              "userData",
              "email",
              "toLowerCase"
            ],
            "location": 98,
            "argumentCount": 0
          },
          {
            "chain": [
              "userData",
              "email",
              "toLowerCase"
            ],
            "location": 105,
            "argumentCount": 0
          }
        ],
        "userData.name.trim": [
          {
            "chain": [
              "userData",
              "name",
              "trim"
            ],
            "location": 104,
            "argumentCount": 0
          },
          {
            "chain": [
              "userData",
              "name",
              "trim"
            ],
            "location": 130,
            "argumentCount": 0
          }
        ],
        "userData.department.trim": [
          {
            "chain": [
              "userData",
              "department",
              "trim"
            ],
            "location": 107,
            "argumentCount": 0
          }
        ],
        "users.push": [
          {
            "chain": [
              "users",
              "push"
            ],
            "location": 113,
            "argumentCount": 1
          }
        ],
        "users.findIndex": [
          {
            "chain": [
              "users",
              "findIndex"
            ],
            "location": 124,
            "argumentCount": 1
          },
          {
            "chain": [
              "users",
              "findIndex"
            ],
            "location": 162,
            "argumentCount": 1
          },
          {
            "chain": [
              "users",
              "findIndex"
            ],
            "location": 231,
            "argumentCount": 1
          }
        ],
        "userData.email.trim": [
          {
            "chain": [
              "userData",
              "email",
              "trim"
            ],
            "location": 134,
            "argumentCount": 0
          }
        ],
        "users.splice": [
          {
            "chain": [
              "users",
              "splice"
            ],
            "location": 167,
            "argumentCount": 2
          }
        ],
        "users.filter": [
          {
            "chain": [
              "users",
              "filter"
            ],
            "location": 177,
            "argumentCount": 1
          },
          {
            "chain": [
              "users",
              "filter"
            ],
            "location": 188,
            "argumentCount": 1
          },
          {
            "chain": [
              "users",
              "filter"
            ],
            "location": 197,
            "argumentCount": 1
          },
          {
            "chain": [
              "users",
              "filter"
            ],
            "location": 212,
            "argumentCount": 1
          }
        ],
        "user.department.toLowerCase": [
          {
            "chain": [
              "user",
              "department",
              "toLowerCase"
            ],
            "location": 178,
            "argumentCount": 0
          },
          {
            "chain": [
              "user",
              "department",
              "toLowerCase"
            ],
            "location": 215,
            "argumentCount": 0
          }
        ],
        "department.toLowerCase": [
          {
            "chain": [
              "department",
              "toLowerCase"
            ],
            "location": 178,
            "argumentCount": 0
          }
        ],
        "query.trim": [
          {
            "chain": [
              "query",
              "trim"
            ],
            "location": 207,
            "argumentCount": 0
          }
        ],
        "query.toLowerCase": [
          {
            "chain": [
              "query",
              "toLowerCase"
            ],
            "location": 211,
            "argumentCount": 0
          }
        ],
        "user.name.toLowerCase": [
          {
            "chain": [
              "user",
              "name",
              "toLowerCase"
            ],
            "location": 213,
            "argumentCount": 0
          }
        ],
        "userIds.forEach": [
          {
            "chain": [
              "userIds",
              "forEach"
            ],
            "location": 230,
            "argumentCount": 1
          }
        ],
        "updatedUsers.push": [
          {
            "chain": [
              "updatedUsers",
              "push"
            ],
            "location": 237,
            "argumentCount": 1
          }
        ],
        "emailRegex.test": [
          {
            "chain": [
              "emailRegex",
              "test"
            ],
            "location": 251,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/angular-demo/src/app/services/user.service.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
      "name": "App",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 3,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Card.jsx",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.css"
      ],
      "dependents": [],
      "functionCalls": {
        "App": [],
        "App_definition": {
          "internalCalls": [
            "useState",
            "setCount",
            "console.log",
            "setCards",
            "prev.filter",
            "handleCardAction",
            "cards.map",
            "cardActions.map",
            "action.onClick",
            "Date.now"
          ],
          "referencedVariables": [
            "useState",
            "setCount",
            "prev",
            "console",
            "cardId",
            "actionType",
            "setCards",
            "card",
            "handleCardAction",
            "count",
            "handleDecrement",
            "handleIncrement",
            "handleReset",
            "cards",
            "cardActions",
            "action",
            "Date"
          ],
          "parameters": []
        },
        "useState": [
          {
            "location": 11,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 12,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "setCards",
            "Date.now"
          ],
          "referencedVariables": [
            "setCards",
            "Date"
          ],
          "parameters": []
        },
        "setCount": [
          {
            "location": 28,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 32,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 36,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "console.log": [
          {
            "location": 40,
            "context": "console",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setCards": [
          {
            "location": 43,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 118,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ],
        "prev.filter": [
          {
            "location": 43,
            "context": "prev",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "handleCardAction": [
          {
            "location": 50,
            "context": "",
            "arguments": [
              "variable",
              "string"
            ],
            "argumentCount": 2
          },
          {
            "location": 55,
            "context": "",
            "arguments": [
              "variable",
              "string"
            ],
            "argumentCount": 2
          },
          {
            "location": 60,
            "context": "",
            "arguments": [
              "variable",
              "string"
            ],
            "argumentCount": 2
          }
        ],
        "cards.map": [
          {
            "location": 98,
            "context": "cards",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "cardActions.map": [
          {
            "location": 104,
            "context": "cardActions",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "action.onClick": [
          {
            "location": 106,
            "context": "action",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "location": 120,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          }
        ]
      },
      "variableReferences": {
        "console": [
          {
            "property": "log",
            "location": 40,
            "isComputed": false
          }
        ],
        "prev": [
          {
            "property": "filter",
            "location": 43,
            "isComputed": false
          }
        ],
        "card": [
          {
            "property": "id",
            "location": 43,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 100,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 101,
            "isComputed": false
          },
          {
            "property": "content",
            "location": 102,
            "isComputed": false
          },
          {
            "property": "imageUrl",
            "location": 103,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 106,
            "isComputed": false
          }
        ],
        "cards": [
          {
            "property": "map",
            "location": 98,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 112,
            "isComputed": false
          }
        ],
        "cardActions": [
          {
            "property": "map",
            "location": 104,
            "isComputed": false
          }
        ],
        "action": [
          {
            "property": "onClick",
            "location": 106,
            "isComputed": false
          }
        ],
        "Date": [
          {
            "property": "now",
            "location": 120,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "handleIncrement": {
          "type": "function",
          "dependencies": [],
          "location": 27,
          "isDeclaration": true
        },
        "handleDecrement": {
          "type": "function",
          "dependencies": [],
          "location": 31,
          "isDeclaration": true
        },
        "handleReset": {
          "type": "function",
          "dependencies": [],
          "location": 35,
          "isDeclaration": true
        },
        "handleCardAction": {
          "type": "function",
          "dependencies": [],
          "location": 39,
          "isDeclaration": true
        },
        "cardActions": {
          "type": "array",
          "dependencies": [],
          "location": 47,
          "isDeclaration": true
        }
      },
      "hookUsage": [
        {
          "name": "useState",
          "location": 11,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 12,
          "arguments": [
            "array"
          ],
          "argumentCount": 1
        }
      ],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 78,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 85,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 88,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 115,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {
        "useState_11": {
          "type": "useState",
          "location": 11,
          "initialValue": "number"
        },
        "useState_12": {
          "type": "useState",
          "location": 12,
          "initialValue": "array"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "cards.length === null && null",
          "location": 112,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "console.log": [
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 40,
            "argumentCount": 1
          }
        ],
        "prev.filter": [
          {
            "chain": [
              "prev",
              "filter"
            ],
            "location": 43,
            "argumentCount": 1
          }
        ],
        "cards.map": [
          {
            "chain": [
              "cards",
              "map"
            ],
            "location": 98,
            "argumentCount": 1
          }
        ],
        "cardActions.map": [
          {
            "chain": [
              "cardActions",
              "map"
            ],
            "location": 104,
            "argumentCount": 1
          }
        ],
        "action.onClick": [
          {
            "chain": [
              "action",
              "onClick"
            ],
            "location": 106,
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 120,
            "argumentCount": 0
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/App.jsx"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
      "name": "App",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 4,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/services/api.ts",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/hooks/useApi.ts",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.css"
      ],
      "dependents": [],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "func"
          ],
          "referencedVariables": [
            "func",
            "args"
          ],
          "parameters": []
        },
        "useState": [
          {
            "location": 9,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 38,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 45,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 52,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 53,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 56,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 57,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 58,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 61,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "useList": [
          {
            "location": 25,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 35,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "useMemo": [
          {
            "location": 64,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 65,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 66,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 67,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 69,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 73,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 77,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 82,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 91,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 100,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 104,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 111,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "tasks.filter": [
          {
            "location": 70,
            "context": "tasks",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 85,
            "context": "tasks",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "users.filter": [
          {
            "location": 74,
            "context": "users",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 94,
            "context": "users",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "Math.round": [
          {
            "location": 79,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "taskSearchQuery.toLowerCase": [
          {
            "location": 84,
            "context": "taskSearchQuery",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "userSearchQuery.toLowerCase": [
          {
            "location": 93,
            "context": "userSearchQuery",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "useAsyncOperation": [
          {
            "location": 116,
            "context": "",
            "arguments": [
              "call-result"
            ],
            "argumentCount": 1
          }
        ],
        "useCallback": [
          {
            "location": 117,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 123,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 127,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 134,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 139,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 145,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 152,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 159,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 184,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 195,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 209,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 237,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 248,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 262,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 271,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 279,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 288,
            "context": "",
            "arguments": [
              "call-result",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 293,
            "context": "",
            "arguments": [
              "call-result",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "Promise.all": [
          {
            "location": 118,
            "context": "Promise",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ],
        "refetchTasks": [
          {
            "location": 118,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "refetchUsers": [
          {
            "location": 118,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "setWindowWidth": [
          {
            "location": 124,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setAppState": [
          {
            "location": 128,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 135,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 177,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 188,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 201,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 230,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 241,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 254,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "title.trim": [
          {
            "location": 140,
            "context": "title",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "email.trim": [
          {
            "location": 146,
            "context": "email",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "emailRegex.test": [
          {
            "location": 148,
            "context": "emailRegex",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "name.trim": [
          {
            "location": 153,
            "context": "name",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "e.preventDefault": [
          {
            "location": 160,
            "context": "e",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 210,
            "context": "e",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 318,
            "context": "e",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 324,
            "context": "e",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "validateTaskTitle": [
          {
            "location": 162,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 436,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setTaskTitleError": [
          {
            "location": 163,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 175,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 436,
            "context": "",
            "arguments": [
              "call-result"
            ],
            "argumentCount": 1
          }
        ],
        "createTask": [
          {
            "location": 168,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setNewTask": [
          {
            "location": 169,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 435,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 455,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 466,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "updateTask": [
          {
            "location": 186,
            "context": "",
            "arguments": [
              "unknown",
              "object"
            ],
            "argumentCount": 2
          }
        ],
        "window.confirm": [
          {
            "location": 196,
            "context": "window",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 249,
            "context": "window",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "deleteTask": [
          {
            "location": 199,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "validateUserName": [
          {
            "location": 212,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 568,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "validateEmail": [
          {
            "location": 213,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 590,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setUserNameError": [
          {
            "location": 215,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 227,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 568,
            "context": "",
            "arguments": [
              "call-result"
            ],
            "argumentCount": 1
          }
        ],
        "setUserEmailError": [
          {
            "location": 216,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 228,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 590,
            "context": "",
            "arguments": [
              "call-result"
            ],
            "argumentCount": 1
          }
        ],
        "createUser": [
          {
            "location": 221,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setNewUser": [
          {
            "location": 222,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 567,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 589,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 609,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "updateUser": [
          {
            "location": 239,
            "context": "",
            "arguments": [
              "unknown",
              "object"
            ],
            "argumentCount": 2
          }
        ],
        "deleteUser": [
          {
            "location": 252,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "debounce": [
          {
            "location": 289,
            "context": "",
            "arguments": [
              "function",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 294,
            "context": "",
            "arguments": [
              "function",
              "number"
            ],
            "argumentCount": 2
          }
        ],
        "setTaskSearchQuery": [
          {
            "location": 289,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setUserSearchQuery": [
          {
            "location": 294,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "useEffect": [
          {
            "location": 299,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 309,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "executeRefreshData": [
          {
            "location": 300,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 319,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "window.addEventListener": [
          {
            "location": 301,
            "context": "window",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 329,
            "context": "window",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "window.removeEventListener": [
          {
            "location": 304,
            "context": "window",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 330,
            "context": "window",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "clearError": [
          {
            "location": 313,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "toggleTheme": [
          {
            "location": 325,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "debouncedTaskSearch": [
          {
            "location": 496,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "filteredTasks.map": [
          {
            "location": 508,
            "context": "filteredTasks",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "getPriorityText": [
          {
            "location": 520,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 522,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "formatDate": [
          {
            "location": 525,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "handleToggleTaskCompletion": [
          {
            "location": 531,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "handleDeleteTask": [
          {
            "location": 539,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "debouncedUserSearch": [
          {
            "location": 638,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "filteredUsers.map": [
          {
            "location": 650,
            "context": "filteredUsers",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "getRoleText": [
          {
            "location": 662,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 664,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "handleToggleUserStatus": [
          {
            "location": 676,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "handleDeleteUser": [
          {
            "location": 684,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "debounce_definition": {
          "internalCalls": [
            "clearTimeout",
            "setTimeout",
            "func"
          ],
          "referencedVariables": [
            "T",
            "Parameters",
            "NodeJS",
            "Timeout",
            "clearTimeout",
            "timeout",
            "setTimeout",
            "func",
            "args",
            "wait"
          ],
          "parameters": [
            "func",
            "wait"
          ]
        },
        "clearTimeout": [
          {
            "location": 748,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setTimeout": [
          {
            "location": 749,
            "context": "",
            "arguments": [
              "function",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "func": [
          {
            "location": 749,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "React.memo": [
          {
            "location": 753,
            "context": "React",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "window": [
          {
            "property": "innerWidth",
            "location": 61,
            "isComputed": false
          },
          {
            "property": "innerWidth",
            "location": 124,
            "isComputed": false
          },
          {
            "property": "confirm",
            "location": 196,
            "isComputed": false
          },
          {
            "property": "confirm",
            "location": 249,
            "isComputed": false
          },
          {
            "property": "addEventListener",
            "location": 301,
            "isComputed": false
          },
          {
            "property": "removeEventListener",
            "location": 304,
            "isComputed": false
          },
          {
            "property": "addEventListener",
            "location": 329,
            "isComputed": false
          },
          {
            "property": "removeEventListener",
            "location": 330,
            "isComputed": false
          }
        ],
        "appState": [
          {
            "property": "theme",
            "location": 64,
            "isComputed": false
          },
          {
            "property": "theme",
            "location": 64,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 67,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 67,
            "isComputed": false
          }
        ],
        "tasks": [
          {
            "property": "filter",
            "location": 70,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 78,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 79,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 80,
            "isComputed": false
          },
          {
            "property": "filter",
            "location": 85,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 397,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 398,
            "isComputed": false
          }
        ],
        "task": [
          {
            "property": "completed",
            "location": 70,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 86,
            "isComputed": false
          },
          {
            "property": "description",
            "location": 87,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 186,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 186,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 510,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 511,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 515,
            "isComputed": false
          },
          {
            "property": "description",
            "location": 516,
            "isComputed": false
          },
          {
            "property": "priority",
            "location": 519,
            "isComputed": false
          },
          {
            "property": "priority",
            "location": 520,
            "isComputed": false
          },
          {
            "property": "priority",
            "location": 522,
            "isComputed": false
          },
          {
            "property": "createdAt",
            "location": 525,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 533,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 534,
            "isComputed": false
          },
          {
            "property": "completed",
            "location": 536,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 539,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 541,
            "isComputed": false
          }
        ],
        "users": [
          {
            "property": "filter",
            "location": 74,
            "isComputed": false
          },
          {
            "property": "filter",
            "location": 94,
            "isComputed": false
          }
        ],
        "user": [
          {
            "property": "isActive",
            "location": 74,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 95,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 96,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 239,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 239,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 652,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 653,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 657,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 658,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 661,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 662,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 664,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 667,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 668,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 670,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 678,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 679,
            "isComputed": false
          },
          {
            "property": "isActive",
            "location": 681,
            "isComputed": false
          },
          {
            "property": "id",
            "location": 684,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 686,
            "isComputed": false
          }
        ],
        "Math": [
          {
            "property": "round",
            "location": 79,
            "isComputed": false
          }
        ],
        "taskSearchQuery": [
          {
            "property": "toLowerCase",
            "location": 84,
            "isComputed": false
          }
        ],
        "userSearchQuery": [
          {
            "property": "toLowerCase",
            "location": 93,
            "isComputed": false
          }
        ],
        "newTask": [
          {
            "property": "title",
            "location": 101,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 102,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 162,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 433,
            "isComputed": false
          },
          {
            "property": "description",
            "location": 454,
            "isComputed": false
          },
          {
            "property": "priority",
            "location": 465,
            "isComputed": false
          }
        ],
        "newUser": [
          {
            "property": "name",
            "location": 105,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 106,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 109,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 109,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 212,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 213,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 565,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 587,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 608,
            "isComputed": false
          }
        ],
        "filteredTasks": [
          {
            "property": "length",
            "location": 112,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 113,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 489,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 502,
            "isComputed": false
          },
          {
            "property": "map",
            "location": 508,
            "isComputed": false
          }
        ],
        "filteredUsers": [
          {
            "property": "length",
            "location": 112,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 113,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 631,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 644,
            "isComputed": false
          },
          {
            "property": "map",
            "location": 650,
            "isComputed": false
          }
        ],
        "Promise": [
          {
            "property": "all",
            "location": 118,
            "isComputed": false
          }
        ],
        "prev": [
          {
            "property": "theme",
            "location": 130,
            "isComputed": false
          }
        ],
        "title": [
          {
            "property": "trim",
            "location": 140,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 141,
            "isComputed": false
          }
        ],
        "email": [
          {
            "property": "trim",
            "location": 146,
            "isComputed": false
          }
        ],
        "emailRegex": [
          {
            "property": "test",
            "location": 148,
            "isComputed": false
          }
        ],
        "name": [
          {
            "property": "trim",
            "location": 153,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 154,
            "isComputed": false
          }
        ],
        "e": [
          {
            "property": "preventDefault",
            "location": 160,
            "isComputed": false
          },
          {
            "property": "preventDefault",
            "location": 210,
            "isComputed": false
          },
          {
            "property": "key",
            "location": 312,
            "isComputed": false
          },
          {
            "property": "ctrlKey",
            "location": 317,
            "isComputed": false
          },
          {
            "property": "metaKey",
            "location": 317,
            "isComputed": false
          },
          {
            "property": "key",
            "location": 317,
            "isComputed": false
          },
          {
            "property": "preventDefault",
            "location": 318,
            "isComputed": false
          },
          {
            "property": "ctrlKey",
            "location": 323,
            "isComputed": false
          },
          {
            "property": "metaKey",
            "location": 323,
            "isComputed": false
          },
          {
            "property": "key",
            "location": 323,
            "isComputed": false
          },
          {
            "property": "preventDefault",
            "location": 324,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 435,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 436,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 455,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 468,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 496,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 567,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 568,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 589,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 590,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 611,
            "isComputed": false
          },
          {
            "property": "target",
            "location": 638,
            "isComputed": false
          }
        ],
        "err": [
          {
            "property": "message",
            "location": 179,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 190,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 203,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 232,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 243,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 256,
            "isComputed": false
          }
        ],
        "map": [
          {
            "property": "priority",
            "location": 268,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 276,
            "isComputed": false
          }
        ],
        "Intl": [
          {
            "property": "DateTimeFormat",
            "location": 280,
            "isComputed": false
          }
        ],
        "React": [
          {
            "property": "memo",
            "location": 753,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "App": {
          "type": "function",
          "dependencies": [],
          "location": 7,
          "isDeclaration": true
        },
        "isDarkTheme": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "appState"
          ],
          "location": 64,
          "isDeclaration": true
        },
        "isMobile": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "windowWidth"
          ],
          "location": 65,
          "isDeclaration": true
        },
        "loading": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "tasksLoading",
            "usersLoading"
          ],
          "location": 66,
          "isDeclaration": true
        },
        "error": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "tasksError",
            "usersError",
            "appState"
          ],
          "location": 67,
          "isDeclaration": true
        },
        "completedTasks": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "tasks"
          ],
          "location": 69,
          "isDeclaration": true
        },
        "activeUsers": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "users"
          ],
          "location": 73,
          "isDeclaration": true
        },
        "completionRate": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "completedTasks",
            "tasks"
          ],
          "location": 77,
          "isDeclaration": true
        },
        "filteredTasks": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "tasks",
            "taskSearchQuery"
          ],
          "location": 82,
          "isDeclaration": true
        },
        "query": {
          "type": "call-result",
          "dependencies": [],
          "location": 93,
          "isDeclaration": true
        },
        "filteredUsers": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "users",
            "userSearchQuery"
          ],
          "location": 91,
          "isDeclaration": true
        },
        "isTaskFormValid": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "newTask",
            "taskTitleError"
          ],
          "location": 100,
          "isDeclaration": true
        },
        "isUserFormValid": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "newUser",
            "newUser",
            "userNameError",
            "userEmailError"
          ],
          "location": 104,
          "isDeclaration": true
        },
        "visibleItemsCount": {
          "type": "call-result",
          "dependencies": [
            "useMemo",
            "filteredTasks",
            "filteredUsers"
          ],
          "location": 111,
          "isDeclaration": true
        },
        "handleResize": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 123,
          "isDeclaration": true
        },
        "toggleTheme": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 127,
          "isDeclaration": true
        },
        "clearError": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 134,
          "isDeclaration": true
        },
        "validateTaskTitle": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 139,
          "isDeclaration": true
        },
        "validateEmail": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 145,
          "isDeclaration": true
        },
        "emailRegex": {
          "type": "unknown",
          "dependencies": [],
          "location": 147,
          "isDeclaration": true
        },
        "validateUserName": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 152,
          "isDeclaration": true
        },
        "handleAddTask": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "newTask",
            "validateTaskTitle",
            "createTask"
          ],
          "location": 159,
          "isDeclaration": true
        },
        "titleError": {
          "type": "call-result",
          "dependencies": [
            "validateTaskTitle",
            "newTask"
          ],
          "location": 162,
          "isDeclaration": true
        },
        "handleToggleTaskCompletion": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "updateTask"
          ],
          "location": 184,
          "isDeclaration": true
        },
        "handleDeleteTask": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "deleteTask"
          ],
          "location": 195,
          "isDeclaration": true
        },
        "handleAddUser": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "newUser",
            "validateUserName",
            "validateEmail",
            "createUser"
          ],
          "location": 209,
          "isDeclaration": true
        },
        "nameError": {
          "type": "call-result",
          "dependencies": [
            "validateUserName",
            "newUser"
          ],
          "location": 212,
          "isDeclaration": true
        },
        "emailError": {
          "type": "call-result",
          "dependencies": [
            "validateEmail",
            "newUser"
          ],
          "location": 213,
          "isDeclaration": true
        },
        "handleToggleUserStatus": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "updateUser"
          ],
          "location": 237,
          "isDeclaration": true
        },
        "handleDeleteUser": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "deleteUser"
          ],
          "location": 248,
          "isDeclaration": true
        },
        "getPriorityText": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 262,
          "isDeclaration": true
        },
        "map": {
          "type": "object",
          "dependencies": [],
          "location": 272,
          "isDeclaration": true
        },
        "getRoleText": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 271,
          "isDeclaration": true
        },
        "formatDate": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 279,
          "isDeclaration": true
        },
        "debouncedTaskSearch": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "debounce"
          ],
          "location": 288,
          "isDeclaration": true
        },
        "debouncedUserSearch": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "debounce"
          ],
          "location": 293,
          "isDeclaration": true
        },
        "handleKeyDown": {
          "type": "function",
          "dependencies": [],
          "location": 310,
          "isDeclaration": true
        },
        "timeout": {
          "type": "undefined",
          "dependencies": [],
          "location": 746,
          "isDeclaration": true
        },
        "timeout_reassign_749": {
          "variable": "timeout",
          "type": "call-result",
          "dependencies": [
            "setTimeout",
            "wait"
          ],
          "location": 749,
          "isReassignment": true
        }
      },
      "hookUsage": [
        {
          "name": "useState",
          "location": 9,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useList",
          "location": 25,
          "arguments": [
            "variable"
          ],
          "argumentCount": 1
        },
        {
          "name": "useList",
          "location": 35,
          "arguments": [
            "variable"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 38,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 45,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 52,
          "arguments": [
            "string"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 53,
          "arguments": [
            "string"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 56,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 57,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 58,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 61,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useMemo",
          "location": 64,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 65,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 66,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 67,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 69,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 73,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 77,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 82,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 91,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 100,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 104,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useMemo",
          "location": 111,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useAsyncOperation",
          "location": 116,
          "arguments": [
            "call-result"
          ],
          "argumentCount": 1
        },
        {
          "name": "useCallback",
          "location": 117,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 123,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 127,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 134,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 139,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 145,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 152,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 159,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 184,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 195,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 209,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 237,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 248,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 262,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 271,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 279,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 288,
          "arguments": [
            "call-result",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 293,
          "arguments": [
            "call-result",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useEffect",
          "location": 299,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useEffect",
          "location": 309,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        }
      ],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 345,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 353,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 379,
          "attributeName": "onClick"
        },
        {
          "eventType": "submit",
          "handlerType": "variable",
          "location": 427,
          "attributeName": "onSubmit"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 430,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 452,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 463,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 492,
          "attributeName": "onChange"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 530,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 538,
          "attributeName": "onClick"
        },
        {
          "eventType": "submit",
          "handlerType": "variable",
          "location": 559,
          "attributeName": "onSubmit"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 562,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 584,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 606,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 634,
          "attributeName": "onChange"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 675,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 683,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {
        "useState_9": {
          "type": "useState",
          "location": 9,
          "initialValue": "object"
        },
        "useState_38": {
          "type": "useState",
          "location": 38,
          "initialValue": "object"
        },
        "useState_45": {
          "type": "useState",
          "location": 45,
          "initialValue": "object"
        },
        "useState_52": {
          "type": "useState",
          "location": 52,
          "initialValue": "string"
        },
        "useState_53": {
          "type": "useState",
          "location": 53,
          "initialValue": "string"
        },
        "useState_56": {
          "type": "useState",
          "location": 56,
          "initialValue": "unknown"
        },
        "useState_57": {
          "type": "useState",
          "location": 57,
          "initialValue": "unknown"
        },
        "useState_58": {
          "type": "useState",
          "location": 58,
          "initialValue": "unknown"
        },
        "useState_61": {
          "type": "useState",
          "location": 61,
          "initialValue": "unknown"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "tasksLoading || usersLoading",
          "location": 66,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "tasksError || usersError || appState.error",
          "location": 67,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "tasksError || usersError",
          "location": 67,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 86,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 95,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null !== null && null",
          "location": 101,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null !== null && null !== null && null && null",
          "location": 105,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null !== null && null !== null && null",
          "location": 105,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null !== null && null !== null",
          "location": 105,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "nameError || emailError",
          "location": 218,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "map.priority || priority",
          "location": 268,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "map.role || role",
          "location": 276,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "e.key === null && error",
          "location": 312,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "e.ctrlKey || e.metaKey && e.key === null",
          "location": 317,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "e.ctrlKey || e.metaKey",
          "location": 317,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "e.ctrlKey || e.metaKey && e.key === null",
          "location": 323,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "e.ctrlKey || e.metaKey",
          "location": 323,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "loading && null",
          "location": 367,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "error && null",
          "location": 375,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "taskTitleError && null",
          "location": 443,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || loading",
          "location": 480,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "userNameError && null",
          "location": 575,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "userEmailError && null",
          "location": 597,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || loading",
          "location": 622,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "tasks.filter": [
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 70,
            "argumentCount": 1
          },
          {
            "chain": [
              "tasks",
              "filter"
            ],
            "location": 85,
            "argumentCount": 1
          }
        ],
        "users.filter": [
          {
            "chain": [
              "users",
              "filter"
            ],
            "location": 74,
            "argumentCount": 1
          },
          {
            "chain": [
              "users",
              "filter"
            ],
            "location": 94,
            "argumentCount": 1
          }
        ],
        "Math.round": [
          {
            "chain": [
              "Math",
              "round"
            ],
            "location": 79,
            "argumentCount": 1
          }
        ],
        "taskSearchQuery.toLowerCase": [
          {
            "chain": [
              "taskSearchQuery",
              "toLowerCase"
            ],
            "location": 84,
            "argumentCount": 0
          }
        ],
        "task.title.toLowerCase": [
          {
            "chain": [
              "task",
              "title",
              "toLowerCase"
            ],
            "location": 86,
            "argumentCount": 0
          }
        ],
        "task.description.toLowerCase": [
          {
            "chain": [
              "task",
              "description",
              "toLowerCase"
            ],
            "location": 87,
            "argumentCount": 0
          }
        ],
        "userSearchQuery.toLowerCase": [
          {
            "chain": [
              "userSearchQuery",
              "toLowerCase"
            ],
            "location": 93,
            "argumentCount": 0
          }
        ],
        "user.name.toLowerCase": [
          {
            "chain": [
              "user",
              "name",
              "toLowerCase"
            ],
            "location": 95,
            "argumentCount": 0
          }
        ],
        "user.email.toLowerCase": [
          {
            "chain": [
              "user",
              "email",
              "toLowerCase"
            ],
            "location": 96,
            "argumentCount": 0
          }
        ],
        "newTask.title.trim": [
          {
            "chain": [
              "newTask",
              "title",
              "trim"
            ],
            "location": 101,
            "argumentCount": 0
          }
        ],
        "newUser.name.trim": [
          {
            "chain": [
              "newUser",
              "name",
              "trim"
            ],
            "location": 105,
            "argumentCount": 0
          }
        ],
        "newUser.email.trim": [
          {
            "chain": [
              "newUser",
              "email",
              "trim"
            ],
            "location": 106,
            "argumentCount": 0
          }
        ],
        "Promise.all": [
          {
            "chain": [
              "Promise",
              "all"
            ],
            "location": 118,
            "argumentCount": 1
          }
        ],
        "title.trim": [
          {
            "chain": [
              "title",
              "trim"
            ],
            "location": 140,
            "argumentCount": 0
          }
        ],
        "email.trim": [
          {
            "chain": [
              "email",
              "trim"
            ],
            "location": 146,
            "argumentCount": 0
          }
        ],
        "emailRegex.test": [
          {
            "chain": [
              "emailRegex",
              "test"
            ],
            "location": 148,
            "argumentCount": 1
          }
        ],
        "name.trim": [
          {
            "chain": [
              "name",
              "trim"
            ],
            "location": 153,
            "argumentCount": 0
          }
        ],
        "e.preventDefault": [
          {
            "chain": [
              "e",
              "preventDefault"
            ],
            "location": 160,
            "argumentCount": 0
          },
          {
            "chain": [
              "e",
              "preventDefault"
            ],
            "location": 210,
            "argumentCount": 0
          },
          {
            "chain": [
              "e",
              "preventDefault"
            ],
            "location": 318,
            "argumentCount": 0
          },
          {
            "chain": [
              "e",
              "preventDefault"
            ],
            "location": 324,
            "argumentCount": 0
          }
        ],
        "window.confirm": [
          {
            "chain": [
              "window",
              "confirm"
            ],
            "location": 196,
            "argumentCount": 1
          },
          {
            "chain": [
              "window",
              "confirm"
            ],
            "location": 249,
            "argumentCount": 1
          }
        ],
        "window.addEventListener": [
          {
            "chain": [
              "window",
              "addEventListener"
            ],
            "location": 301,
            "argumentCount": 2
          },
          {
            "chain": [
              "window",
              "addEventListener"
            ],
            "location": 329,
            "argumentCount": 2
          }
        ],
        "window.removeEventListener": [
          {
            "chain": [
              "window",
              "removeEventListener"
            ],
            "location": 304,
            "argumentCount": 2
          },
          {
            "chain": [
              "window",
              "removeEventListener"
            ],
            "location": 330,
            "argumentCount": 2
          }
        ],
        "filteredTasks.map": [
          {
            "chain": [
              "filteredTasks",
              "map"
            ],
            "location": 508,
            "argumentCount": 1
          }
        ],
        "filteredUsers.map": [
          {
            "chain": [
              "filteredUsers",
              "map"
            ],
            "location": 650,
            "argumentCount": 1
          }
        ],
        "React.memo": [
          {
            "chain": [
              "React",
              "memo"
            ],
            "location": 753,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "promise",
          "method": "all",
          "location": 118
        },
        {
          "type": "timer",
          "method": "setTimeout",
          "location": 749
        }
      ],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/App.tsx"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx",
      "name": "Button",
      "propsDeclared": [
        "children",
        "variant",
        "size",
        "disabled",
        "onClick",
        "className",
        "unusedProp"
      ],
      "propsUsedInBody": [
        "variant",
        "size",
        "disabled",
        "className",
        "onClick",
        "children"
      ],
      "unusedProps": [
        "unusedProp"
      ],
      "inDegree": 2,
      "outDegree": 0,
      "cyclomaticComplexity": 1,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Card.jsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "variant",
            "size",
            "disabled",
            "baseClass",
            "variantClass",
            "sizeClass",
            "disabledClass",
            "className",
            "Boolean",
            "buttonClass",
            "onClick",
            "children"
          ],
          "parameters": [
            "destructured"
          ]
        },
        "PropTypes.oneOf": [
          {
            "location": 52,
            "context": "PropTypes",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          },
          {
            "location": 53,
            "context": "PropTypes",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "Button": [
          {
            "property": "propTypes",
            "location": 50,
            "isComputed": false
          }
        ],
        "PropTypes": [
          {
            "property": "node",
            "location": 51,
            "isComputed": false
          },
          {
            "property": "oneOf",
            "location": 52,
            "isComputed": false
          },
          {
            "property": "oneOf",
            "location": 53,
            "isComputed": false
          },
          {
            "property": "bool",
            "location": 54,
            "isComputed": false
          },
          {
            "property": "func",
            "location": 55,
            "isComputed": false
          },
          {
            "property": "string",
            "location": 56,
            "isComputed": false
          },
          {
            "property": "string",
            "location": 57,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "Button": {
          "type": "function",
          "dependencies": [],
          "location": 16,
          "isDeclaration": true
        },
        "baseClass": {
          "type": "string",
          "dependencies": [],
          "location": 25,
          "isDeclaration": true
        },
        "variantClass": {
          "type": "unknown",
          "dependencies": [],
          "location": 26,
          "isDeclaration": true
        },
        "sizeClass": {
          "type": "unknown",
          "dependencies": [],
          "location": 27,
          "isDeclaration": true
        },
        "disabledClass": {
          "type": "unknown",
          "dependencies": [],
          "location": 28,
          "isDeclaration": true
        },
        "buttonClass": {
          "type": "call-result",
          "dependencies": [],
          "location": 30,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 39,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "PropTypes.oneOf": [
          {
            "chain": [
              "PropTypes",
              "oneOf"
            ],
            "location": 52,
            "argumentCount": 1
          },
          {
            "chain": [
              "PropTypes",
              "oneOf"
            ],
            "location": 53,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/components/Button.jsx"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Card.jsx": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Card.jsx",
      "name": "Card",
      "propsDeclared": [
        "title",
        "content",
        "imageUrl",
        "actions",
        "className"
      ],
      "propsUsedInBody": [
        "className",
        "imageUrl",
        "title",
        "content",
        "actions"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 1,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "index",
            "action"
          ],
          "parameters": [
            "action",
            "index"
          ]
        },
        "actions.map": [
          {
            "location": 37,
            "context": "actions",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "PropTypes.arrayOf": [
          {
            "location": 57,
            "context": "PropTypes",
            "arguments": [
              "call-result"
            ],
            "argumentCount": 1
          }
        ],
        "PropTypes.shape": [
          {
            "location": 58,
            "context": "PropTypes",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "actions": [
          {
            "property": "length",
            "location": 35,
            "isComputed": false
          },
          {
            "property": "map",
            "location": 37,
            "isComputed": false
          }
        ],
        "action": [
          {
            "property": "variant",
            "location": 40,
            "isComputed": false
          },
          {
            "property": "onClick",
            "location": 42,
            "isComputed": false
          },
          {
            "property": "label",
            "location": 44,
            "isComputed": false
          }
        ],
        "Card": [
          {
            "property": "propTypes",
            "location": 53,
            "isComputed": false
          }
        ],
        "PropTypes": [
          {
            "property": "string",
            "location": 54,
            "isComputed": false
          },
          {
            "property": "string",
            "location": 55,
            "isComputed": false
          },
          {
            "property": "string",
            "location": 56,
            "isComputed": false
          },
          {
            "property": "arrayOf",
            "location": 57,
            "isComputed": false
          },
          {
            "property": "shape",
            "location": 58,
            "isComputed": false
          },
          {
            "property": "string",
            "location": 59,
            "isComputed": false
          },
          {
            "property": "func",
            "location": 60,
            "isComputed": false
          },
          {
            "property": "string",
            "location": 61,
            "isComputed": false
          },
          {
            "property": "string",
            "location": 64,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "Card": {
          "type": "function",
          "dependencies": [],
          "location": 15,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "unknown",
          "location": 38,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "imageUrl && null",
          "location": 24,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "title && null",
          "location": 31,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "content && null",
          "location": 32,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "actions.length > null && null",
          "location": 35,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "action.variant || null",
          "location": 40,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "actions.map": [
          {
            "chain": [
              "actions",
              "map"
            ],
            "location": 37,
            "argumentCount": 1
          }
        ],
        "PropTypes.arrayOf": [
          {
            "chain": [
              "PropTypes",
              "arrayOf"
            ],
            "location": 57,
            "argumentCount": 1
          }
        ],
        "PropTypes.shape": [
          {
            "chain": [
              "PropTypes",
              "shape"
            ],
            "location": 58,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/components/Card.jsx"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx",
      "name": "OrphanComponent",
      "propsDeclared": [
        "message",
        "type",
        "onClose",
        "unusedProp1",
        "unusedProp2",
        "unusedProp3"
      ],
      "propsUsedInBody": [
        "type",
        "message",
        "onClose"
      ],
      "unusedProps": [
        "unusedProp1",
        "unusedProp2",
        "unusedProp3"
      ],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 1,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "type"
          ],
          "parameters": []
        },
        "getTypeClass": [
          {
            "location": 30,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "PropTypes.oneOf": [
          {
            "location": 49,
            "context": "PropTypes",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "OrphanComponent": [
          {
            "property": "propTypes",
            "location": 47,
            "isComputed": false
          }
        ],
        "PropTypes": [
          {
            "property": "string",
            "location": 48,
            "isComputed": false
          },
          {
            "property": "oneOf",
            "location": 49,
            "isComputed": false
          },
          {
            "property": "func",
            "location": 50,
            "isComputed": false
          },
          {
            "property": "string",
            "location": 51,
            "isComputed": false
          },
          {
            "property": "number",
            "location": 52,
            "isComputed": false
          },
          {
            "property": "bool",
            "location": 53,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "OrphanComponent": {
          "type": "function",
          "dependencies": [],
          "location": 8,
          "isDeclaration": true
        },
        "getTypeClass": {
          "type": "function",
          "dependencies": [],
          "location": 16,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 34,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "onClose && null",
          "location": 33,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "PropTypes.oneOf": [
          {
            "chain": [
              "PropTypes",
              "oneOf"
            ],
            "location": 49,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/hooks/useApi.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/hooks/useApi.ts",
      "name": "useApi",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 1,
      "cyclomaticComplexity": 0,
      "dependencies": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx"
      ],
      "functionCalls": {
        "useApi": [],
        "useApi_definition": {
          "internalCalls": [
            "useState",
            "useCallback",
            "setState",
            "apiFunction",
            "useEffect",
            "execute"
          ],
          "referencedVariables": [
            "Promise",
            "ApiResponse",
            "T",
            "UseApiOptions",
            "options",
            "useState",
            "ApiState",
            "useCallback",
            "setState",
            "prev",
            "apiFunction",
            "response",
            "onSuccess",
            "errorMessage",
            "onError",
            "error",
            "Error",
            "useEffect",
            "immediate",
            "execute",
            "state",
            "reset"
          ],
          "parameters": [
            "apiFunction",
            "complex"
          ]
        },
        "useState": [
          {
            "location": 32,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 102,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 169,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 262,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 282,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "useCallback": [
          {
            "location": 38,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 71,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 108,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 144,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 179,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 212,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 219,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 226,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 233,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 292,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 302,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "setStoredValue",
            "console.error"
          ],
          "referencedVariables": [
            "window",
            "key",
            "setStoredValue",
            "initialValue",
            "console",
            "error"
          ],
          "parameters": []
        },
        "setState": [
          {
            "location": 39,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 45,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 53,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 62,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 72,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 109,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 115,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 124,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 134,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 145,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 180,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 186,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 194,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 203,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 213,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 220,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 227,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 234,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "apiFunction": [
          {
            "location": 42,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "useEffect": [
          {
            "location": 79,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 241,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 264,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "execute": [
          {
            "location": 81,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "useAsyncOperation": [],
        "useAsyncOperation_definition": {
          "internalCalls": [
            "useState",
            "useCallback",
            "setState",
            "operation"
          ],
          "referencedVariables": [
            "params",
            "P",
            "Promise",
            "ApiResponse",
            "T",
            "UseApiOptions",
            "options",
            "useState",
            "ApiState",
            "useCallback",
            "setState",
            "prev",
            "operation",
            "response",
            "onSuccess",
            "errorMessage",
            "onError",
            "Error",
            "error",
            "state",
            "execute",
            "reset"
          ],
          "parameters": [
            "operation",
            "complex"
          ]
        },
        "operation": [
          {
            "location": 112,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "useList": [],
        "useList_definition": {
          "internalCalls": [
            "useState",
            "useCallback",
            "setState",
            "fetchFunction",
            "useEffect",
            "fetch"
          ],
          "referencedVariables": [
            "Promise",
            "ApiResponse",
            "T",
            "UseApiOptions",
            "options",
            "useState",
            "useCallback",
            "setState",
            "prev",
            "fetchFunction",
            "response",
            "onSuccess",
            "errorMessage",
            "onError",
            "error",
            "Error",
            "item",
            "i",
            "index",
            "existingItem",
            "useEffect",
            "immediate",
            "fetch",
            "state",
            "addItem",
            "updateItem",
            "removeItem",
            "reset"
          ],
          "parameters": [
            "fetchFunction",
            "complex"
          ]
        },
        "fetchFunction": [
          {
            "location": 183,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "fetch": [
          {
            "location": 243,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "useDebounce": [],
        "useDebounce_definition": {
          "internalCalls": [
            "useState",
            "useEffect",
            "setTimeout",
            "setDebouncedValue",
            "clearTimeout"
          ],
          "referencedVariables": [
            "T",
            "useState",
            "value",
            "useEffect",
            "setTimeout",
            "setDebouncedValue",
            "delay",
            "clearTimeout",
            "handler",
            "debouncedValue"
          ],
          "parameters": [
            "value",
            "delay"
          ]
        },
        "setTimeout": [
          {
            "location": 265,
            "context": "",
            "arguments": [
              "function",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "setDebouncedValue": [
          {
            "location": 266,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "clearTimeout": [
          {
            "location": 270,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "useLocalStorage": [],
        "useLocalStorage_definition": {
          "internalCalls": [
            "useState",
            "JSON.parse",
            "console.error",
            "useCallback",
            "value",
            "setStoredValue",
            "JSON.stringify"
          ],
          "referencedVariables": [
            "T",
            "useState",
            "window",
            "key",
            "item",
            "JSON",
            "initialValue",
            "console",
            "error",
            "useCallback",
            "val",
            "value",
            "Function",
            "storedValue",
            "setStoredValue",
            "valueToStore",
            "setValue",
            "removeValue",
            "const"
          ],
          "parameters": [
            "key",
            "initialValue"
          ]
        },
        "JSON.parse": [
          {
            "location": 285,
            "context": "JSON",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "location": 287,
            "context": "console",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 298,
            "context": "console",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 307,
            "context": "console",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "value": [
          {
            "location": 294,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setStoredValue": [
          {
            "location": 295,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 305,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "JSON.stringify": [
          {
            "location": 296,
            "context": "JSON",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "response": [
          {
            "property": "success",
            "location": 44,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 44,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 46,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 50,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 52,
            "isComputed": false
          },
          {
            "property": "success",
            "location": 114,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 116,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 120,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 121,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 123,
            "isComputed": false
          },
          {
            "property": "success",
            "location": 185,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 185,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 187,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 191,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 193,
            "isComputed": false
          }
        ],
        "error": [
          {
            "property": "message",
            "location": 61,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 133,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 202,
            "isComputed": false
          }
        ],
        "prev": [
          {
            "property": "items",
            "location": 215,
            "isComputed": false
          },
          {
            "property": "items",
            "location": 222,
            "isComputed": false
          },
          {
            "property": "items",
            "location": 229,
            "isComputed": false
          }
        ],
        "window": [
          {
            "property": "localStorage",
            "location": 284,
            "isComputed": false
          },
          {
            "property": "localStorage",
            "location": 296,
            "isComputed": false
          },
          {
            "property": "localStorage",
            "location": 304,
            "isComputed": false
          }
        ],
        "JSON": [
          {
            "property": "parse",
            "location": 285,
            "isComputed": false
          },
          {
            "property": "stringify",
            "location": 296,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "error",
            "location": 287,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 298,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 307,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "execute": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "operation",
            "onSuccess",
            "onError"
          ],
          "location": 108,
          "isDeclaration": true
        },
        "response": {
          "type": "unknown",
          "dependencies": [],
          "location": 183,
          "isDeclaration": true
        },
        "errorMessage": {
          "type": "unknown",
          "dependencies": [],
          "location": 202,
          "isDeclaration": true
        },
        "reset": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 233,
          "isDeclaration": true
        },
        "fetch": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "fetchFunction",
            "onSuccess",
            "onError"
          ],
          "location": 179,
          "isDeclaration": true
        },
        "addItem": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 212,
          "isDeclaration": true
        },
        "updateItem": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 219,
          "isDeclaration": true
        },
        "removeItem": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 226,
          "isDeclaration": true
        },
        "handler": {
          "type": "call-result",
          "dependencies": [
            "setTimeout",
            "delay"
          ],
          "location": 265,
          "isDeclaration": true
        },
        "item": {
          "type": "call-result",
          "dependencies": [
            "key"
          ],
          "location": 284,
          "isDeclaration": true
        },
        "setValue": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "key",
            "storedValue"
          ],
          "location": 292,
          "isDeclaration": true
        },
        "valueToStore": {
          "type": "unknown",
          "dependencies": [],
          "location": 294,
          "isDeclaration": true
        },
        "removeValue": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "key",
            "initialValue"
          ],
          "location": 302,
          "isDeclaration": true
        }
      },
      "hookUsage": [
        {
          "name": "useState",
          "location": 32,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useCallback",
          "location": 38,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 71,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useEffect",
          "location": 79,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useState",
          "location": 102,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useCallback",
          "location": 108,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 144,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useState",
          "location": 169,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useCallback",
          "location": 179,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 212,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 219,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 226,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 233,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useEffect",
          "location": 241,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useState",
          "location": 262,
          "arguments": [
            "variable"
          ],
          "argumentCount": 1
        },
        {
          "name": "useEffect",
          "location": 264,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useState",
          "location": 282,
          "arguments": [
            "function"
          ],
          "argumentCount": 1
        },
        {
          "name": "useCallback",
          "location": 292,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 302,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        }
      ],
      "eventHandlers": [],
      "stateManagement": {
        "useState_32": {
          "type": "useState",
          "location": 32,
          "initialValue": "object"
        },
        "useState_102": {
          "type": "useState",
          "location": 102,
          "initialValue": "object"
        },
        "useState_169": {
          "type": "useState",
          "location": 169,
          "initialValue": "object"
        },
        "useState_262": {
          "type": "useState",
          "location": 262,
          "initialValue": "variable"
        },
        "useState_282": {
          "type": "useState",
          "location": 282,
          "initialValue": "function"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "response.success && response.data",
          "location": 44,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "response.error || null",
          "location": 52,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "response.data || null",
          "location": 116,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "response.error || null",
          "location": 123,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "response.success && response.data",
          "location": 185,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "response.error || null",
          "location": 193,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "prev.items.map": [
          {
            "chain": [
              "prev",
              "items",
              "map"
            ],
            "location": 222,
            "argumentCount": 1
          }
        ],
        "prev.items.filter": [
          {
            "chain": [
              "prev",
              "items",
              "filter"
            ],
            "location": 229,
            "argumentCount": 1
          }
        ],
        "window.localStorage.getItem": [
          {
            "chain": [
              "window",
              "localStorage",
              "getItem"
            ],
            "location": 284,
            "argumentCount": 1
          }
        ],
        "JSON.parse": [
          {
            "chain": [
              "JSON",
              "parse"
            ],
            "location": 285,
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 287,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 298,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 307,
            "argumentCount": 2
          }
        ],
        "window.localStorage.setItem": [
          {
            "chain": [
              "window",
              "localStorage",
              "setItem"
            ],
            "location": 296,
            "argumentCount": 2
          }
        ],
        "JSON.stringify": [
          {
            "chain": [
              "JSON",
              "stringify"
            ],
            "location": 296,
            "argumentCount": 1
          }
        ],
        "window.localStorage.removeItem": [
          {
            "chain": [
              "window",
              "localStorage",
              "removeItem"
            ],
            "location": 304,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "timer",
          "method": "setTimeout",
          "location": 265
        }
      ],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/hooks/useApi.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/services/api.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/services/api.ts",
      "name": "api",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 1,
      "cyclomaticComplexity": 0,
      "dependencies": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx"
      ],
      "functionCalls": {
        "fetch": [
          {
            "location": 40,
            "context": "",
            "arguments": [
              "variable",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "response.json": [
          {
            "location": 46,
            "context": "response",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "console.error": [
          {
            "location": 49,
            "context": "console",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "JSON.stringify": [
          {
            "location": 67,
            "context": "JSON",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 77,
            "context": "JSON",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "apiClient.get": [
          {
            "location": 100,
            "context": "apiClient",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 107,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 151,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 163,
            "context": "apiClient",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 170,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "apiClient.post": [
          {
            "location": 122,
            "context": "apiClient",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 185,
            "context": "apiClient",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "apiClient.put": [
          {
            "location": 133,
            "context": "apiClient",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 201,
            "context": "apiClient",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "apiClient.delete": [
          {
            "location": 144,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 212,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "emailRegex.test": [
          {
            "location": 220,
            "context": "emailRegex",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "tasks.push": [
          {
            "location": 237,
            "context": "tasks",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "Math.random": [
          {
            "location": 241,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 242,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 243,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 244,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 246,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 246,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 247,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 268,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 269,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 270,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 271,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 271,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 273,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 275,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 276,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "Math.floor": [
          {
            "location": 242,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 246,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 247,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 268,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "location": 243,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 244,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 270,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 271,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "tags.slice": [
          {
            "location": 247,
            "context": "tags",
            "arguments": [
              "number",
              "unknown"
            ],
            "argumentCount": 2
          }
        ],
        "users.push": [
          {
            "location": 263,
            "context": "users",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "process": [
          {
            "property": "env",
            "location": 6,
            "isComputed": false
          }
        ],
        "options": [
          {
            "property": "headers",
            "location": 35,
            "isComputed": false
          }
        ],
        "response": [
          {
            "property": "ok",
            "location": 42,
            "isComputed": false
          },
          {
            "property": "status",
            "location": 43,
            "isComputed": false
          },
          {
            "property": "json",
            "location": 46,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "error",
            "location": 49,
            "isComputed": false
          }
        ],
        "JSON": [
          {
            "property": "stringify",
            "location": 67,
            "isComputed": false
          },
          {
            "property": "stringify",
            "location": 77,
            "isComputed": false
          }
        ],
        "apiClient": [
          {
            "property": "get",
            "location": 100,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 107,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 122,
            "isComputed": false
          },
          {
            "property": "put",
            "location": 133,
            "isComputed": false
          },
          {
            "property": "delete",
            "location": 144,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 151,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 163,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 170,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 185,
            "isComputed": false
          },
          {
            "property": "put",
            "location": 201,
            "isComputed": false
          },
          {
            "property": "delete",
            "location": 212,
            "isComputed": false
          }
        ],
        "task": [
          {
            "property": "title",
            "location": 115,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 115,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 118,
            "isComputed": false
          }
        ],
        "user": [
          {
            "property": "name",
            "location": 178,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 178,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 181,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 181,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 197,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 197,
            "isComputed": false
          }
        ],
        "emailRegex": [
          {
            "property": "test",
            "location": 220,
            "isComputed": false
          }
        ],
        "tasks": [
          {
            "property": "push",
            "location": 237,
            "isComputed": false
          }
        ],
        "Math": [
          {
            "property": "random",
            "location": 241,
            "isComputed": false
          },
          {
            "property": "floor",
            "location": 242,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 242,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 243,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 244,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 246,
            "isComputed": false
          },
          {
            "property": "floor",
            "location": 246,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 246,
            "isComputed": false
          },
          {
            "property": "floor",
            "location": 247,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 247,
            "isComputed": false
          },
          {
            "property": "floor",
            "location": 268,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 268,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 269,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 270,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 271,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 271,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 273,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 275,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 276,
            "isComputed": false
          }
        ],
        "priorities": [
          {
            "property": "computed",
            "location": 242,
            "isComputed": true
          },
          {
            "property": "length",
            "location": 242,
            "isComputed": false
          }
        ],
        "Date": [
          {
            "property": "now",
            "location": 243,
            "isComputed": false
          },
          {
            "property": "now",
            "location": 244,
            "isComputed": false
          },
          {
            "property": "now",
            "location": 270,
            "isComputed": false
          },
          {
            "property": "now",
            "location": 271,
            "isComputed": false
          }
        ],
        "tags": [
          {
            "property": "slice",
            "location": 247,
            "isComputed": false
          }
        ],
        "users": [
          {
            "property": "push",
            "location": 263,
            "isComputed": false
          }
        ],
        "names": [
          {
            "property": "computed",
            "location": 265,
            "isComputed": true
          }
        ],
        "roles": [
          {
            "property": "computed",
            "location": 268,
            "isComputed": true
          },
          {
            "property": "length",
            "location": 268,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "API_BASE_URL": {
          "type": "unknown",
          "dependencies": [],
          "location": 6,
          "isDeclaration": true
        },
        "url": {
          "type": "unknown",
          "dependencies": [],
          "location": 30,
          "isDeclaration": true
        },
        "config": {
          "type": "object",
          "dependencies": [],
          "location": 31,
          "isDeclaration": true
        },
        "response": {
          "type": "unknown",
          "dependencies": [],
          "location": 40,
          "isDeclaration": true
        },
        "data": {
          "type": "unknown",
          "dependencies": [],
          "location": 46,
          "isDeclaration": true
        },
        "apiClient": {
          "type": "unknown",
          "dependencies": [],
          "location": 90,
          "isDeclaration": true
        },
        "taskService": {
          "type": "object",
          "dependencies": [],
          "location": 95,
          "isDeclaration": true
        },
        "userService": {
          "type": "object",
          "dependencies": [],
          "location": 158,
          "isDeclaration": true
        },
        "emailRegex": {
          "type": "unknown",
          "dependencies": [],
          "location": 219,
          "isDeclaration": true
        },
        "mockDataService": {
          "type": "object",
          "dependencies": [],
          "location": 227,
          "isDeclaration": true
        },
        "tasks": {
          "type": "array",
          "dependencies": [],
          "location": 232,
          "isDeclaration": true
        },
        "priorities": {
          "type": "array",
          "dependencies": [],
          "location": 233,
          "isDeclaration": true
        },
        "tags": {
          "type": "array",
          "dependencies": [],
          "location": 234,
          "isDeclaration": true
        },
        "i": {
          "type": "number",
          "dependencies": [],
          "location": 262,
          "isDeclaration": true
        },
        "users": {
          "type": "array",
          "dependencies": [],
          "location": 258,
          "isDeclaration": true
        },
        "roles": {
          "type": "array",
          "dependencies": [],
          "location": 259,
          "isDeclaration": true
        },
        "names": {
          "type": "array",
          "dependencies": [],
          "location": 260,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [
        {
          "name": "constructor",
          "location": 16,
          "isAsync": false
        }
      ],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 6,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null === null",
          "location": 115,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null === null",
          "location": 178,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 181,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "user.email && null",
          "location": 197,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 265,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "response.json": [
          {
            "chain": [
              "response",
              "json"
            ],
            "location": 46,
            "argumentCount": 0
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 49,
            "argumentCount": 2
          }
        ],
        "JSON.stringify": [
          {
            "chain": [
              "JSON",
              "stringify"
            ],
            "location": 67,
            "argumentCount": 1
          },
          {
            "chain": [
              "JSON",
              "stringify"
            ],
            "location": 77,
            "argumentCount": 1
          }
        ],
        "apiClient.get": [
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 100,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 107,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 151,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 163,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 170,
            "argumentCount": 1
          }
        ],
        "task.title.trim": [
          {
            "chain": [
              "task",
              "title",
              "trim"
            ],
            "location": 115,
            "argumentCount": 0
          }
        ],
        "apiClient.post": [
          {
            "chain": [
              "apiClient",
              "post"
            ],
            "location": 122,
            "argumentCount": 2
          },
          {
            "chain": [
              "apiClient",
              "post"
            ],
            "location": 185,
            "argumentCount": 2
          }
        ],
        "apiClient.put": [
          {
            "chain": [
              "apiClient",
              "put"
            ],
            "location": 133,
            "argumentCount": 2
          },
          {
            "chain": [
              "apiClient",
              "put"
            ],
            "location": 201,
            "argumentCount": 2
          }
        ],
        "apiClient.delete": [
          {
            "chain": [
              "apiClient",
              "delete"
            ],
            "location": 144,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "delete"
            ],
            "location": 212,
            "argumentCount": 1
          }
        ],
        "user.name.trim": [
          {
            "chain": [
              "user",
              "name",
              "trim"
            ],
            "location": 178,
            "argumentCount": 0
          }
        ],
        "emailRegex.test": [
          {
            "chain": [
              "emailRegex",
              "test"
            ],
            "location": 220,
            "argumentCount": 1
          }
        ],
        "tasks.push": [
          {
            "chain": [
              "tasks",
              "push"
            ],
            "location": 237,
            "argumentCount": 1
          }
        ],
        "Math.random": [
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 241,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 242,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 243,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 244,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 246,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 246,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 247,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 268,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 269,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 270,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 271,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 271,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 273,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 275,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 276,
            "argumentCount": 0
          }
        ],
        "Math.floor": [
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 242,
            "argumentCount": 1
          },
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 246,
            "argumentCount": 1
          },
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 247,
            "argumentCount": 1
          },
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 268,
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 243,
            "argumentCount": 0
          },
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 244,
            "argumentCount": 0
          },
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 270,
            "argumentCount": 0
          },
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 271,
            "argumentCount": 0
          }
        ],
        "tags.slice": [
          {
            "chain": [
              "tags",
              "slice"
            ],
            "location": 247,
            "argumentCount": 2
          }
        ],
        "users.push": [
          {
            "chain": [
              "users",
              "push"
            ],
            "location": 263,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/services/api.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/main.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/main.ts",
      "name": "main",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "createApp": [
          {
            "location": 125,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "createApp_definition": {
          "internalCalls": [
            "console.log"
          ],
          "referencedVariables": [
            "VueApp",
            "Record",
            "console",
            "selector",
            "plugin",
            "globalProperties",
            "name"
          ],
          "parameters": [
            "component"
          ]
        },
        "console.log": [
          {
            "location": 49,
            "context": "console",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 53,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 62,
            "context": "console",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 72,
            "context": "console",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 158,
            "context": "console",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 196,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 199,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "createRouter": [
          {
            "location": 100,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "createRouter_definition": {
          "internalCalls": [
            "console.log"
          ],
          "referencedVariables": [
            "Router",
            "console",
            "path"
          ],
          "parameters": [
            "options"
          ]
        },
        "createPinia": [
          {
            "location": 122,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "createPinia_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "Store"
          ],
          "parameters": []
        },
        "app.use": [
          {
            "location": 128,
            "context": "app",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 129,
            "context": "app",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "console.log"
          ],
          "referencedVariables": [
            "console",
            "registrationError"
          ],
          "parameters": [
            "registrationError"
          ]
        },
        "console.error": [
          {
            "location": 133,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 134,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "window.gtag": [
          {
            "location": 138,
            "context": "window",
            "arguments": [
              "string",
              "string",
              "object"
            ],
            "argumentCount": 3
          }
        ],
        "console.warn": [
          {
            "location": 147,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 148,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "app.directive": [
          {
            "location": 163,
            "context": "app",
            "arguments": [
              "string",
              "object"
            ],
            "argumentCount": 2
          }
        ],
        "el.focus": [
          {
            "location": 165,
            "context": "el",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "app.mount": [
          {
            "location": 170,
            "context": "app",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "window.removeInitialLoading": [
          {
            "location": 174,
            "context": "window",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "window.addEventListener": [
          {
            "location": 193,
            "context": "window",
            "arguments": [
              "string",
              "function"
            ],
            "argumentCount": 2
          }
        ],
        "performance.mark": [
          {
            "location": 206,
            "context": "performance",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "console": [
          {
            "property": "log",
            "location": 49,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 53,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 62,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 72,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 133,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 134,
            "isComputed": false
          },
          {
            "property": "warn",
            "location": 147,
            "isComputed": false
          },
          {
            "property": "warn",
            "location": 148,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 158,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 196,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 199,
            "isComputed": false
          }
        ],
        "app": [
          {
            "property": "use",
            "location": 128,
            "isComputed": false
          },
          {
            "property": "use",
            "location": 129,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 132,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 146,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 152,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 155,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 156,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 157,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 160,
            "isComputed": false
          },
          {
            "property": "directive",
            "location": 163,
            "isComputed": false
          },
          {
            "property": "mount",
            "location": 170,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 185,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 188,
            "isComputed": false
          }
        ],
        "window": [
          {
            "property": "gtag",
            "location": 137,
            "isComputed": false
          },
          {
            "property": "gtag",
            "location": 138,
            "isComputed": false
          },
          {
            "property": "removeInitialLoading",
            "location": 173,
            "isComputed": false
          },
          {
            "property": "removeInitialLoading",
            "location": 174,
            "isComputed": false
          },
          {
            "property": "addEventListener",
            "location": 193,
            "isComputed": false
          }
        ],
        "err": [
          {
            "property": "message",
            "location": 139,
            "isComputed": false
          }
        ],
        "process": [
          {
            "property": "env",
            "location": 160,
            "isComputed": false
          },
          {
            "property": "env",
            "location": 178,
            "isComputed": false
          },
          {
            "property": "env",
            "location": 192,
            "isComputed": false
          }
        ],
        "el": [
          {
            "property": "focus",
            "location": 165,
            "isComputed": false
          }
        ],
        "navigator": [
          {
            "property": "serviceWorker",
            "location": 194,
            "isComputed": false
          }
        ],
        "performance": [
          {
            "property": "mark",
            "location": 206,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "globalProperties": {
          "type": "object",
          "dependencies": [],
          "location": 45,
          "isDeclaration": true
        },
        "App": {
          "type": "object",
          "dependencies": [],
          "location": 89,
          "isDeclaration": true
        },
        "router": {
          "type": "call-result",
          "dependencies": [
            "createRouter"
          ],
          "location": 100,
          "isDeclaration": true
        },
        "pinia": {
          "type": "call-result",
          "dependencies": [
            "createPinia"
          ],
          "location": 122,
          "isDeclaration": true
        },
        "app": {
          "type": "call-result",
          "dependencies": [
            "createApp",
            "App"
          ],
          "location": 125,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null !== null && window.gtag",
          "location": 137,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null !== null && window.removeInitialLoading",
          "location": 173,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null !== null && null",
          "location": 180,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null !== null && null in navigator && null === null",
          "location": 192,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null !== null && null in navigator",
          "location": 192,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "console.log": [
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 49,
            "argumentCount": 1
          },
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 53,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 62,
            "argumentCount": 1
          },
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 72,
            "argumentCount": 1
          },
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 158,
            "argumentCount": 1
          },
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 196,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 199,
            "argumentCount": 2
          }
        ],
        "app.use": [
          {
            "chain": [
              "app",
              "use"
            ],
            "location": 128,
            "argumentCount": 1
          },
          {
            "chain": [
              "app",
              "use"
            ],
            "location": 129,
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 133,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 134,
            "argumentCount": 2
          }
        ],
        "window.gtag": [
          {
            "chain": [
              "window",
              "gtag"
            ],
            "location": 138,
            "argumentCount": 3
          }
        ],
        "console.warn": [
          {
            "chain": [
              "console",
              "warn"
            ],
            "location": 147,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "warn"
            ],
            "location": 148,
            "argumentCount": 2
          }
        ],
        "app.directive": [
          {
            "chain": [
              "app",
              "directive"
            ],
            "location": 163,
            "argumentCount": 2
          }
        ],
        "el.focus": [
          {
            "chain": [
              "el",
              "focus"
            ],
            "location": 165,
            "argumentCount": 0
          }
        ],
        "app.mount": [
          {
            "chain": [
              "app",
              "mount"
            ],
            "location": 170,
            "argumentCount": 1
          }
        ],
        "window.removeInitialLoading": [
          {
            "chain": [
              "window",
              "removeInitialLoading"
            ],
            "location": 174,
            "argumentCount": 0
          }
        ],
        "hot.accept": [
          {
            "chain": [
              "hot",
              "accept"
            ],
            "location": 181,
            "argumentCount": 0
          }
        ],
        "window.addEventListener": [
          {
            "chain": [
              "window",
              "addEventListener"
            ],
            "location": 193,
            "argumentCount": 2
          }
        ],
        "navigator.serviceWorker.register": [
          {
            "chain": [
              "navigator",
              "serviceWorker",
              "register"
            ],
            "location": 194,
            "argumentCount": 1
          }
        ],
        "performance.mark": [
          {
            "chain": [
              "performance",
              "mark"
            ],
            "location": 206,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "promise",
          "method": "catch",
          "location": 194
        },
        {
          "type": "promise",
          "method": "then",
          "location": 194
        }
      ],
      "relativePath": "Dependency-Analyzer/examples/vue-demo/src/main.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/services/api.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/services/api.ts",
      "name": "api",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 1,
      "cyclomaticComplexity": 0,
      "dependencies": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/types/index.ts"
      ],
      "dependents": [],
      "functionCalls": {
        "axios.create": [
          {
            "location": 23,
            "context": "axios",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "localStorage.removeItem",
            "Promise.reject"
          ],
          "referencedVariables": [
            "AxiosError",
            "error",
            "localStorage",
            "window",
            "Promise"
          ],
          "parameters": [
            "error"
          ]
        },
        "localStorage.getItem": [
          {
            "location": 35,
            "context": "localStorage",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "Promise.reject": [
          {
            "location": 46,
            "context": "Promise",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 68,
            "context": "Promise",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "endTime.getTime": [
          {
            "location": 55,
            "context": "endTime",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "console.log": [
          {
            "location": 56,
            "context": "console",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "localStorage.removeItem": [
          {
            "location": 64,
            "context": "localStorage",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "location": 125,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "apiClient.get": [
          {
            "location": 160,
            "context": "apiClient",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 170,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 212,
            "context": "apiClient",
            "arguments": [
              "string",
              "object"
            ],
            "argumentCount": 2
          },
          {
            "location": 223,
            "context": "apiClient",
            "arguments": [
              "string",
              "object"
            ],
            "argumentCount": 2
          },
          {
            "location": 258,
            "context": "apiClient",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 268,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "apiClient.post": [
          {
            "location": 183,
            "context": "apiClient",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 281,
            "context": "apiClient",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "apiClient.put": [
          {
            "location": 194,
            "context": "apiClient",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 297,
            "context": "apiClient",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "apiClient.delete": [
          {
            "location": 205,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 308,
            "context": "apiClient",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "query.trim": [
          {
            "location": 219,
            "context": "query",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "emailRegex.test": [
          {
            "location": 339,
            "context": "emailRegex",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "tasks.push": [
          {
            "location": 356,
            "context": "tasks",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "Math.random": [
          {
            "location": 360,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 361,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 362,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 363,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 365,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 365,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 366,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 387,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 388,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 389,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 390,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 390,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 392,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 394,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 395,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "Math.floor": [
          {
            "location": 361,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 365,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 366,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 387,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "location": 362,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 363,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 389,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 390,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "tags.slice": [
          {
            "location": 366,
            "context": "tags",
            "arguments": [
              "number",
              "unknown"
            ],
            "argumentCount": 2
          }
        ],
        "users.push": [
          {
            "location": 382,
            "context": "users",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "process": [
          {
            "property": "env",
            "location": 8,
            "isComputed": false
          }
        ],
        "axios": [
          {
            "property": "create",
            "location": 23,
            "isComputed": false
          }
        ],
        "localStorage": [
          {
            "property": "getItem",
            "location": 35,
            "isComputed": false
          },
          {
            "property": "removeItem",
            "location": 64,
            "isComputed": false
          }
        ],
        "config": [
          {
            "property": "headers",
            "location": 37,
            "isComputed": false
          },
          {
            "property": "metadata",
            "location": 41,
            "isComputed": false
          }
        ],
        "Promise": [
          {
            "property": "reject",
            "location": 46,
            "isComputed": false
          },
          {
            "property": "reject",
            "location": 68,
            "isComputed": false
          }
        ],
        "endTime": [
          {
            "property": "getTime",
            "location": 55,
            "isComputed": false
          }
        ],
        "response": [
          {
            "property": "config",
            "location": 55,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 56,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 79,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 91,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 103,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 115,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "log",
            "location": 56,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 125,
            "isComputed": false
          }
        ],
        "error": [
          {
            "property": "response",
            "location": 62,
            "isComputed": false
          },
          {
            "property": "response",
            "location": 127,
            "isComputed": false
          },
          {
            "property": "response",
            "location": 131,
            "isComputed": false
          },
          {
            "property": "response",
            "location": 131,
            "isComputed": false
          },
          {
            "property": "request",
            "location": 133,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 143,
            "isComputed": false
          }
        ],
        "window": [
          {
            "property": "location",
            "location": 65,
            "isComputed": false
          }
        ],
        "apiClient": [
          {
            "property": "get",
            "location": 160,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 170,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 183,
            "isComputed": false
          },
          {
            "property": "put",
            "location": 194,
            "isComputed": false
          },
          {
            "property": "delete",
            "location": 205,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 212,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 223,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 258,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 268,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 281,
            "isComputed": false
          },
          {
            "property": "put",
            "location": 297,
            "isComputed": false
          },
          {
            "property": "delete",
            "location": 308,
            "isComputed": false
          }
        ],
        "validation": [
          {
            "property": "isValid",
            "location": 179,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 180,
            "isComputed": false
          },
          {
            "property": "isValid",
            "location": 277,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 278,
            "isComputed": false
          }
        ],
        "query": [
          {
            "property": "trim",
            "location": 219,
            "isComputed": false
          }
        ],
        "task": [
          {
            "property": "title",
            "location": 230,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 230,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 234,
            "isComputed": false
          },
          {
            "property": "description",
            "location": 238,
            "isComputed": false
          },
          {
            "property": "description",
            "location": 238,
            "isComputed": false
          },
          {
            "property": "priority",
            "location": 242,
            "isComputed": false
          }
        ],
        "user": [
          {
            "property": "email",
            "location": 293,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 293,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 315,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 315,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 319,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 323,
            "isComputed": false
          },
          {
            "property": "email",
            "location": 323,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 327,
            "isComputed": false
          },
          {
            "property": "role",
            "location": 327,
            "isComputed": false
          }
        ],
        "emailRegex": [
          {
            "property": "test",
            "location": 339,
            "isComputed": false
          }
        ],
        "tasks": [
          {
            "property": "push",
            "location": 356,
            "isComputed": false
          }
        ],
        "Math": [
          {
            "property": "random",
            "location": 360,
            "isComputed": false
          },
          {
            "property": "floor",
            "location": 361,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 361,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 362,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 363,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 365,
            "isComputed": false
          },
          {
            "property": "floor",
            "location": 365,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 365,
            "isComputed": false
          },
          {
            "property": "floor",
            "location": 366,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 366,
            "isComputed": false
          },
          {
            "property": "floor",
            "location": 387,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 387,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 388,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 389,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 390,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 390,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 392,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 394,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 395,
            "isComputed": false
          }
        ],
        "priorities": [
          {
            "property": "computed",
            "location": 361,
            "isComputed": true
          },
          {
            "property": "length",
            "location": 361,
            "isComputed": false
          }
        ],
        "Date": [
          {
            "property": "now",
            "location": 362,
            "isComputed": false
          },
          {
            "property": "now",
            "location": 363,
            "isComputed": false
          },
          {
            "property": "now",
            "location": 389,
            "isComputed": false
          },
          {
            "property": "now",
            "location": 390,
            "isComputed": false
          }
        ],
        "tags": [
          {
            "property": "slice",
            "location": 366,
            "isComputed": false
          }
        ],
        "users": [
          {
            "property": "push",
            "location": 382,
            "isComputed": false
          }
        ],
        "names": [
          {
            "property": "computed",
            "location": 384,
            "isComputed": true
          }
        ],
        "roles": [
          {
            "property": "computed",
            "location": 387,
            "isComputed": true
          },
          {
            "property": "length",
            "location": 387,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "API_CONFIG": {
          "type": "object",
          "dependencies": [],
          "location": 7,
          "isDeclaration": true
        },
        "token": {
          "type": "call-result",
          "dependencies": [],
          "location": 35,
          "isDeclaration": true
        },
        "endTime": {
          "type": "unknown",
          "dependencies": [],
          "location": 54,
          "isDeclaration": true
        },
        "duration": {
          "type": "unknown",
          "dependencies": [],
          "location": 55,
          "isDeclaration": true
        },
        "response": {
          "type": "unknown",
          "dependencies": [],
          "location": 114,
          "isDeclaration": true
        },
        "apiClient": {
          "type": "unknown",
          "dependencies": [],
          "location": 150,
          "isDeclaration": true
        },
        "taskApi": {
          "type": "object",
          "dependencies": [],
          "location": 155,
          "isDeclaration": true
        },
        "validation": {
          "type": "call-result",
          "dependencies": [
            "user"
          ],
          "location": 276,
          "isDeclaration": true
        },
        "userApi": {
          "type": "object",
          "dependencies": [],
          "location": 253,
          "isDeclaration": true
        },
        "emailRegex": {
          "type": "unknown",
          "dependencies": [],
          "location": 338,
          "isDeclaration": true
        },
        "mockDataApi": {
          "type": "object",
          "dependencies": [],
          "location": 346,
          "isDeclaration": true
        },
        "tasks": {
          "type": "array",
          "dependencies": [],
          "location": 351,
          "isDeclaration": true
        },
        "priorities": {
          "type": "array",
          "dependencies": [],
          "location": 352,
          "isDeclaration": true
        },
        "tags": {
          "type": "array",
          "dependencies": [],
          "location": 353,
          "isDeclaration": true
        },
        "i": {
          "type": "number",
          "dependencies": [],
          "location": 381,
          "isDeclaration": true
        },
        "users": {
          "type": "array",
          "dependencies": [],
          "location": 377,
          "isDeclaration": true
        },
        "roles": {
          "type": "array",
          "dependencies": [],
          "location": 378,
          "isDeclaration": true
        },
        "names": {
          "type": "array",
          "dependencies": [],
          "location": 379,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [
        {
          "name": "constructor",
          "location": 22,
          "isAsync": false
        }
      ],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 8,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 131,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "error.message || null",
          "location": 143,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null === null",
          "location": 230,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "task.description && null > null",
          "location": 238,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "user.email && null",
          "location": 293,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null === null",
          "location": 315,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 323,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "user.role && null",
          "location": 327,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 384,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "axios.create": [
          {
            "chain": [
              "axios",
              "create"
            ],
            "location": 23,
            "argumentCount": 1
          }
        ],
        "client.interceptors.request.use": [
          {
            "chain": [
              "client",
              "interceptors",
              "request",
              "use"
            ],
            "location": 32,
            "argumentCount": 2
          }
        ],
        "localStorage.getItem": [
          {
            "chain": [
              "localStorage",
              "getItem"
            ],
            "location": 35,
            "argumentCount": 1
          }
        ],
        "Promise.reject": [
          {
            "chain": [
              "Promise",
              "reject"
            ],
            "location": 46,
            "argumentCount": 1
          },
          {
            "chain": [
              "Promise",
              "reject"
            ],
            "location": 68,
            "argumentCount": 1
          }
        ],
        "client.interceptors.response.use": [
          {
            "chain": [
              "client",
              "interceptors",
              "response",
              "use"
            ],
            "location": 51,
            "argumentCount": 2
          }
        ],
        "endTime.getTime": [
          {
            "chain": [
              "endTime",
              "getTime"
            ],
            "location": 55,
            "argumentCount": 0
          }
        ],
        "console.log": [
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 56,
            "argumentCount": 1
          }
        ],
        "localStorage.removeItem": [
          {
            "chain": [
              "localStorage",
              "removeItem"
            ],
            "location": 64,
            "argumentCount": 1
          }
        ],
        "client.get": [
          {
            "chain": [
              "client",
              "get"
            ],
            "location": 78,
            "argumentCount": 2
          }
        ],
        "client.post": [
          {
            "chain": [
              "client",
              "post"
            ],
            "location": 90,
            "argumentCount": 2
          }
        ],
        "client.put": [
          {
            "chain": [
              "client",
              "put"
            ],
            "location": 102,
            "argumentCount": 2
          }
        ],
        "client.delete": [
          {
            "chain": [
              "client",
              "delete"
            ],
            "location": 114,
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 125,
            "argumentCount": 2
          }
        ],
        "apiClient.get": [
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 160,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 170,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 212,
            "argumentCount": 2
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 223,
            "argumentCount": 2
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 258,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "get"
            ],
            "location": 268,
            "argumentCount": 1
          }
        ],
        "apiClient.post": [
          {
            "chain": [
              "apiClient",
              "post"
            ],
            "location": 183,
            "argumentCount": 2
          },
          {
            "chain": [
              "apiClient",
              "post"
            ],
            "location": 281,
            "argumentCount": 2
          }
        ],
        "apiClient.put": [
          {
            "chain": [
              "apiClient",
              "put"
            ],
            "location": 194,
            "argumentCount": 2
          },
          {
            "chain": [
              "apiClient",
              "put"
            ],
            "location": 297,
            "argumentCount": 2
          }
        ],
        "apiClient.delete": [
          {
            "chain": [
              "apiClient",
              "delete"
            ],
            "location": 205,
            "argumentCount": 1
          },
          {
            "chain": [
              "apiClient",
              "delete"
            ],
            "location": 308,
            "argumentCount": 1
          }
        ],
        "query.trim": [
          {
            "chain": [
              "query",
              "trim"
            ],
            "location": 219,
            "argumentCount": 0
          }
        ],
        "task.title.trim": [
          {
            "chain": [
              "task",
              "title",
              "trim"
            ],
            "location": 230,
            "argumentCount": 0
          }
        ],
        "user.name.trim": [
          {
            "chain": [
              "user",
              "name",
              "trim"
            ],
            "location": 315,
            "argumentCount": 0
          }
        ],
        "emailRegex.test": [
          {
            "chain": [
              "emailRegex",
              "test"
            ],
            "location": 339,
            "argumentCount": 1
          }
        ],
        "tasks.push": [
          {
            "chain": [
              "tasks",
              "push"
            ],
            "location": 356,
            "argumentCount": 1
          }
        ],
        "Math.random": [
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 360,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 361,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 362,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 363,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 365,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 365,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 366,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 387,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 388,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 389,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 390,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 390,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 392,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 394,
            "argumentCount": 0
          },
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 395,
            "argumentCount": 0
          }
        ],
        "Math.floor": [
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 361,
            "argumentCount": 1
          },
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 365,
            "argumentCount": 1
          },
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 366,
            "argumentCount": 1
          },
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 387,
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 362,
            "argumentCount": 0
          },
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 363,
            "argumentCount": 0
          },
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 389,
            "argumentCount": 0
          },
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 390,
            "argumentCount": 0
          }
        ],
        "tags.slice": [
          {
            "chain": [
              "tags",
              "slice"
            ],
            "location": 366,
            "argumentCount": 2
          }
        ],
        "users.push": [
          {
            "chain": [
              "users",
              "push"
            ],
            "location": 382,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "promise",
          "method": "reject",
          "location": 46
        },
        {
          "type": "promise",
          "method": "reject",
          "location": 68
        }
      ],
      "relativePath": "Dependency-Analyzer/examples/vue-demo/src/services/api.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/test-upload.js": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/test-upload.js",
      "name": "test-upload",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 1,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "setCount"
          ],
          "referencedVariables": [
            "setCount",
            "count"
          ],
          "parameters": []
        },
        "useState": [
          {
            "location": 6,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "setCount": [
          {
            "location": 12,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {},
      "dataFlow": {
        "TestComponent": {
          "type": "function",
          "dependencies": [],
          "location": 5,
          "isDeclaration": true
        }
      },
      "hookUsage": [
        {
          "name": "useState",
          "location": 6,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        }
      ],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 12,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {
        "useState_6": {
          "type": "useState",
          "location": 6,
          "initialValue": "number"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/test-upload.js"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/eslint.config.js": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/eslint.config.js",
      "name": "eslint.config",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "tseslint.config": [
          {
            "location": 8,
            "context": "tseslint",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ],
        "globalIgnores": [
          {
            "location": 9,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "tseslint": [
          {
            "property": "config",
            "location": 8,
            "isComputed": false
          },
          {
            "property": "configs",
            "location": 14,
            "isComputed": false
          }
        ],
        "js": [
          {
            "property": "configs",
            "location": 13,
            "isComputed": false
          }
        ],
        "reactHooks": [
          {
            "property": "configs",
            "location": 15,
            "isComputed": false
          }
        ],
        "reactRefresh": [
          {
            "property": "configs",
            "location": 16,
            "isComputed": false
          }
        ],
        "globals": [
          {
            "property": "browser",
            "location": 20,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "tseslint.config": [
          {
            "chain": [
              "tseslint",
              "config"
            ],
            "location": 8,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/eslint.config.js"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "name": "App",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 11,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Toolbar.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImageCanvas.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/FileUpload.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/StatusBar.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/HelpPanel.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/QuickActions.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.css"
      ],
      "dependents": [],
      "functionCalls": {
        "App": [],
        "App_definition": {
          "internalCalls": [
            "useState",
            "useCallback",
            "setImageData",
            "setMetadata",
            "setSessionId",
            "setShowUpload",
            "setPoints",
            "setMaskData",
            "message.success",
            "message.error",
            "message.info",
            "message.warning",
            "setLoading",
            "performSegmentation",
            "console.error",
            "document.createElement",
            "Date.now",
            "link.click",
            "window.print",
            "setIsFullscreen",
            "document.exitFullscreen",
            "useEffect",
            "event.preventDefault",
            "handleSaveMask",
            "handleSegment",
            "setCurrentTool",
            "handleClearPoints",
            "window.addEventListener",
            "window.removeEventListener",
            "setShowHelp"
          ],
          "referencedVariables": [
            "useState",
            "ToolType",
            "Tools",
            "Point",
            "DICOMMetadata",
            "useCallback",
            "setImageData",
            "imageDataUrl",
            "setMetadata",
            "dicomMetadata",
            "setSessionId",
            "uploadResponse",
            "setShowUpload",
            "setPoints",
            "setMaskData",
            "message",
            "data",
            "error",
            "prev",
            "point",
            "sessionId",
            "points",
            "setLoading",
            "performSegmentation",
            "currentTool",
            "response",
            "console",
            "maskData",
            "document",
            "link",
            "Date",
            "window",
            "setIsFullscreen",
            "useEffect",
            "KeyboardEvent",
            "event",
            "handleSaveMask",
            "handleSegment",
            "setCurrentTool",
            "handleClearPoints",
            "handleKeyPress",
            "setShowHelp",
            "showHelp",
            "loading",
            "imageData",
            "handlePointAdd",
            "isFullscreen",
            "handleFullscreenToggle",
            "handleRotateLeft",
            "handleRotateRight",
            "handleZoomIn",
            "handleZoomOut",
            "handleUndo",
            "handleRedo",
            "handleResetView",
            "handleFitToWindow",
            "handleActualSize",
            "canUndo",
            "canRedo",
            "metadata",
            "handleExportReport",
            "handlePrint",
            "handleShare",
            "showSidebar",
            "setShowSidebar",
            "showUpload",
            "handleDICOMUploadSuccess",
            "handleDICOMUploadError"
          ],
          "parameters": []
        },
        "useState": [
          {
            "location": 29,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 30,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          },
          {
            "location": 31,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 32,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 33,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 34,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 35,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 36,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 37,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 38,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 39,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 40,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 41,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "useCallback": [
          {
            "location": 44,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 55,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 71,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 76,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 81,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 87,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 93,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 122,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 140,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 145,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 150,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "setShowUpload"
          ],
          "referencedVariables": [
            "setShowUpload"
          ],
          "parameters": []
        },
        "setImageData": [
          {
            "location": 45,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 61,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setMetadata": [
          {
            "location": 46,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 62,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setSessionId": [
          {
            "location": 47,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 63,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setShowUpload": [
          {
            "location": 48,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 64,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 204,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 252,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 310,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 340,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "setPoints": [
          {
            "location": 49,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          },
          {
            "location": 65,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          },
          {
            "location": 77,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 82,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ],
        "setMaskData": [
          {
            "location": 50,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 66,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 83,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 108,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "message.success": [
          {
            "location": 51,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 67,
            "context": "message",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 109,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 136,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "message.error": [
          {
            "location": 72,
            "context": "message",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 111,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 115,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "message.info": [
          {
            "location": 89,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 141,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 151,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 166,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 170,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 174,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 178,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 182,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 186,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 190,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 194,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "message.warning": [
          {
            "location": 95,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 124,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "setLoading": [
          {
            "location": 99,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 117,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "performSegmentation": [
          {
            "location": 101,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "location": 114,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "document.createElement": [
          {
            "location": 129,
            "context": "document",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "location": 131,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "link.click": [
          {
            "location": 133,
            "context": "link",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "window.print": [
          {
            "location": 146,
            "context": "window",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "setIsFullscreen": [
          {
            "location": 158,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 161,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "document.exitFullscreen": [
          {
            "location": 160,
            "context": "document",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "useEffect": [
          {
            "location": 198,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "event.preventDefault": [
          {
            "location": 203,
            "context": "event",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 207,
            "context": "event",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 211,
            "context": "event",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "handleSaveMask": [
          {
            "location": 208,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "handleSegment": [
          {
            "location": 212,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "setCurrentTool": [
          {
            "location": 220,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 223,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 226,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "handleClearPoints": [
          {
            "location": 229,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "window.addEventListener": [
          {
            "location": 237,
            "context": "window",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "window.removeEventListener": [
          {
            "location": 238,
            "context": "window",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "setShowHelp": [
          {
            "location": 253,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "Tools": [
          {
            "property": "POSITIVE_POINT",
            "location": 29,
            "isComputed": false
          },
          {
            "property": "POSITIVE_POINT",
            "location": 220,
            "isComputed": false
          },
          {
            "property": "NEGATIVE_POINT",
            "location": 223,
            "isComputed": false
          },
          {
            "property": "PAN",
            "location": 226,
            "isComputed": false
          }
        ],
        "uploadResponse": [
          {
            "property": "session_id",
            "location": 47,
            "isComputed": false
          }
        ],
        "message": [
          {
            "property": "success",
            "location": 51,
            "isComputed": false
          },
          {
            "property": "success",
            "location": 67,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 72,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 89,
            "isComputed": false
          },
          {
            "property": "warning",
            "location": 95,
            "isComputed": false
          },
          {
            "property": "success",
            "location": 109,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 111,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 115,
            "isComputed": false
          },
          {
            "property": "warning",
            "location": 124,
            "isComputed": false
          },
          {
            "property": "success",
            "location": 136,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 141,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 151,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 166,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 170,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 174,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 178,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 182,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 186,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 190,
            "isComputed": false
          },
          {
            "property": "info",
            "location": 194,
            "isComputed": false
          }
        ],
        "data": [
          {
            "property": "imageData",
            "location": 61,
            "isComputed": false
          },
          {
            "property": "metadata",
            "location": 62,
            "isComputed": false
          },
          {
            "property": "sessionId",
            "location": 63,
            "isComputed": false
          },
          {
            "property": "filename",
            "location": 67,
            "isComputed": false
          }
        ],
        "points": [
          {
            "property": "length",
            "location": 94,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 255,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 356,
            "isComputed": false
          }
        ],
        "response": [
          {
            "property": "mask_data",
            "location": 107,
            "isComputed": false
          },
          {
            "property": "mask_data",
            "location": 108,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "error",
            "location": 114,
            "isComputed": false
          }
        ],
        "document": [
          {
            "property": "createElement",
            "location": 129,
            "isComputed": false
          },
          {
            "property": "body",
            "location": 132,
            "isComputed": false
          },
          {
            "property": "body",
            "location": 134,
            "isComputed": false
          },
          {
            "property": "fullscreenElement",
            "location": 156,
            "isComputed": false
          },
          {
            "property": "documentElement",
            "location": 157,
            "isComputed": false
          },
          {
            "property": "exitFullscreen",
            "location": 160,
            "isComputed": false
          }
        ],
        "link": [
          {
            "property": "href",
            "location": 130,
            "isComputed": false
          },
          {
            "property": "download",
            "location": 131,
            "isComputed": false
          },
          {
            "property": "click",
            "location": 133,
            "isComputed": false
          }
        ],
        "Date": [
          {
            "property": "now",
            "location": 131,
            "isComputed": false
          }
        ],
        "window": [
          {
            "property": "print",
            "location": 146,
            "isComputed": false
          },
          {
            "property": "addEventListener",
            "location": 237,
            "isComputed": false
          },
          {
            "property": "removeEventListener",
            "location": 238,
            "isComputed": false
          }
        ],
        "event": [
          {
            "property": "ctrlKey",
            "location": 200,
            "isComputed": false
          },
          {
            "property": "metaKey",
            "location": 200,
            "isComputed": false
          },
          {
            "property": "key",
            "location": 201,
            "isComputed": false
          },
          {
            "property": "preventDefault",
            "location": 203,
            "isComputed": false
          },
          {
            "property": "preventDefault",
            "location": 207,
            "isComputed": false
          },
          {
            "property": "preventDefault",
            "location": 211,
            "isComputed": false
          },
          {
            "property": "key",
            "location": 218,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "handleFileUploaded": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 44,
          "isDeclaration": true
        },
        "handleDICOMUploadSuccess": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 55,
          "isDeclaration": true
        },
        "handleDICOMUploadError": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 71,
          "isDeclaration": true
        },
        "handlePointAdd": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 76,
          "isDeclaration": true
        },
        "handleClearPoints": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 81,
          "isDeclaration": true
        },
        "handleResetView": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 87,
          "isDeclaration": true
        },
        "handleSegment": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "sessionId",
            "points",
            "currentTool"
          ],
          "location": 93,
          "isDeclaration": true
        },
        "response": {
          "type": "unknown",
          "dependencies": [],
          "location": 101,
          "isDeclaration": true
        },
        "handleSaveMask": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "maskData"
          ],
          "location": 122,
          "isDeclaration": true
        },
        "link": {
          "type": "call-result",
          "dependencies": [],
          "location": 129,
          "isDeclaration": true
        },
        "handleExportReport": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 140,
          "isDeclaration": true
        },
        "handlePrint": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 145,
          "isDeclaration": true
        },
        "handleShare": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 150,
          "isDeclaration": true
        },
        "handleFullscreenToggle": {
          "type": "function",
          "dependencies": [],
          "location": 155,
          "isDeclaration": true
        },
        "handleRotateLeft": {
          "type": "function",
          "dependencies": [],
          "location": 165,
          "isDeclaration": true
        },
        "handleRotateRight": {
          "type": "function",
          "dependencies": [],
          "location": 169,
          "isDeclaration": true
        },
        "handleZoomIn": {
          "type": "function",
          "dependencies": [],
          "location": 173,
          "isDeclaration": true
        },
        "handleZoomOut": {
          "type": "function",
          "dependencies": [],
          "location": 177,
          "isDeclaration": true
        },
        "handleUndo": {
          "type": "function",
          "dependencies": [],
          "location": 181,
          "isDeclaration": true
        },
        "handleRedo": {
          "type": "function",
          "dependencies": [],
          "location": 185,
          "isDeclaration": true
        },
        "handleFitToWindow": {
          "type": "function",
          "dependencies": [],
          "location": 189,
          "isDeclaration": true
        },
        "handleActualSize": {
          "type": "function",
          "dependencies": [],
          "location": 193,
          "isDeclaration": true
        },
        "handleKeyPress": {
          "type": "function",
          "dependencies": [],
          "location": 199,
          "isDeclaration": true
        }
      },
      "hookUsage": [
        {
          "name": "useState",
          "location": 29,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 30,
          "arguments": [
            "array"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 31,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 32,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 33,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 34,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 35,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 36,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 37,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 38,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 39,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 40,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 41,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useCallback",
          "location": 44,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 55,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 71,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 76,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 81,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 87,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 93,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 122,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 140,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 145,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 150,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useEffect",
          "location": 198,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        }
      ],
      "eventHandlers": [
        {
          "eventType": "toolchange",
          "handlerType": "variable",
          "location": 245,
          "attributeName": "onToolChange"
        },
        {
          "eventType": "segment",
          "handlerType": "variable",
          "location": 245,
          "attributeName": "onSegment"
        },
        {
          "eventType": "clear",
          "handlerType": "variable",
          "location": 245,
          "attributeName": "onClear"
        },
        {
          "eventType": "save",
          "handlerType": "variable",
          "location": 245,
          "attributeName": "onSave"
        },
        {
          "eventType": "upload",
          "handlerType": "function",
          "location": 245,
          "attributeName": "onUpload"
        },
        {
          "eventType": "help",
          "handlerType": "function",
          "location": 245,
          "attributeName": "onHelp"
        },
        {
          "eventType": "pointadd",
          "handlerType": "variable",
          "location": 266,
          "attributeName": "onPointAdd"
        },
        {
          "eventType": "pointschange",
          "handlerType": "variable",
          "location": 266,
          "attributeName": "onPointsChange"
        },
        {
          "eventType": "fullscreentoggle",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onFullscreenToggle"
        },
        {
          "eventType": "rotateleft",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onRotateLeft"
        },
        {
          "eventType": "rotateright",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onRotateRight"
        },
        {
          "eventType": "zoomin",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onZoomIn"
        },
        {
          "eventType": "zoomout",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onZoomOut"
        },
        {
          "eventType": "undo",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onUndo"
        },
        {
          "eventType": "redo",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onRedo"
        },
        {
          "eventType": "reset",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onReset"
        },
        {
          "eventType": "fittowindow",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onFitToWindow"
        },
        {
          "eventType": "actualsize",
          "handlerType": "variable",
          "location": 279,
          "attributeName": "onActualSize"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 307,
          "attributeName": "onClick"
        },
        {
          "eventType": "pointschange",
          "handlerType": "variable",
          "location": 321,
          "attributeName": "onPointsChange"
        },
        {
          "eventType": "export",
          "handlerType": "variable",
          "location": 321,
          "attributeName": "onExport"
        },
        {
          "eventType": "print",
          "handlerType": "variable",
          "location": 321,
          "attributeName": "onPrint"
        },
        {
          "eventType": "share",
          "handlerType": "variable",
          "location": 321,
          "attributeName": "onShare"
        },
        {
          "eventType": "visibilitychange",
          "handlerType": "variable",
          "location": 321,
          "attributeName": "onVisibilityChange"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 337,
          "attributeName": "onClick"
        },
        {
          "eventType": "uploadsuccess",
          "handlerType": "variable",
          "location": 344,
          "attributeName": "onUploadSuccess"
        },
        {
          "eventType": "uploaderror",
          "handlerType": "variable",
          "location": 344,
          "attributeName": "onUploadError"
        }
      ],
      "stateManagement": {
        "useState_29": {
          "type": "useState",
          "location": 29,
          "initialValue": "unknown"
        },
        "useState_30": {
          "type": "useState",
          "location": 30,
          "initialValue": "array"
        },
        "useState_31": {
          "type": "useState",
          "location": 31,
          "initialValue": "unknown"
        },
        "useState_32": {
          "type": "useState",
          "location": 32,
          "initialValue": "unknown"
        },
        "useState_33": {
          "type": "useState",
          "location": 33,
          "initialValue": "unknown"
        },
        "useState_34": {
          "type": "useState",
          "location": 34,
          "initialValue": "unknown"
        },
        "useState_35": {
          "type": "useState",
          "location": 35,
          "initialValue": "boolean"
        },
        "useState_36": {
          "type": "useState",
          "location": 36,
          "initialValue": "boolean"
        },
        "useState_37": {
          "type": "useState",
          "location": 37,
          "initialValue": "boolean"
        },
        "useState_38": {
          "type": "useState",
          "location": 38,
          "initialValue": "boolean"
        },
        "useState_39": {
          "type": "useState",
          "location": 39,
          "initialValue": "boolean"
        },
        "useState_40": {
          "type": "useState",
          "location": 40,
          "initialValue": "boolean"
        },
        "useState_41": {
          "type": "useState",
          "location": 41,
          "initialValue": "boolean"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null || points.length === null",
          "location": 94,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "event.ctrlKey || event.metaKey",
          "location": 200,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "imageData && null",
          "location": 320,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "showUpload && null",
          "location": 334,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "message.success": [
          {
            "chain": [
              "message",
              "success"
            ],
            "location": 51,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "success"
            ],
            "location": 67,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "success"
            ],
            "location": 109,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "success"
            ],
            "location": 136,
            "argumentCount": 1
          }
        ],
        "message.error": [
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 72,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 111,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 115,
            "argumentCount": 1
          }
        ],
        "message.info": [
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 89,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 141,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 151,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 166,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 170,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 174,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 178,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 182,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 186,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 190,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "info"
            ],
            "location": 194,
            "argumentCount": 1
          }
        ],
        "message.warning": [
          {
            "chain": [
              "message",
              "warning"
            ],
            "location": 95,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "warning"
            ],
            "location": 124,
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 114,
            "argumentCount": 2
          }
        ],
        "document.createElement": [
          {
            "chain": [
              "document",
              "createElement"
            ],
            "location": 129,
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 131,
            "argumentCount": 0
          }
        ],
        "document.body.appendChild": [
          {
            "chain": [
              "document",
              "body",
              "appendChild"
            ],
            "location": 132,
            "argumentCount": 1
          }
        ],
        "link.click": [
          {
            "chain": [
              "link",
              "click"
            ],
            "location": 133,
            "argumentCount": 0
          }
        ],
        "document.body.removeChild": [
          {
            "chain": [
              "document",
              "body",
              "removeChild"
            ],
            "location": 134,
            "argumentCount": 1
          }
        ],
        "window.print": [
          {
            "chain": [
              "window",
              "print"
            ],
            "location": 146,
            "argumentCount": 0
          }
        ],
        "document.documentElement.requestFullscreen": [
          {
            "chain": [
              "document",
              "documentElement",
              "requestFullscreen"
            ],
            "location": 157,
            "argumentCount": 0
          }
        ],
        "document.exitFullscreen": [
          {
            "chain": [
              "document",
              "exitFullscreen"
            ],
            "location": 160,
            "argumentCount": 0
          }
        ],
        "event.preventDefault": [
          {
            "chain": [
              "event",
              "preventDefault"
            ],
            "location": 203,
            "argumentCount": 0
          },
          {
            "chain": [
              "event",
              "preventDefault"
            ],
            "location": 207,
            "argumentCount": 0
          },
          {
            "chain": [
              "event",
              "preventDefault"
            ],
            "location": 211,
            "argumentCount": 0
          }
        ],
        "window.addEventListener": [
          {
            "chain": [
              "window",
              "addEventListener"
            ],
            "location": 237,
            "argumentCount": 2
          }
        ],
        "window.removeEventListener": [
          {
            "chain": [
              "window",
              "removeEventListener"
            ],
            "location": 238,
            "argumentCount": 2
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/App.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx",
      "name": "DICOMUploader",
      "propsDeclared": [
        "onUploadSuccess",
        "onUploadError"
      ],
      "propsUsedInBody": [
        "onUploadSuccess",
        "onUploadError"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 2,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "console.log"
          ],
          "referencedVariables": [
            "console",
            "e"
          ],
          "parameters": [
            "e"
          ]
        },
        "useState": [
          {
            "location": 45,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 46,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 47,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setUploading": [
          {
            "location": 51,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 105,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "setUploadProgress": [
          {
            "location": 52,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 57,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 70,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 106,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "setInterval": [
          {
            "location": 56,
            "context": "",
            "arguments": [
              "function",
              "number"
            ],
            "argumentCount": 2
          }
        ],
        "clearInterval": [
          {
            "location": 59,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 69,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "uploadDICOM": [
          {
            "location": 67,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setUploadedFile": [
          {
            "location": 73,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 97,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "message.success": [
          {
            "location": 81,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "onUploadSuccess": [
          {
            "location": 84,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "location": 92,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "message.error": [
          {
            "location": 94,
            "context": "message",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 127,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 134,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "onUploadError": [
          {
            "location": 95,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "location": 98,
            "context": "Date",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "setTimeout": [
          {
            "location": 106,
            "context": "",
            "arguments": [
              "function",
              "number"
            ],
            "argumentCount": 2
          }
        ],
        "fileName.endsWith": [
          {
            "location": 119,
            "context": "fileName",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 120,
            "context": "fileName",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 121,
            "context": "fileName",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 122,
            "context": "fileName",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "fileName.includes": [
          {
            "location": 124,
            "context": "fileName",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 126,
            "context": "fileName",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "handleUpload": [
          {
            "location": 139,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "console.log": [
          {
            "location": 143,
            "context": "console",
            "arguments": [
              "string",
              "unknown"
            ],
            "argumentCount": 2
          }
        ]
      },
      "variableReferences": {
        "response": [
          {
            "property": "session_id",
            "location": 74,
            "isComputed": false
          },
          {
            "property": "session_id",
            "location": 85,
            "isComputed": false
          },
          {
            "property": "metadata",
            "location": 86,
            "isComputed": false
          },
          {
            "property": "image_data",
            "location": 87,
            "isComputed": false
          },
          {
            "property": "filename",
            "location": 88,
            "isComputed": false
          }
        ],
        "file": [
          {
            "property": "name",
            "location": 75,
            "isComputed": false
          },
          {
            "property": "size",
            "location": 77,
            "isComputed": false
          },
          {
            "property": "type",
            "location": 78,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 99,
            "isComputed": false
          },
          {
            "property": "size",
            "location": 101,
            "isComputed": false
          },
          {
            "property": "type",
            "location": 102,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 118,
            "isComputed": false
          },
          {
            "property": "size",
            "location": 132,
            "isComputed": false
          }
        ],
        "message": [
          {
            "property": "success",
            "location": 81,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 94,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 127,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 134,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "error",
            "location": 92,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 143,
            "isComputed": false
          }
        ],
        "error": [
          {
            "property": "response",
            "location": 93,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 93,
            "isComputed": false
          }
        ],
        "Date": [
          {
            "property": "now",
            "location": 98,
            "isComputed": false
          }
        ],
        "fileName": [
          {
            "property": "endsWith",
            "location": 119,
            "isComputed": false
          },
          {
            "property": "endsWith",
            "location": 120,
            "isComputed": false
          },
          {
            "property": "endsWith",
            "location": 121,
            "isComputed": false
          },
          {
            "property": "endsWith",
            "location": 122,
            "isComputed": false
          },
          {
            "property": "includes",
            "location": 124,
            "isComputed": false
          },
          {
            "property": "includes",
            "location": 126,
            "isComputed": false
          }
        ],
        "e": [
          {
            "property": "dataTransfer",
            "location": 143,
            "isComputed": false
          }
        ],
        "uploadedFile": [
          {
            "property": "status",
            "location": 200,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 212,
            "isComputed": false
          },
          {
            "property": "size",
            "location": 215,
            "isComputed": false
          },
          {
            "property": "status",
            "location": 225,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "DICOMUploader": {
          "type": "function",
          "dependencies": [],
          "location": 41,
          "isDeclaration": true
        },
        "handleUpload": {
          "type": "function",
          "dependencies": [],
          "location": 50,
          "isDeclaration": true
        },
        "progressInterval": {
          "type": "call-result",
          "dependencies": [
            "setInterval"
          ],
          "location": 56,
          "isDeclaration": true
        },
        "response": {
          "type": "unknown",
          "dependencies": [],
          "location": 67,
          "isDeclaration": true
        },
        "errorMessage": {
          "type": "unknown",
          "dependencies": [],
          "location": 93,
          "isDeclaration": true
        },
        "uploadProps": {
          "type": "object",
          "dependencies": [],
          "location": 111,
          "isDeclaration": true
        },
        "fileName": {
          "type": "call-result",
          "dependencies": [],
          "location": 118,
          "isDeclaration": true
        },
        "isDICOM": {
          "type": "unknown",
          "dependencies": [],
          "location": 119,
          "isDeclaration": true
        },
        "isLt100M": {
          "type": "unknown",
          "dependencies": [],
          "location": 132,
          "isDeclaration": true
        }
      },
      "hookUsage": [
        {
          "name": "useState",
          "location": 45,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 46,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 47,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        }
      ],
      "eventHandlers": [],
      "stateManagement": {
        "useState_45": {
          "type": "useState",
          "location": 45,
          "initialValue": "boolean"
        },
        "useState_46": {
          "type": "useState",
          "location": 46,
          "initialValue": "number"
        },
        "useState_47": {
          "type": "useState",
          "location": 47,
          "initialValue": "unknown"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null || error.message || null",
          "location": 93,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || error.message",
          "location": 93,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null || null || null || null",
          "location": 119,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null || null || null",
          "location": 119,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null || null",
          "location": 119,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 119,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null && null",
          "location": 126,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "uploading && null",
          "location": 183,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "uploadedFile && uploadedFile.status === null && null",
          "location": 200,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "uploadedFile && uploadedFile.status === null",
          "location": 200,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "uploadedFile.size || null",
          "location": 215,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "uploadedFile && uploadedFile.status === null && null",
          "location": 225,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "uploadedFile && uploadedFile.status === null",
          "location": 225,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "message.success": [
          {
            "chain": [
              "message",
              "success"
            ],
            "location": 81,
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 92,
            "argumentCount": 2
          }
        ],
        "message.error": [
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 94,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 127,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 134,
            "argumentCount": 1
          }
        ],
        "Date.now": [
          {
            "chain": [
              "Date",
              "now"
            ],
            "location": 98,
            "argumentCount": 0
          }
        ],
        "file.name.toLowerCase": [
          {
            "chain": [
              "file",
              "name",
              "toLowerCase"
            ],
            "location": 118,
            "argumentCount": 0
          }
        ],
        "fileName.endsWith": [
          {
            "chain": [
              "fileName",
              "endsWith"
            ],
            "location": 119,
            "argumentCount": 1
          },
          {
            "chain": [
              "fileName",
              "endsWith"
            ],
            "location": 120,
            "argumentCount": 1
          },
          {
            "chain": [
              "fileName",
              "endsWith"
            ],
            "location": 121,
            "argumentCount": 1
          },
          {
            "chain": [
              "fileName",
              "endsWith"
            ],
            "location": 122,
            "argumentCount": 1
          }
        ],
        "fileName.includes": [
          {
            "chain": [
              "fileName",
              "includes"
            ],
            "location": 124,
            "argumentCount": 1
          },
          {
            "chain": [
              "fileName",
              "includes"
            ],
            "location": 126,
            "argumentCount": 1
          }
        ],
        "console.log": [
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 143,
            "argumentCount": 2
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "timer",
          "method": "setInterval",
          "location": 56
        },
        {
          "type": "timer",
          "method": "setTimeout",
          "location": 106
        }
      ],
      "relativePath": "MedSegAssist/frontend/src/components/DICOMUploader.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/FileUpload.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/FileUpload.tsx",
      "name": "FileUpload",
      "propsDeclared": [
        "onFileUploaded",
        "disabled"
      ],
      "propsUsedInBody": [
        "disabled",
        "onFileUploaded"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 1,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "console.log"
          ],
          "referencedVariables": [
            "console",
            "e"
          ],
          "parameters": [
            "e"
          ]
        },
        "useState": [
          {
            "location": 22,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 23,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "message.error": [
          {
            "location": 38,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 45,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 90,
            "context": "message",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setUploading": [
          {
            "location": 55,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 93,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "setUploadProgress": [
          {
            "location": 56,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 64,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 77,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 94,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "formData.append": [
          {
            "location": 60,
            "context": "formData",
            "arguments": [
              "string",
              "unknown"
            ],
            "argumentCount": 2
          }
        ],
        "setInterval": [
          {
            "location": 63,
            "context": "",
            "arguments": [
              "function",
              "number"
            ],
            "argumentCount": 2
          }
        ],
        "clearInterval": [
          {
            "location": 66,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 76,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "uploadDICOM": [
          {
            "location": 74,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "onFileUploaded": [
          {
            "location": 81,
            "context": "",
            "arguments": [
              "variable",
              "unknown",
              "variable"
            ],
            "argumentCount": 3
          }
        ],
        "message.success": [
          {
            "location": 82,
            "context": "message",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "location": 88,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "console.log": [
          {
            "location": 98,
            "context": "console",
            "arguments": [
              "string",
              "unknown"
            ],
            "argumentCount": 2
          }
        ]
      },
      "variableReferences": {
        "file": [
          {
            "property": "name",
            "location": 33,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 34,
            "isComputed": false
          },
          {
            "property": "type",
            "location": 35,
            "isComputed": false
          },
          {
            "property": "size",
            "location": 43,
            "isComputed": false
          }
        ],
        "message": [
          {
            "property": "error",
            "location": 38,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 45,
            "isComputed": false
          },
          {
            "property": "success",
            "location": 82,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 90,
            "isComputed": false
          }
        ],
        "formData": [
          {
            "property": "append",
            "location": 60,
            "isComputed": false
          }
        ],
        "response": [
          {
            "property": "session_id",
            "location": 79,
            "isComputed": false
          },
          {
            "property": "image_data",
            "location": 80,
            "isComputed": false
          },
          {
            "property": "metadata",
            "location": 81,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 85,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "error",
            "location": 88,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 98,
            "isComputed": false
          }
        ],
        "error": [
          {
            "property": "message",
            "location": 89,
            "isComputed": false
          }
        ],
        "e": [
          {
            "property": "dataTransfer",
            "location": 98,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "FileUpload": {
          "type": "function",
          "dependencies": [],
          "location": 21,
          "isDeclaration": true
        },
        "uploadProps": {
          "type": "object",
          "dependencies": [
            "disabled"
          ],
          "location": 25,
          "isDeclaration": true
        },
        "isDicom": {
          "type": "unknown",
          "dependencies": [],
          "location": 33,
          "isDeclaration": true
        },
        "isLt100M": {
          "type": "unknown",
          "dependencies": [],
          "location": 43,
          "isDeclaration": true
        },
        "formData": {
          "type": "unknown",
          "dependencies": [],
          "location": 59,
          "isDeclaration": true
        },
        "progressInterval": {
          "type": "call-result",
          "dependencies": [
            "setInterval"
          ],
          "location": 63,
          "isDeclaration": true
        },
        "response": {
          "type": "unknown",
          "dependencies": [],
          "location": 74,
          "isDeclaration": true
        },
        "imageDataUrl": {
          "type": "unknown",
          "dependencies": [],
          "location": 80,
          "isDeclaration": true
        },
        "errorMessage": {
          "type": "unknown",
          "dependencies": [],
          "location": 89,
          "isDeclaration": true
        }
      },
      "hookUsage": [
        {
          "name": "useState",
          "location": 22,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 23,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        }
      ],
      "eventHandlers": [],
      "stateManagement": {
        "useState_22": {
          "type": "useState",
          "location": 22,
          "initialValue": "boolean"
        },
        "useState_23": {
          "type": "useState",
          "location": 23,
          "initialValue": "number"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null || null || file.type === null",
          "location": 33,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 33,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "response.message || null",
          "location": 85,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "uploading && null",
          "location": 117,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "file.name.toLowerCase": [
          {
            "chain": [
              "file",
              "name",
              "toLowerCase"
            ],
            "location": 33,
            "argumentCount": 0
          },
          {
            "chain": [
              "file",
              "name",
              "toLowerCase"
            ],
            "location": 34,
            "argumentCount": 0
          }
        ],
        "message.error": [
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 38,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 45,
            "argumentCount": 1
          },
          {
            "chain": [
              "message",
              "error"
            ],
            "location": 90,
            "argumentCount": 1
          }
        ],
        "formData.append": [
          {
            "chain": [
              "formData",
              "append"
            ],
            "location": 60,
            "argumentCount": 2
          }
        ],
        "message.success": [
          {
            "chain": [
              "message",
              "success"
            ],
            "location": 82,
            "argumentCount": 1
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 88,
            "argumentCount": 2
          }
        ],
        "console.log": [
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 98,
            "argumentCount": 2
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "timer",
          "method": "setInterval",
          "location": 63
        }
      ],
      "relativePath": "MedSegAssist/frontend/src/components/FileUpload.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/HelpPanel.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/HelpPanel.tsx",
      "name": "HelpPanel",
      "propsDeclared": [
        "visible"
      ],
      "propsUsedInBody": [
        "visible"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 0,
      "cyclomaticComplexity": 1,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "visible"
          ],
          "parameters": [
            "destructured"
          ]
        }
      },
      "variableReferences": {},
      "dataFlow": {
        "HelpPanel": {
          "type": "function",
          "dependencies": [],
          "location": 20,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/components/HelpPanel.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImageCanvas.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImageCanvas.tsx",
      "name": "ImageCanvas",
      "propsDeclared": [
        "imageData",
        "maskData",
        "selectedTool",
        "onPointAdd",
        "onPointsChange",
        "points",
        "isLoading"
      ],
      "propsUsedInBody": [
        "imageData",
        "maskData",
        "points",
        "isLoading",
        "selectedTool",
        "onPointAdd",
        "onPointsChange"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 1,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "p"
          ],
          "parameters": [
            "p"
          ]
        },
        "useRef": [
          {
            "location": 30,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 31,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "useState": [
          {
            "location": 32,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 33,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 34,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 35,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 36,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 37,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "useCallback": [
          {
            "location": 40,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 115,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 128,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 149,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 164,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 169,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 193,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 198,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "canvas.getContext": [
          {
            "location": 44,
            "context": "canvas",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          }
        ],
        "ctx.clearRect": [
          {
            "location": 48,
            "context": "ctx",
            "arguments": [
              "number",
              "number",
              "unknown",
              "unknown"
            ],
            "argumentCount": 4
          }
        ],
        "ctx.save": [
          {
            "location": 51,
            "context": "ctx",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "ctx.translate": [
          {
            "location": 54,
            "context": "ctx",
            "arguments": [
              "unknown",
              "unknown"
            ],
            "argumentCount": 2
          }
        ],
        "ctx.scale": [
          {
            "location": 55,
            "context": "ctx",
            "arguments": [
              "variable",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "setImageSize": [
          {
            "location": 63,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "container.getBoundingClientRect": [
          {
            "location": 68,
            "context": "container",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 225,
            "context": "container",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "Math.min": [
          {
            "location": 69,
            "context": "Math",
            "arguments": [
              "unknown",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 70,
            "context": "Math",
            "arguments": [
              "unknown",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 74,
            "context": "Math",
            "arguments": [
              "variable",
              "variable",
              "number"
            ],
            "argumentCount": 3
          },
          {
            "location": 180,
            "context": "Math",
            "arguments": [
              "number",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 226,
            "context": "Math",
            "arguments": [
              "unknown",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 227,
            "context": "Math",
            "arguments": [
              "unknown",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 231,
            "context": "Math",
            "arguments": [
              "variable",
              "variable",
              "number"
            ],
            "argumentCount": 3
          }
        ],
        "setCanvasSize": [
          {
            "location": 79,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 236,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "setScale": [
          {
            "location": 80,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 189,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 199,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          }
        ],
        "setOffset": [
          {
            "location": 81,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 155,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 184,
            "context": "",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 200,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "ctx.drawImage": [
          {
            "location": 85,
            "context": "ctx",
            "arguments": [
              "variable",
              "number",
              "number",
              "unknown",
              "unknown"
            ],
            "argumentCount": 5
          },
          {
            "location": 92,
            "context": "ctx",
            "arguments": [
              "variable",
              "number",
              "number",
              "unknown",
              "unknown"
            ],
            "argumentCount": 5
          }
        ],
        "drawPoints": [
          {
            "location": 96,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 101,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 107,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "ctx.restore": [
          {
            "location": 111,
            "context": "ctx",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "points.forEach": [
          {
            "location": 116,
            "context": "points",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "ctx.beginPath": [
          {
            "location": 117,
            "context": "ctx",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "ctx.arc": [
          {
            "location": 118,
            "context": "ctx",
            "arguments": [
              "unknown",
              "unknown",
              "number",
              "number",
              "unknown"
            ],
            "argumentCount": 5
          }
        ],
        "ctx.fill": [
          {
            "location": 120,
            "context": "ctx",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "ctx.stroke": [
          {
            "location": 123,
            "context": "ctx",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "canvas.getBoundingClientRect": [
          {
            "location": 134,
            "context": "canvas",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 175,
            "context": "canvas",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "onPointAdd": [
          {
            "location": 141,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setIsDragging": [
          {
            "location": 143,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 165,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "setLastMousePos": [
          {
            "location": 144,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          },
          {
            "location": 160,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "event.preventDefault": [
          {
            "location": 170,
            "context": "event",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "Math.max": [
          {
            "location": 180,
            "context": "Math",
            "arguments": [
              "number",
              "call-result"
            ],
            "argumentCount": 2
          }
        ],
        "onPointsChange": [
          {
            "location": 194,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          }
        ],
        "useEffect": [
          {
            "location": 204,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 209,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          },
          {
            "location": 219,
            "context": "",
            "arguments": [
              "function",
              "array"
            ],
            "argumentCount": 2
          }
        ],
        "drawCanvas": [
          {
            "location": 205,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          },
          {
            "location": 215,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "resizeObserver.observe": [
          {
            "location": 240,
            "context": "resizeObserver",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "resizeObserver.disconnect": [
          {
            "location": 243,
            "context": "resizeObserver",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "points.filter": [
          {
            "location": 359,
            "context": "points",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          },
          {
            "location": 360,
            "context": "points",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "Math.round": [
          {
            "location": 363,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "canvasRef": [
          {
            "property": "current",
            "location": 41,
            "isComputed": false
          },
          {
            "property": "current",
            "location": 131,
            "isComputed": false
          },
          {
            "property": "current",
            "location": 172,
            "isComputed": false
          },
          {
            "property": "current",
            "location": 210,
            "isComputed": false
          }
        ],
        "canvas": [
          {
            "property": "getContext",
            "location": 44,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 48,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 48,
            "isComputed": false
          },
          {
            "property": "getBoundingClientRect",
            "location": 134,
            "isComputed": false
          },
          {
            "property": "getBoundingClientRect",
            "location": 175,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 213,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 214,
            "isComputed": false
          }
        ],
        "ctx": [
          {
            "property": "clearRect",
            "location": 48,
            "isComputed": false
          },
          {
            "property": "save",
            "location": 51,
            "isComputed": false
          },
          {
            "property": "translate",
            "location": 54,
            "isComputed": false
          },
          {
            "property": "scale",
            "location": 55,
            "isComputed": false
          },
          {
            "property": "drawImage",
            "location": 85,
            "isComputed": false
          },
          {
            "property": "globalAlpha",
            "location": 91,
            "isComputed": false
          },
          {
            "property": "drawImage",
            "location": 92,
            "isComputed": false
          },
          {
            "property": "globalAlpha",
            "location": 93,
            "isComputed": false
          },
          {
            "property": "restore",
            "location": 111,
            "isComputed": false
          },
          {
            "property": "beginPath",
            "location": 117,
            "isComputed": false
          },
          {
            "property": "arc",
            "location": 118,
            "isComputed": false
          },
          {
            "property": "fillStyle",
            "location": 119,
            "isComputed": false
          },
          {
            "property": "fill",
            "location": 120,
            "isComputed": false
          },
          {
            "property": "strokeStyle",
            "location": 121,
            "isComputed": false
          },
          {
            "property": "lineWidth",
            "location": 122,
            "isComputed": false
          },
          {
            "property": "stroke",
            "location": 123,
            "isComputed": false
          }
        ],
        "offset": [
          {
            "property": "x",
            "location": 54,
            "isComputed": false
          },
          {
            "property": "y",
            "location": 54,
            "isComputed": false
          },
          {
            "property": "x",
            "location": 135,
            "isComputed": false
          },
          {
            "property": "y",
            "location": 136,
            "isComputed": false
          }
        ],
        "img": [
          {
            "property": "onload",
            "location": 60,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 62,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 62,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 63,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 63,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 69,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 70,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 72,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 73,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 76,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 77,
            "isComputed": false
          },
          {
            "property": "src",
            "location": 104,
            "isComputed": false
          }
        ],
        "imageSize": [
          {
            "property": "width",
            "location": 62,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 62,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 224,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 224,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 226,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 227,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 229,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 230,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 233,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 234,
            "isComputed": false
          }
        ],
        "containerRef": [
          {
            "property": "current",
            "location": 66,
            "isComputed": false
          },
          {
            "property": "current",
            "location": 220,
            "isComputed": false
          }
        ],
        "container": [
          {
            "property": "getBoundingClientRect",
            "location": 68,
            "isComputed": false
          },
          {
            "property": "getBoundingClientRect",
            "location": 225,
            "isComputed": false
          }
        ],
        "Math": [
          {
            "property": "min",
            "location": 69,
            "isComputed": false
          },
          {
            "property": "min",
            "location": 70,
            "isComputed": false
          },
          {
            "property": "min",
            "location": 74,
            "isComputed": false
          },
          {
            "property": "PI",
            "location": 118,
            "isComputed": false
          },
          {
            "property": "max",
            "location": 180,
            "isComputed": false
          },
          {
            "property": "min",
            "location": 180,
            "isComputed": false
          },
          {
            "property": "min",
            "location": 226,
            "isComputed": false
          },
          {
            "property": "min",
            "location": 227,
            "isComputed": false
          },
          {
            "property": "min",
            "location": 231,
            "isComputed": false
          },
          {
            "property": "round",
            "location": 363,
            "isComputed": false
          }
        ],
        "containerRect": [
          {
            "property": "width",
            "location": 69,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 70,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 226,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 227,
            "isComputed": false
          }
        ],
        "canvasSize": [
          {
            "property": "width",
            "location": 85,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 85,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 92,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 92,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 213,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 214,
            "isComputed": false
          },
          {
            "property": "width",
            "location": 263,
            "isComputed": false
          },
          {
            "property": "height",
            "location": 264,
            "isComputed": false
          }
        ],
        "maskImg": [
          {
            "property": "onload",
            "location": 90,
            "isComputed": false
          },
          {
            "property": "src",
            "location": 98,
            "isComputed": false
          }
        ],
        "points": [
          {
            "property": "forEach",
            "location": 116,
            "isComputed": false
          },
          {
            "property": "filter",
            "location": 359,
            "isComputed": false
          },
          {
            "property": "filter",
            "location": 360,
            "isComputed": false
          }
        ],
        "point": [
          {
            "property": "x",
            "location": 118,
            "isComputed": false
          },
          {
            "property": "y",
            "location": 118,
            "isComputed": false
          },
          {
            "property": "label",
            "location": 119,
            "isComputed": false
          }
        ],
        "event": [
          {
            "property": "clientX",
            "location": 135,
            "isComputed": false
          },
          {
            "property": "clientY",
            "location": 136,
            "isComputed": false
          },
          {
            "property": "clientX",
            "location": 144,
            "isComputed": false
          },
          {
            "property": "clientY",
            "location": 144,
            "isComputed": false
          },
          {
            "property": "clientX",
            "location": 152,
            "isComputed": false
          },
          {
            "property": "clientY",
            "location": 153,
            "isComputed": false
          },
          {
            "property": "clientX",
            "location": 160,
            "isComputed": false
          },
          {
            "property": "clientY",
            "location": 160,
            "isComputed": false
          },
          {
            "property": "preventDefault",
            "location": 170,
            "isComputed": false
          },
          {
            "property": "clientX",
            "location": 176,
            "isComputed": false
          },
          {
            "property": "clientY",
            "location": 177,
            "isComputed": false
          },
          {
            "property": "deltaY",
            "location": 179,
            "isComputed": false
          }
        ],
        "rect": [
          {
            "property": "left",
            "location": 135,
            "isComputed": false
          },
          {
            "property": "top",
            "location": 136,
            "isComputed": false
          },
          {
            "property": "left",
            "location": 176,
            "isComputed": false
          },
          {
            "property": "top",
            "location": 177,
            "isComputed": false
          }
        ],
        "Tools": [
          {
            "property": "POSITIVE_POINT",
            "location": 138,
            "isComputed": false
          },
          {
            "property": "NEGATIVE_POINT",
            "location": 138,
            "isComputed": false
          },
          {
            "property": "POSITIVE_POINT",
            "location": 139,
            "isComputed": false
          },
          {
            "property": "PAN",
            "location": 142,
            "isComputed": false
          },
          {
            "property": "PAN",
            "location": 150,
            "isComputed": false
          },
          {
            "property": "PAN",
            "location": 273,
            "isComputed": false
          }
        ],
        "lastMousePos": [
          {
            "property": "x",
            "location": 152,
            "isComputed": false
          },
          {
            "property": "y",
            "location": 153,
            "isComputed": false
          }
        ],
        "prev": [
          {
            "property": "x",
            "location": 156,
            "isComputed": false
          },
          {
            "property": "y",
            "location": 157,
            "isComputed": false
          },
          {
            "property": "x",
            "location": 185,
            "isComputed": false
          },
          {
            "property": "y",
            "location": 186,
            "isComputed": false
          }
        ],
        "resizeObserver": [
          {
            "property": "observe",
            "location": 240,
            "isComputed": false
          },
          {
            "property": "disconnect",
            "location": 243,
            "isComputed": false
          }
        ],
        "p": [
          {
            "property": "label",
            "location": 359,
            "isComputed": false
          },
          {
            "property": "label",
            "location": 360,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "ImageCanvas": {
          "type": "function",
          "dependencies": [],
          "location": 21,
          "isDeclaration": true
        },
        "canvasRef": {
          "type": "call-result",
          "dependencies": [
            "useRef"
          ],
          "location": 30,
          "isDeclaration": true
        },
        "containerRef": {
          "type": "call-result",
          "dependencies": [
            "useRef"
          ],
          "location": 31,
          "isDeclaration": true
        },
        "drawCanvas": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "imageData",
            "maskData",
            "points",
            "scale",
            "offset",
            "canvasSize"
          ],
          "location": 40,
          "isDeclaration": true
        },
        "canvas": {
          "type": "unknown",
          "dependencies": [
            "canvasRef"
          ],
          "location": 210,
          "isDeclaration": true
        },
        "ctx": {
          "type": "call-result",
          "dependencies": [],
          "location": 44,
          "isDeclaration": true
        },
        "img": {
          "type": "unknown",
          "dependencies": [],
          "location": 59,
          "isDeclaration": true
        },
        "container": {
          "type": "unknown",
          "dependencies": [
            "containerRef"
          ],
          "location": 220,
          "isDeclaration": true
        },
        "containerRect": {
          "type": "call-result",
          "dependencies": [],
          "location": 225,
          "isDeclaration": true
        },
        "maxWidth": {
          "type": "call-result",
          "dependencies": [
            "imageSize"
          ],
          "location": 226,
          "isDeclaration": true
        },
        "maxHeight": {
          "type": "call-result",
          "dependencies": [
            "imageSize"
          ],
          "location": 227,
          "isDeclaration": true
        },
        "scaleX": {
          "type": "unknown",
          "dependencies": [],
          "location": 229,
          "isDeclaration": true
        },
        "scaleY": {
          "type": "unknown",
          "dependencies": [],
          "location": 230,
          "isDeclaration": true
        },
        "autoScale": {
          "type": "call-result",
          "dependencies": [
            "scaleX",
            "scaleY"
          ],
          "location": 231,
          "isDeclaration": true
        },
        "newWidth": {
          "type": "unknown",
          "dependencies": [],
          "location": 233,
          "isDeclaration": true
        },
        "newHeight": {
          "type": "unknown",
          "dependencies": [],
          "location": 234,
          "isDeclaration": true
        },
        "maskImg": {
          "type": "unknown",
          "dependencies": [],
          "location": 89,
          "isDeclaration": true
        },
        "drawPoints": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "points"
          ],
          "location": 115,
          "isDeclaration": true
        },
        "handleMouseDown": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "selectedTool",
            "onPointAdd",
            "isLoading",
            "scale",
            "offset"
          ],
          "location": 128,
          "isDeclaration": true
        },
        "rect": {
          "type": "call-result",
          "dependencies": [],
          "location": 175,
          "isDeclaration": true
        },
        "x": {
          "type": "unknown",
          "dependencies": [],
          "location": 135,
          "isDeclaration": true
        },
        "y": {
          "type": "unknown",
          "dependencies": [],
          "location": 136,
          "isDeclaration": true
        },
        "label": {
          "type": "unknown",
          "dependencies": [],
          "location": 139,
          "isDeclaration": true
        },
        "newPoint": {
          "type": "object",
          "dependencies": [
            "x",
            "y",
            "label"
          ],
          "location": 140,
          "isDeclaration": true
        },
        "handleMouseMove": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "isDragging",
            "selectedTool",
            "lastMousePos"
          ],
          "location": 149,
          "isDeclaration": true
        },
        "deltaX": {
          "type": "unknown",
          "dependencies": [],
          "location": 152,
          "isDeclaration": true
        },
        "deltaY": {
          "type": "unknown",
          "dependencies": [],
          "location": 153,
          "isDeclaration": true
        },
        "handleMouseUp": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 164,
          "isDeclaration": true
        },
        "handleWheel": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "scale"
          ],
          "location": 169,
          "isDeclaration": true
        },
        "mouseX": {
          "type": "unknown",
          "dependencies": [],
          "location": 176,
          "isDeclaration": true
        },
        "mouseY": {
          "type": "unknown",
          "dependencies": [],
          "location": 177,
          "isDeclaration": true
        },
        "delta": {
          "type": "unknown",
          "dependencies": [],
          "location": 179,
          "isDeclaration": true
        },
        "newScale": {
          "type": "call-result",
          "dependencies": [],
          "location": 180,
          "isDeclaration": true
        },
        "scaleRatio": {
          "type": "unknown",
          "dependencies": [],
          "location": 183,
          "isDeclaration": true
        },
        "clearAllPoints": {
          "type": "call-result",
          "dependencies": [
            "useCallback",
            "onPointsChange"
          ],
          "location": 193,
          "isDeclaration": true
        },
        "resetView": {
          "type": "call-result",
          "dependencies": [
            "useCallback"
          ],
          "location": 198,
          "isDeclaration": true
        },
        "resizeObserver": {
          "type": "unknown",
          "dependencies": [],
          "location": 223,
          "isDeclaration": true
        }
      },
      "hookUsage": [
        {
          "name": "useRef",
          "location": 30,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useRef",
          "location": 31,
          "arguments": [
            "unknown"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 32,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 33,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 34,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 35,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 36,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 37,
          "arguments": [
            "object"
          ],
          "argumentCount": 1
        },
        {
          "name": "useCallback",
          "location": 40,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 115,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 128,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 149,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 164,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 169,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 193,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useCallback",
          "location": 198,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useEffect",
          "location": 204,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useEffect",
          "location": 209,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        },
        {
          "name": "useEffect",
          "location": 219,
          "arguments": [
            "function",
            "array"
          ],
          "argumentCount": 2
        }
      ],
      "eventHandlers": [
        {
          "eventType": "mousedown",
          "handlerType": "variable",
          "location": 261,
          "attributeName": "onMouseDown"
        },
        {
          "eventType": "mousemove",
          "handlerType": "variable",
          "location": 261,
          "attributeName": "onMouseMove"
        },
        {
          "eventType": "mouseup",
          "handlerType": "variable",
          "location": 261,
          "attributeName": "onMouseUp"
        },
        {
          "eventType": "mouseleave",
          "handlerType": "variable",
          "location": 261,
          "attributeName": "onMouseLeave"
        },
        {
          "eventType": "wheel",
          "handlerType": "variable",
          "location": 261,
          "attributeName": "onWheel"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 312,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 327,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {
        "useState_32": {
          "type": "useState",
          "location": 32,
          "initialValue": "object"
        },
        "useState_33": {
          "type": "useState",
          "location": 33,
          "initialValue": "number"
        },
        "useState_34": {
          "type": "useState",
          "location": 34,
          "initialValue": "object"
        },
        "useState_35": {
          "type": "useState",
          "location": 35,
          "initialValue": "boolean"
        },
        "useState_36": {
          "type": "useState",
          "location": 36,
          "initialValue": "object"
        },
        "useState_37": {
          "type": "useState",
          "location": 37,
          "initialValue": "object"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "imageSize.width !== img.width || imageSize.height !== img.height",
          "location": 62,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "selectedTool === Tools.POSITIVE_POINT || selectedTool === Tools.NEGATIVE_POINT",
          "location": 138,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || selectedTool !== Tools.PAN",
          "location": 150,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "imageData && imageSize.width > null && imageSize.height > null",
          "location": 224,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "imageData && imageSize.width > null",
          "location": 224,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "isLoading && null",
          "location": 279,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "canvas.getContext": [
          {
            "chain": [
              "canvas",
              "getContext"
            ],
            "location": 44,
            "argumentCount": 1
          }
        ],
        "ctx.clearRect": [
          {
            "chain": [
              "ctx",
              "clearRect"
            ],
            "location": 48,
            "argumentCount": 4
          }
        ],
        "ctx.save": [
          {
            "chain": [
              "ctx",
              "save"
            ],
            "location": 51,
            "argumentCount": 0
          }
        ],
        "ctx.translate": [
          {
            "chain": [
              "ctx",
              "translate"
            ],
            "location": 54,
            "argumentCount": 2
          }
        ],
        "ctx.scale": [
          {
            "chain": [
              "ctx",
              "scale"
            ],
            "location": 55,
            "argumentCount": 2
          }
        ],
        "container.getBoundingClientRect": [
          {
            "chain": [
              "container",
              "getBoundingClientRect"
            ],
            "location": 68,
            "argumentCount": 0
          },
          {
            "chain": [
              "container",
              "getBoundingClientRect"
            ],
            "location": 225,
            "argumentCount": 0
          }
        ],
        "Math.min": [
          {
            "chain": [
              "Math",
              "min"
            ],
            "location": 69,
            "argumentCount": 2
          },
          {
            "chain": [
              "Math",
              "min"
            ],
            "location": 70,
            "argumentCount": 2
          },
          {
            "chain": [
              "Math",
              "min"
            ],
            "location": 74,
            "argumentCount": 3
          },
          {
            "chain": [
              "Math",
              "min"
            ],
            "location": 180,
            "argumentCount": 2
          },
          {
            "chain": [
              "Math",
              "min"
            ],
            "location": 226,
            "argumentCount": 2
          },
          {
            "chain": [
              "Math",
              "min"
            ],
            "location": 227,
            "argumentCount": 2
          },
          {
            "chain": [
              "Math",
              "min"
            ],
            "location": 231,
            "argumentCount": 3
          }
        ],
        "ctx.drawImage": [
          {
            "chain": [
              "ctx",
              "drawImage"
            ],
            "location": 85,
            "argumentCount": 5
          },
          {
            "chain": [
              "ctx",
              "drawImage"
            ],
            "location": 92,
            "argumentCount": 5
          }
        ],
        "ctx.restore": [
          {
            "chain": [
              "ctx",
              "restore"
            ],
            "location": 111,
            "argumentCount": 0
          }
        ],
        "points.forEach": [
          {
            "chain": [
              "points",
              "forEach"
            ],
            "location": 116,
            "argumentCount": 1
          }
        ],
        "ctx.beginPath": [
          {
            "chain": [
              "ctx",
              "beginPath"
            ],
            "location": 117,
            "argumentCount": 0
          }
        ],
        "ctx.arc": [
          {
            "chain": [
              "ctx",
              "arc"
            ],
            "location": 118,
            "argumentCount": 5
          }
        ],
        "ctx.fill": [
          {
            "chain": [
              "ctx",
              "fill"
            ],
            "location": 120,
            "argumentCount": 0
          }
        ],
        "ctx.stroke": [
          {
            "chain": [
              "ctx",
              "stroke"
            ],
            "location": 123,
            "argumentCount": 0
          }
        ],
        "canvas.getBoundingClientRect": [
          {
            "chain": [
              "canvas",
              "getBoundingClientRect"
            ],
            "location": 134,
            "argumentCount": 0
          },
          {
            "chain": [
              "canvas",
              "getBoundingClientRect"
            ],
            "location": 175,
            "argumentCount": 0
          }
        ],
        "event.preventDefault": [
          {
            "chain": [
              "event",
              "preventDefault"
            ],
            "location": 170,
            "argumentCount": 0
          }
        ],
        "Math.max": [
          {
            "chain": [
              "Math",
              "max"
            ],
            "location": 180,
            "argumentCount": 2
          }
        ],
        "resizeObserver.observe": [
          {
            "chain": [
              "resizeObserver",
              "observe"
            ],
            "location": 240,
            "argumentCount": 1
          }
        ],
        "resizeObserver.disconnect": [
          {
            "chain": [
              "resizeObserver",
              "disconnect"
            ],
            "location": 243,
            "argumentCount": 0
          }
        ],
        "points.filter": [
          {
            "chain": [
              "points",
              "filter"
            ],
            "location": 359,
            "argumentCount": 1
          },
          {
            "chain": [
              "points",
              "filter"
            ],
            "location": 360,
            "argumentCount": 1
          }
        ],
        "Math.round": [
          {
            "chain": [
              "Math",
              "round"
            ],
            "location": 363,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/components/ImageCanvas.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImagePresets.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImagePresets.tsx",
      "name": "ImagePresets",
      "propsDeclared": [
        "onPresetApply"
      ],
      "propsUsedInBody": [
        "onPresetApply"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 0,
      "cyclomaticComplexity": 1,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "onPresetApply"
          ],
          "referencedVariables": [
            "onPresetApply",
            "preset"
          ],
          "parameters": []
        },
        "presets.map": [
          {
            "location": 76,
            "context": "presets",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "onPresetApply": [
          {
            "location": 80,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "presets": [
          {
            "property": "map",
            "location": 76,
            "isComputed": false
          }
        ],
        "preset": [
          {
            "property": "description",
            "location": 77,
            "isComputed": false
          },
          {
            "property": "name",
            "location": 87,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "ImagePresets": {
          "type": "function",
          "dependencies": [],
          "location": 20,
          "isDeclaration": true
        },
        "presets": {
          "type": "array",
          "dependencies": [],
          "location": 22,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 78,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "presets.map": [
          {
            "chain": [
              "presets",
              "map"
            ],
            "location": 76,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/components/ImagePresets.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/PatientInfo.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/PatientInfo.tsx",
      "name": "PatientInfo",
      "propsDeclared": [
        "metadata"
      ],
      "propsUsedInBody": [
        "metadata"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 1,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "gender"
          ],
          "parameters": [
            "gender"
          ]
        },
        "today.getFullYear": [
          {
            "location": 27,
            "context": "today",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "birth.getFullYear": [
          {
            "location": 27,
            "context": "birth",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "today.getMonth": [
          {
            "location": 28,
            "context": "today",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "birth.getMonth": [
          {
            "location": 28,
            "context": "birth",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "today.getDate": [
          {
            "location": 29,
            "context": "today",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "birth.getDate": [
          {
            "location": 29,
            "context": "birth",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "date.toLocaleDateString": [
          {
            "location": 40,
            "context": "date",
            "arguments": [
              "string",
              "object"
            ],
            "argumentCount": 2
          }
        ],
        "formatDate": [
          {
            "location": 135,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "today": [
          {
            "property": "getFullYear",
            "location": 27,
            "isComputed": false
          },
          {
            "property": "getMonth",
            "location": 28,
            "isComputed": false
          },
          {
            "property": "getDate",
            "location": 29,
            "isComputed": false
          }
        ],
        "birth": [
          {
            "property": "getFullYear",
            "location": 27,
            "isComputed": false
          },
          {
            "property": "getMonth",
            "location": 28,
            "isComputed": false
          },
          {
            "property": "getDate",
            "location": 29,
            "isComputed": false
          }
        ],
        "date": [
          {
            "property": "toLocaleDateString",
            "location": 40,
            "isComputed": false
          }
        ],
        "metadata": [
          {
            "property": "patient_name",
            "location": 98,
            "isComputed": false
          },
          {
            "property": "patient_id",
            "location": 109,
            "isComputed": false
          },
          {
            "property": "modality",
            "location": 124,
            "isComputed": false
          },
          {
            "property": "study_date",
            "location": 135,
            "isComputed": false
          },
          {
            "property": "rows",
            "location": 141,
            "isComputed": false
          },
          {
            "property": "columns",
            "location": 141,
            "isComputed": false
          },
          {
            "property": "pixel_spacing",
            "location": 145,
            "isComputed": false
          },
          {
            "property": "pixel_spacing",
            "location": 146,
            "isComputed": false
          },
          {
            "property": "pixel_spacing",
            "location": 146,
            "isComputed": false
          },
          {
            "property": "slice_thickness",
            "location": 151,
            "isComputed": false
          },
          {
            "property": "slice_thickness",
            "location": 153,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "PatientInfo": {
          "type": "function",
          "dependencies": [],
          "location": 21,
          "isDeclaration": true
        },
        "calculateAge": {
          "type": "function",
          "dependencies": [],
          "location": 23,
          "isDeclaration": true
        },
        "birth": {
          "type": "unknown",
          "dependencies": [],
          "location": 25,
          "isDeclaration": true
        },
        "today": {
          "type": "unknown",
          "dependencies": [],
          "location": 26,
          "isDeclaration": true
        },
        "age": {
          "type": "unknown",
          "dependencies": [],
          "location": 27,
          "isDeclaration": true
        },
        "monthDiff": {
          "type": "unknown",
          "dependencies": [],
          "location": 28,
          "isDeclaration": true
        },
        "formatDate": {
          "type": "function",
          "dependencies": [],
          "location": 36,
          "isDeclaration": true
        },
        "date": {
          "type": "unknown",
          "dependencies": [],
          "location": 39,
          "isDeclaration": true
        },
        "getGenderColor": {
          "type": "function",
          "dependencies": [],
          "location": 51,
          "isDeclaration": true
        },
        "getGenderText": {
          "type": "function",
          "dependencies": [],
          "location": 65,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "monthDiff < null || monthDiff === null && null < null",
          "location": 29,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "monthDiff === null && null < null",
          "location": 29,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "metadata.patient_name || null",
          "location": 98,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "metadata.modality || null",
          "location": 124,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "metadata.slice_thickness && null",
          "location": 151,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "today.getFullYear": [
          {
            "chain": [
              "today",
              "getFullYear"
            ],
            "location": 27,
            "argumentCount": 0
          }
        ],
        "birth.getFullYear": [
          {
            "chain": [
              "birth",
              "getFullYear"
            ],
            "location": 27,
            "argumentCount": 0
          }
        ],
        "today.getMonth": [
          {
            "chain": [
              "today",
              "getMonth"
            ],
            "location": 28,
            "argumentCount": 0
          }
        ],
        "birth.getMonth": [
          {
            "chain": [
              "birth",
              "getMonth"
            ],
            "location": 28,
            "argumentCount": 0
          }
        ],
        "today.getDate": [
          {
            "chain": [
              "today",
              "getDate"
            ],
            "location": 29,
            "argumentCount": 0
          }
        ],
        "birth.getDate": [
          {
            "chain": [
              "birth",
              "getDate"
            ],
            "location": 29,
            "argumentCount": 0
          }
        ],
        "date.toLocaleDateString": [
          {
            "chain": [
              "date",
              "toLocaleDateString"
            ],
            "location": 40,
            "argumentCount": 2
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/components/PatientInfo.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/QuickActions.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/QuickActions.tsx",
      "name": "QuickActions",
      "propsDeclared": [
        "isFullscreen",
        "onFullscreenToggle",
        "onRotateLeft",
        "onRotateRight",
        "onZoomIn",
        "onZoomOut",
        "onUndo",
        "onRedo",
        "onReset",
        "onFitToWindow",
        "onActualSize",
        "canUndo",
        "canRedo"
      ],
      "propsUsedInBody": [
        "onFitToWindow",
        "onActualSize",
        "onReset",
        "isFullscreen",
        "onFullscreenToggle",
        "onRotateLeft",
        "onRotateRight",
        "onZoomIn",
        "onZoomOut",
        "onUndo",
        "canUndo",
        "onRedo",
        "canRedo"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 0,
      "cyclomaticComplexity": 1,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "onFitToWindow",
            "onActualSize",
            "onReset",
            "isFullscreen",
            "onFullscreenToggle",
            "onRotateLeft",
            "onRotateRight",
            "onZoomIn",
            "onZoomOut",
            "onUndo",
            "canUndo",
            "onRedo",
            "canRedo",
            "moreMenu"
          ],
          "parameters": [
            "destructured"
          ]
        }
      },
      "variableReferences": {},
      "dataFlow": {
        "QuickActions": {
          "type": "function",
          "dependencies": [],
          "location": 39,
          "isDeclaration": true
        },
        "moreMenu": {
          "type": "jsx",
          "dependencies": [],
          "location": 55,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 57,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 60,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 64,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 75,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 85,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 94,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 104,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 113,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 123,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 133,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/components/QuickActions.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx",
      "name": "Sidebar",
      "propsDeclared": [
        "visible",
        "metadata",
        "points",
        "onVisibilityChange",
        "onPointsChange",
        "onExport",
        "onPrint",
        "onShare"
      ],
      "propsUsedInBody": [
        "onPointsChange",
        "visible",
        "onVisibilityChange",
        "metadata",
        "points",
        "onExport",
        "onPrint",
        "onShare"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 3,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImagePresets.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/PatientInfo.tsx"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "i",
            "index"
          ],
          "parameters": [
            "_",
            "i"
          ]
        },
        "useState": [
          {
            "location": 63,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 64,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 65,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 66,
            "context": "",
            "arguments": [
              "number"
            ],
            "argumentCount": 1
          },
          {
            "location": 67,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 68,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "onPointsChange": [
          {
            "location": 72,
            "context": "",
            "arguments": [
              "array"
            ],
            "argumentCount": 1
          },
          {
            "location": 236,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setWindowLevel": [
          {
            "location": 77,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 158,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "setWindowWidth": [
          {
            "location": 78,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 169,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "onVisibilityChange": [
          {
            "location": 87,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          },
          {
            "location": 110,
            "context": "",
            "arguments": [
              "boolean"
            ],
            "argumentCount": 1
          }
        ],
        "points.filter": [
          {
            "location": 235,
            "context": "points",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "Math.round": [
          {
            "location": 245,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 245,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "preset": [
          {
            "property": "windowLevel",
            "location": 77,
            "isComputed": false
          },
          {
            "property": "windowWidth",
            "location": 78,
            "isComputed": false
          }
        ],
        "points": [
          {
            "property": "length",
            "location": 211,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 217,
            "isComputed": false
          },
          {
            "property": "length",
            "location": 223,
            "isComputed": false
          },
          {
            "property": "filter",
            "location": 235,
            "isComputed": false
          }
        ],
        "point": [
          {
            "property": "label",
            "location": 242,
            "isComputed": false
          },
          {
            "property": "label",
            "location": 243,
            "isComputed": false
          },
          {
            "property": "x",
            "location": 245,
            "isComputed": false
          },
          {
            "property": "y",
            "location": 245,
            "isComputed": false
          }
        ],
        "Math": [
          {
            "property": "round",
            "location": 245,
            "isComputed": false
          },
          {
            "property": "round",
            "location": 245,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "Sidebar": {
          "type": "function",
          "dependencies": [],
          "location": 52,
          "isDeclaration": true
        },
        "handleClearAllPoints": {
          "type": "function",
          "dependencies": [],
          "location": 71,
          "isDeclaration": true
        },
        "handlePresetApply": {
          "type": "function",
          "dependencies": [],
          "location": 76,
          "isDeclaration": true
        },
        "newPoints": {
          "type": "call-result",
          "dependencies": [],
          "location": 235,
          "isDeclaration": true
        }
      },
      "hookUsage": [
        {
          "name": "useState",
          "location": 63,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 64,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 65,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 66,
          "arguments": [
            "number"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 67,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        },
        {
          "name": "useState",
          "location": 68,
          "arguments": [
            "boolean"
          ],
          "argumentCount": 1
        }
      ],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 84,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 107,
          "attributeName": "onClick"
        },
        {
          "eventType": "change",
          "handlerType": "variable",
          "location": 130,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "variable",
          "location": 141,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 154,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "function",
          "location": 165,
          "attributeName": "onChange"
        },
        {
          "eventType": "presetapply",
          "handlerType": "variable",
          "location": 179,
          "attributeName": "onPresetApply"
        },
        {
          "eventType": "change",
          "handlerType": "variable",
          "location": 188,
          "attributeName": "onChange"
        },
        {
          "eventType": "change",
          "handlerType": "variable",
          "location": 197,
          "attributeName": "onChange"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 212,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 230,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 291,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 302,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 305,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {
        "useState_63": {
          "type": "useState",
          "location": 63,
          "initialValue": "number"
        },
        "useState_64": {
          "type": "useState",
          "location": 64,
          "initialValue": "number"
        },
        "useState_65": {
          "type": "useState",
          "location": 65,
          "initialValue": "number"
        },
        "useState_66": {
          "type": "useState",
          "location": 66,
          "initialValue": "number"
        },
        "useState_67": {
          "type": "useState",
          "location": 67,
          "initialValue": "boolean"
        },
        "useState_68": {
          "type": "useState",
          "location": 68,
          "initialValue": "boolean"
        }
      },
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "metadata && null",
          "location": 117,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "value || null",
          "location": 158,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "value || null",
          "location": 169,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "points.filter": [
          {
            "chain": [
              "points",
              "filter"
            ],
            "location": 235,
            "argumentCount": 1
          }
        ],
        "Math.round": [
          {
            "chain": [
              "Math",
              "round"
            ],
            "location": 245,
            "argumentCount": 1
          },
          {
            "chain": [
              "Math",
              "round"
            ],
            "location": 245,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/components/Sidebar.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/StatusBar.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/StatusBar.tsx",
      "name": "StatusBar",
      "propsDeclared": [
        "currentTool",
        "pointsCount",
        "metadata",
        "sessionId",
        "isLoading"
      ],
      "propsUsedInBody": [
        "currentTool",
        "pointsCount",
        "sessionId",
        "metadata",
        "isLoading"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 1,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [],
          "referencedVariables": [
            "ToolType",
            "tool"
          ],
          "parameters": [
            "tool"
          ]
        },
        "getToolColor": [
          {
            "location": 67,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "getToolDisplayName": [
          {
            "location": 68,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "sessionId.slice": [
          {
            "location": 82,
            "context": "sessionId",
            "arguments": [
              "number",
              "number"
            ],
            "argumentCount": 2
          }
        ]
      },
      "variableReferences": {
        "sessionId": [
          {
            "property": "slice",
            "location": 82,
            "isComputed": false
          }
        ],
        "metadata": [
          {
            "property": "rows",
            "location": 90,
            "isComputed": false
          },
          {
            "property": "columns",
            "location": 90,
            "isComputed": false
          },
          {
            "property": "modality",
            "location": 92,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "StatusBar": {
          "type": "function",
          "dependencies": [],
          "location": 20,
          "isDeclaration": true
        },
        "getToolDisplayName": {
          "type": "function",
          "dependencies": [],
          "location": 27,
          "isDeclaration": true
        },
        "getToolColor": {
          "type": "function",
          "dependencies": [],
          "location": 44,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "sessionId && null",
          "location": 79,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "metadata && null",
          "location": 87,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "isLoading && null",
          "location": 97,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "sessionId.slice": [
          {
            "chain": [
              "sessionId",
              "slice"
            ],
            "location": 82,
            "argumentCount": 2
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/components/StatusBar.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Toolbar.tsx": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Toolbar.tsx",
      "name": "Toolbar",
      "propsDeclared": [
        "selectedTool",
        "onToolChange",
        "onSegment",
        "onClear",
        "onSave",
        "onUpload",
        "onHelp",
        "isLoading",
        "hasPoints",
        "hasImage"
      ],
      "propsUsedInBody": [
        "onUpload",
        "isLoading",
        "selectedTool",
        "onToolChange",
        "hasImage",
        "onSegment",
        "hasPoints",
        "onClear",
        "onSave",
        "onHelp"
      ],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 1,
      "cyclomaticComplexity": 1,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "onToolChange"
          ],
          "referencedVariables": [
            "onToolChange",
            "Tools"
          ],
          "parameters": []
        },
        "onToolChange": [
          {
            "location": 76,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 91,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 106,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "Tools": [
          {
            "property": "POSITIVE_POINT",
            "location": 74,
            "isComputed": false
          },
          {
            "property": "POSITIVE_POINT",
            "location": 76,
            "isComputed": false
          },
          {
            "property": "POSITIVE_POINT",
            "location": 79,
            "isComputed": false
          },
          {
            "property": "POSITIVE_POINT",
            "location": 80,
            "isComputed": false
          },
          {
            "property": "NEGATIVE_POINT",
            "location": 89,
            "isComputed": false
          },
          {
            "property": "NEGATIVE_POINT",
            "location": 91,
            "isComputed": false
          },
          {
            "property": "NEGATIVE_POINT",
            "location": 94,
            "isComputed": false
          },
          {
            "property": "NEGATIVE_POINT",
            "location": 95,
            "isComputed": false
          },
          {
            "property": "PAN",
            "location": 104,
            "isComputed": false
          },
          {
            "property": "PAN",
            "location": 106,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "Toolbar": {
          "type": "function",
          "dependencies": [],
          "location": 35,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 60,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 73,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 88,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "function",
          "location": 103,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 117,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 129,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 143,
          "attributeName": "onClick"
        },
        {
          "eventType": "click",
          "handlerType": "variable",
          "location": 154,
          "attributeName": "onClick"
        }
      ],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "null || isLoading",
          "location": 77,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || isLoading",
          "location": 92,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || isLoading",
          "location": 107,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || isLoading",
          "location": 121,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || isLoading",
          "location": 132,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "onHelp && null",
          "location": 152,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "null && null",
          "location": 168,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "hasImage && null && null",
          "location": 169,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "hasImage && null",
          "location": 169,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "hasImage && hasPoints && null && null",
          "location": 170,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "hasImage && hasPoints && null",
          "location": 170,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "hasImage && hasPoints",
          "location": 170,
          "operator": "&&"
        },
        {
          "type": "LogicalExpression",
          "condition": "isLoading && null",
          "location": 171,
          "operator": "&&"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/components/Toolbar.tsx"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts",
      "name": "api",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 3,
      "outDegree": 1,
      "cyclomaticComplexity": 0,
      "dependencies": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/FileUpload.tsx"
      ],
      "functionCalls": {
        "axios.create": [
          {
            "location": 10,
            "context": "axios",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "api.get"
          ],
          "referencedVariables": [
            "api",
            "sessionId",
            "response"
          ],
          "parameters": [
            "sessionId"
          ]
        },
        "console.log": [
          {
            "location": 21,
            "context": "console",
            "arguments": [
              "string",
              "unknown",
              "unknown"
            ],
            "argumentCount": 3
          },
          {
            "location": 33,
            "context": "console",
            "arguments": [
              "string",
              "unknown",
              "unknown"
            ],
            "argumentCount": 3
          }
        ],
        "console.error": [
          {
            "location": 25,
            "context": "console",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 37,
            "context": "console",
            "arguments": [
              "string",
              "unknown",
              "unknown"
            ],
            "argumentCount": 3
          }
        ],
        "Promise.reject": [
          {
            "location": 26,
            "context": "Promise",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 38,
            "context": "Promise",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "api.get": [
          {
            "location": 46,
            "context": "api",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 54,
            "context": "api",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 78,
            "context": "api",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 149,
            "context": "api",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "formData.append": [
          {
            "location": 63,
            "context": "formData",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "api.post": [
          {
            "location": 65,
            "context": "api",
            "arguments": [
              "string",
              "variable",
              "object"
            ],
            "argumentCount": 3
          },
          {
            "location": 90,
            "context": "api",
            "arguments": [
              "unknown",
              "unknown",
              "object"
            ],
            "argumentCount": 3
          },
          {
            "location": 105,
            "context": "api",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 115,
            "context": "api",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 127,
            "context": "api",
            "arguments": [
              "unknown",
              "object",
              "object"
            ],
            "argumentCount": 3
          }
        ],
        "api.delete": [
          {
            "location": 141,
            "context": "api",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "axios": [
          {
            "property": "create",
            "location": 10,
            "isComputed": false
          }
        ],
        "api": [
          {
            "property": "interceptors",
            "location": 19,
            "isComputed": false
          },
          {
            "property": "interceptors",
            "location": 31,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 46,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 54,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 65,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 78,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 90,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 105,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 115,
            "isComputed": false
          },
          {
            "property": "post",
            "location": 127,
            "isComputed": false
          },
          {
            "property": "delete",
            "location": 141,
            "isComputed": false
          },
          {
            "property": "get",
            "location": 149,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "log",
            "location": 21,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 25,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 33,
            "isComputed": false
          },
          {
            "property": "error",
            "location": 37,
            "isComputed": false
          }
        ],
        "config": [
          {
            "property": "method",
            "location": 21,
            "isComputed": false
          },
          {
            "property": "url",
            "location": 21,
            "isComputed": false
          }
        ],
        "Promise": [
          {
            "property": "reject",
            "location": 26,
            "isComputed": false
          },
          {
            "property": "reject",
            "location": 38,
            "isComputed": false
          }
        ],
        "response": [
          {
            "property": "status",
            "location": 33,
            "isComputed": false
          },
          {
            "property": "config",
            "location": 33,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 47,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 55,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 71,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 79,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 96,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 106,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 116,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 134,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 142,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 150,
            "isComputed": false
          }
        ],
        "error": [
          {
            "property": "response",
            "location": 37,
            "isComputed": false
          },
          {
            "property": "message",
            "location": 37,
            "isComputed": false
          }
        ],
        "formData": [
          {
            "property": "append",
            "location": 63,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "api": {
          "type": "call-result",
          "dependencies": [],
          "location": 10,
          "isDeclaration": true
        },
        "healthCheck": {
          "type": "function",
          "dependencies": [],
          "location": 45,
          "isDeclaration": true
        },
        "response": {
          "type": "unknown",
          "dependencies": [],
          "location": 149,
          "isDeclaration": true
        },
        "getSystemStatus": {
          "type": "function",
          "dependencies": [],
          "location": 53,
          "isDeclaration": true
        },
        "uploadDICOM": {
          "type": "function",
          "dependencies": [],
          "location": 61,
          "isDeclaration": true
        },
        "formData": {
          "type": "unknown",
          "dependencies": [],
          "location": 62,
          "isDeclaration": true
        },
        "getDICOMInfo": {
          "type": "function",
          "dependencies": [],
          "location": 77,
          "isDeclaration": true
        },
        "adjustWindowLevel": {
          "type": "function",
          "dependencies": [],
          "location": 85,
          "isDeclaration": true
        },
        "performSegmentation": {
          "type": "function",
          "dependencies": [],
          "location": 102,
          "isDeclaration": true
        },
        "refineMask": {
          "type": "function",
          "dependencies": [],
          "location": 112,
          "isDeclaration": true
        },
        "saveMask": {
          "type": "function",
          "dependencies": [],
          "location": 122,
          "isDeclaration": true
        },
        "cleanupSession": {
          "type": "function",
          "dependencies": [],
          "location": 140,
          "isDeclaration": true
        },
        "getSegmentationHistory": {
          "type": "function",
          "dependencies": [],
          "location": 148,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "axios.create": [
          {
            "chain": [
              "axios",
              "create"
            ],
            "location": 10,
            "argumentCount": 1
          }
        ],
        "api.interceptors.request.use": [
          {
            "chain": [
              "api",
              "interceptors",
              "request",
              "use"
            ],
            "location": 19,
            "argumentCount": 2
          }
        ],
        "console.log": [
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 21,
            "argumentCount": 3
          },
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 33,
            "argumentCount": 3
          }
        ],
        "console.error": [
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 25,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "error"
            ],
            "location": 37,
            "argumentCount": 3
          }
        ],
        "Promise.reject": [
          {
            "chain": [
              "Promise",
              "reject"
            ],
            "location": 26,
            "argumentCount": 1
          },
          {
            "chain": [
              "Promise",
              "reject"
            ],
            "location": 38,
            "argumentCount": 1
          }
        ],
        "api.interceptors.response.use": [
          {
            "chain": [
              "api",
              "interceptors",
              "response",
              "use"
            ],
            "location": 31,
            "argumentCount": 2
          }
        ],
        "api.get": [
          {
            "chain": [
              "api",
              "get"
            ],
            "location": 46,
            "argumentCount": 1
          },
          {
            "chain": [
              "api",
              "get"
            ],
            "location": 54,
            "argumentCount": 1
          },
          {
            "chain": [
              "api",
              "get"
            ],
            "location": 78,
            "argumentCount": 1
          },
          {
            "chain": [
              "api",
              "get"
            ],
            "location": 149,
            "argumentCount": 1
          }
        ],
        "formData.append": [
          {
            "chain": [
              "formData",
              "append"
            ],
            "location": 63,
            "argumentCount": 2
          }
        ],
        "api.post": [
          {
            "chain": [
              "api",
              "post"
            ],
            "location": 65,
            "argumentCount": 3
          },
          {
            "chain": [
              "api",
              "post"
            ],
            "location": 90,
            "argumentCount": 3
          },
          {
            "chain": [
              "api",
              "post"
            ],
            "location": 105,
            "argumentCount": 2
          },
          {
            "chain": [
              "api",
              "post"
            ],
            "location": 115,
            "argumentCount": 2
          },
          {
            "chain": [
              "api",
              "post"
            ],
            "location": 127,
            "argumentCount": 3
          }
        ],
        "api.delete": [
          {
            "chain": [
              "api",
              "delete"
            ],
            "location": 141,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "promise",
          "method": "reject",
          "location": 26
        },
        {
          "type": "promise",
          "method": "reject",
          "location": 38
        }
      ],
      "relativePath": "MedSegAssist/frontend/src/services/api.ts"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "name": "types",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 8,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImageCanvas.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/PatientInfo.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/StatusBar.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Toolbar.tsx",
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts"
      ],
      "functionCalls": {},
      "variableReferences": {},
      "dataFlow": {
        "ToolType": {
          "type": "unknown",
          "dependencies": [],
          "location": 56,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/types/index.ts"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/vite.config.ts": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/vite.config.ts",
      "name": "vite.config",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [],
      "functionCalls": {
        "defineConfig": [
          {
            "location": 5,
            "context": "",
            "arguments": [
              "object"
            ],
            "argumentCount": 1
          }
        ],
        "react": [
          {
            "location": 6,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ]
      },
      "variableReferences": {},
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/vite.config.ts"
    },
    "/Users/xiamuguizhi/code/autoCommit/src/extension.ts": {
      "id": "/Users/xiamuguizhi/code/autoCommit/src/extension.ts",
      "name": "extension",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 0,
      "outDegree": 2,
      "cyclomaticComplexity": 0,
      "dependencies": [
        "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts"
      ],
      "dependents": [],
      "functionCalls": {
        "activate": [],
        "activate_definition": {
          "internalCalls": [
            "setExtensionContext",
            "extensionLogic.init"
          ],
          "referencedVariables": [
            "vscode",
            "ExtensionContext",
            "setExtensionContext",
            "context",
            "ExtensionLogic",
            "extensionLogic",
            "autoCommit"
          ],
          "parameters": [
            "context"
          ]
        },
        "setExtensionContext": [
          {
            "location": 17,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "extensionLogic.init"
          ],
          "referencedVariables": [
            "ExtensionLogic",
            "context",
            "extensionLogic"
          ],
          "parameters": []
        },
        "extensionLogic.init": [
          {
            "location": 20,
            "context": "extensionLogic",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "deactivate": [],
        "deactivate_definition": {
          "internalCalls": [],
          "referencedVariables": [],
          "parameters": []
        }
      },
      "variableReferences": {
        "vscode": [
          {
            "property": "commands",
            "location": 18,
            "isComputed": false
          }
        ],
        "extensionLogic": [
          {
            "property": "init",
            "location": 20,
            "isComputed": false
          }
        ],
        "context": [
          {
            "property": "subscriptions",
            "location": 24,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "autoCommit": {
          "type": "call-result",
          "dependencies": [],
          "location": 18,
          "isDeclaration": true
        },
        "extensionLogic": {
          "type": "unknown",
          "dependencies": [],
          "location": 19,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "vscode.commands.registerCommand": [
          {
            "chain": [
              "vscode",
              "commands",
              "registerCommand"
            ],
            "location": 18,
            "argumentCount": 2
          }
        ],
        "extensionLogic.init": [
          {
            "chain": [
              "extensionLogic",
              "init"
            ],
            "location": 20,
            "argumentCount": 0
          }
        ],
        "context.subscriptions.push": [
          {
            "chain": [
              "context",
              "subscriptions",
              "push"
            ],
            "location": 24,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "autoCommit/src/extension.ts"
    },
    "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts": {
      "id": "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
      "name": "WebView",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 2,
      "outDegree": 2,
      "cyclomaticComplexity": 0,
      "dependencies": [
        "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "path.resolve"
          ],
          "referencedVariables": [
            "$1",
            "vscode",
            "path",
            "dirPath",
            "$2"
          ],
          "parameters": [
            "m",
            "$1",
            "$2"
          ]
        },
        "path.dirname": [
          {
            "location": 30,
            "context": "path",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "fs.readFileSync": [
          {
            "location": 32,
            "context": "fs",
            "arguments": [
              "variable",
              "string"
            ],
            "argumentCount": 2
          }
        ],
        "res.replace": [
          {
            "location": 34,
            "context": "res",
            "arguments": [
              "unknown",
              "function"
            ],
            "argumentCount": 2
          }
        ],
        "path.resolve": [
          {
            "location": 36,
            "context": "path",
            "arguments": [
              "variable",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "isProduction": [
          {
            "location": 61,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "path.join": [
          {
            "location": 70,
            "context": "path",
            "arguments": [
              "unknown",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 78,
            "context": "path",
            "arguments": [
              "unknown",
              "unknown"
            ],
            "argumentCount": 2
          }
        ],
        "getWebViewContent": [
          {
            "location": 82,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "showMessage": [
          {
            "location": 106,
            "context": "",
            "arguments": [
              "variable",
              "variable"
            ],
            "argumentCount": 2
          }
        ]
      },
      "variableReferences": {
        "path": [
          {
            "property": "dirname",
            "location": 30,
            "isComputed": false
          },
          {
            "property": "resolve",
            "location": 36,
            "isComputed": false
          },
          {
            "property": "join",
            "location": 70,
            "isComputed": false
          },
          {
            "property": "join",
            "location": 78,
            "isComputed": false
          }
        ],
        "fs": [
          {
            "property": "readFileSync",
            "location": 32,
            "isComputed": false
          }
        ],
        "res": [
          {
            "property": "replace",
            "location": 34,
            "isComputed": false
          }
        ],
        "vscode": [
          {
            "property": "Uri",
            "location": 36,
            "isComputed": false
          },
          {
            "property": "ViewColumn",
            "location": 58,
            "isComputed": false
          },
          {
            "property": "window",
            "location": 62,
            "isComputed": false
          },
          {
            "property": "Uri",
            "location": 69,
            "isComputed": false
          }
        ],
        "WebviewPanelOption": [
          {
            "property": "type",
            "location": 63,
            "isComputed": false
          },
          {
            "property": "title",
            "location": 64,
            "isComputed": false
          },
          {
            "property": "fileName",
            "location": 80,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "getWebViewContent": {
          "type": "function",
          "dependencies": [],
          "location": 29,
          "isDeclaration": true
        },
        "dirPath": {
          "type": "call-result",
          "dependencies": [
            "templatePath"
          ],
          "location": 30,
          "isDeclaration": true
        },
        "res": {
          "type": "unknown",
          "dependencies": [],
          "location": 32,
          "isDeclaration": true
        },
        "res_reassign_34": {
          "variable": "res",
          "type": "call-result",
          "dependencies": [],
          "location": 34,
          "isReassignment": true
        },
        "srcPath": {
          "type": "unknown",
          "dependencies": [],
          "location": 61,
          "isDeclaration": true
        },
        "htmlPath": {
          "type": "call-result",
          "dependencies": [],
          "location": 78,
          "isDeclaration": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [
        {
          "name": "constructor",
          "location": 51,
          "isAsync": false
        }
      ],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "content || null",
          "location": 32,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "path.dirname": [
          {
            "chain": [
              "path",
              "dirname"
            ],
            "location": 30,
            "argumentCount": 1
          }
        ],
        "fs.readFileSync": [
          {
            "chain": [
              "fs",
              "readFileSync"
            ],
            "location": 32,
            "argumentCount": 2
          }
        ],
        "res.replace": [
          {
            "chain": [
              "res",
              "replace"
            ],
            "location": 34,
            "argumentCount": 2
          }
        ],
        "vscode.Uri.file": [
          {
            "chain": [
              "vscode",
              "Uri",
              "file"
            ],
            "location": 36,
            "argumentCount": 1
          },
          {
            "chain": [
              "vscode",
              "Uri",
              "file"
            ],
            "location": 69,
            "argumentCount": 1
          }
        ],
        "path.resolve": [
          {
            "chain": [
              "path",
              "resolve"
            ],
            "location": 36,
            "argumentCount": 2
          }
        ],
        "vscode.window.createWebviewPanel": [
          {
            "chain": [
              "vscode",
              "window",
              "createWebviewPanel"
            ],
            "location": 62,
            "argumentCount": 4
          }
        ],
        "path.join": [
          {
            "chain": [
              "path",
              "join"
            ],
            "location": 70,
            "argumentCount": 2
          },
          {
            "chain": [
              "path",
              "join"
            ],
            "location": 78,
            "argumentCount": 2
          }
        ],
        "currentPanel.webview.onDidReceiveMessage": [
          {
            "chain": [
              "currentPanel",
              "webview",
              "onDidReceiveMessage"
            ],
            "location": 84,
            "argumentCount": 3
          }
        ],
        "handleMessage.bind": [
          {
            "chain": [
              "handleMessage",
              "bind"
            ],
            "location": 85,
            "argumentCount": 1
          }
        ],
        "currentPanel.dispose": [
          {
            "chain": [
              "currentPanel",
              "dispose"
            ],
            "location": 96,
            "argumentCount": 0
          }
        ],
        "currentPanel.webview.postMessage": [
          {
            "chain": [
              "currentPanel",
              "webview",
              "postMessage"
            ],
            "location": 116,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "promise",
          "method": "resolve",
          "location": 36
        }
      ],
      "relativePath": "autoCommit/src/models/WebView.ts"
    },
    "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts": {
      "id": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
      "name": "commitHandle",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 4,
      "cyclomaticComplexity": 0,
      "dependencies": [
        "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/util/util.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "outputLog",
            "reject",
            "resolve"
          ],
          "referencedVariables": [
            "error",
            "outputLog",
            "cmd",
            "stderr",
            "reject",
            "resolve",
            "stdout"
          ],
          "parameters": [
            "error",
            "stdout",
            "stderr"
          ]
        },
        "moment": [
          {
            "location": 38,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 40,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 45,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          },
          {
            "location": 165,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "beginDate.getTime": [
          {
            "location": 39,
            "context": "beginDate",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "endDate.getTime": [
          {
            "location": 41,
            "context": "endDate",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "parseInt": [
          {
            "location": 44,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "timeArr.push": [
          {
            "location": 46,
            "context": "timeArr",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "RandomNumber": [
          {
            "location": 54,
            "context": "",
            "arguments": [
              "number",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 55,
            "context": "",
            "arguments": [
              "number",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 58,
            "context": "",
            "arguments": [
              "number",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 60,
            "context": "",
            "arguments": [
              "number",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 60,
            "context": "",
            "arguments": [
              "number",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 268,
            "context": "",
            "arguments": [
              "number",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 308,
            "context": "",
            "arguments": [
              "number",
              "unknown"
            ],
            "argumentCount": 2
          }
        ],
        "getPanelWebview": [
          {
            "location": 85,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "getAllDay": [
          {
            "location": 93,
            "context": "",
            "arguments": [
              "unknown",
              "unknown"
            ],
            "argumentCount": 2
          }
        ],
        "detailTimeArr.forEach": [
          {
            "location": 95,
            "context": "detailTimeArr",
            "arguments": [
              "function"
            ],
            "argumentCount": 1
          }
        ],
        "Math.floor": [
          {
            "location": 143,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "Math.random": [
          {
            "location": 143,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "outputLog": [
          {
            "location": 149,
            "context": "",
            "arguments": [
              "string",
              "call-result"
            ],
            "argumentCount": 2
          },
          {
            "location": 150,
            "context": "",
            "arguments": [
              "string",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 151,
            "context": "",
            "arguments": [
              "string",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 189,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 196,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 214,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 215,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 227,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 231,
            "context": "",
            "arguments": [
              "string",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 238,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 241,
            "context": "",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 250,
            "context": "",
            "arguments": [
              "string",
              "unknown"
            ],
            "argumentCount": 2
          },
          {
            "location": 252,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 257,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 292,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          },
          {
            "location": 293,
            "context": "",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "JSON.stringify": [
          {
            "location": 149,
            "context": "JSON",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "getTodayRandomNumber": [
          {
            "location": 164,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "isProduction": [
          {
            "location": 169,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "setTimeout": [
          {
            "location": 195,
            "context": "",
            "arguments": [
              "function",
              "number"
            ],
            "argumentCount": 2
          },
          {
            "location": 220,
            "context": "",
            "arguments": [
              "variable",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "resolve": [
          {
            "location": 197,
            "context": "",
            "arguments": [
              "string"
            ],
            "argumentCount": 1
          },
          {
            "location": 297,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "console.log": [
          {
            "location": 203,
            "context": "console",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          },
          {
            "location": 204,
            "context": "console",
            "arguments": [
              "unknown",
              "variable"
            ],
            "argumentCount": 2
          }
        ],
        "getExtensionContext": [
          {
            "location": 249,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "fs.writeFileSync": [
          {
            "location": 273,
            "context": "fs",
            "arguments": [
              "unknown",
              "variable",
              "string"
            ],
            "argumentCount": 3
          }
        ],
        "exec": [
          {
            "location": 284,
            "context": "",
            "arguments": [
              "variable",
              "object",
              "function"
            ],
            "argumentCount": 3
          }
        ],
        "reject": [
          {
            "location": 294,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ]
      },
      "variableReferences": {
        "beginDate": [
          {
            "property": "getTime",
            "location": 39,
            "isComputed": false
          }
        ],
        "endDate": [
          {
            "property": "getTime",
            "location": 41,
            "isComputed": false
          }
        ],
        "timeArr": [
          {
            "property": "push",
            "location": 46,
            "isComputed": false
          }
        ],
        "message": [
          {
            "property": "data",
            "location": 79,
            "isComputed": false
          },
          {
            "property": "data",
            "location": 80,
            "isComputed": false
          }
        ],
        "item": [
          {
            "property": "value",
            "location": 93,
            "isComputed": false
          },
          {
            "property": "value",
            "location": 93,
            "isComputed": false
          },
          {
            "property": "commitNumber",
            "location": 102,
            "isComputed": false
          },
          {
            "property": "commitNumber",
            "location": 161,
            "isComputed": false
          },
          {
            "property": "value",
            "location": 164,
            "isComputed": false
          }
        ],
        "detailTimeArr": [
          {
            "property": "forEach",
            "location": 95,
            "isComputed": false
          }
        ],
        "element": [
          {
            "property": "value",
            "location": 96,
            "isComputed": false
          }
        ],
        "item1": [
          {
            "property": "value",
            "location": 117,
            "isComputed": false
          }
        ],
        "item2": [
          {
            "property": "value",
            "location": 118,
            "isComputed": false
          }
        ],
        "dateArr1": [
          {
            "property": "computed",
            "location": 119,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 120,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 122,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 125,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 128,
            "isComputed": true
          }
        ],
        "dateArr2": [
          {
            "property": "computed",
            "location": 119,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 120,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 122,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 125,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 128,
            "isComputed": true
          }
        ],
        "Math": [
          {
            "property": "floor",
            "location": 143,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 143,
            "isComputed": false
          }
        ],
        "JSON": [
          {
            "property": "stringify",
            "location": 149,
            "isComputed": false
          }
        ],
        "console": [
          {
            "property": "log",
            "location": 203,
            "isComputed": false
          },
          {
            "property": "log",
            "location": 204,
            "isComputed": false
          }
        ],
        "fs": [
          {
            "property": "writeFileSync",
            "location": 273,
            "isComputed": false
          }
        ],
        "process": [
          {
            "property": "env",
            "location": 288,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {
        "getAllDay": {
          "type": "function",
          "dependencies": [],
          "location": 36,
          "isDeclaration": true
        },
        "timeArr": {
          "type": "array",
          "dependencies": [],
          "location": 37,
          "isDeclaration": true
        },
        "beginDate": {
          "type": "call-result",
          "dependencies": [],
          "location": 38,
          "isDeclaration": true
        },
        "beginNumber": {
          "type": "call-result",
          "dependencies": [],
          "location": 39,
          "isDeclaration": true
        },
        "endDate": {
          "type": "call-result",
          "dependencies": [],
          "location": 40,
          "isDeclaration": true
        },
        "endNumber": {
          "type": "call-result",
          "dependencies": [],
          "location": 41,
          "isDeclaration": true
        },
        "k": {
          "type": "variable",
          "dependencies": [
            "beginNumber"
          ],
          "location": 42,
          "isDeclaration": true
        },
        "day": {
          "type": "unknown",
          "dependencies": [],
          "location": 44,
          "isDeclaration": true
        },
        "dayFormat": {
          "type": "call-result",
          "dependencies": [],
          "location": 45,
          "isDeclaration": true
        },
        "k_reassign_47": {
          "variable": "k",
          "type": "unknown",
          "dependencies": [],
          "location": 47,
          "isReassignment": true
        },
        "getTodayRandomNumber": {
          "type": "function",
          "dependencies": [],
          "location": 53,
          "isDeclaration": true
        },
        "hour1": {
          "type": "call-result",
          "dependencies": [
            "RandomNumber"
          ],
          "location": 54,
          "isDeclaration": true
        },
        "hour2": {
          "type": "call-result",
          "dependencies": [
            "RandomNumber"
          ],
          "location": 55,
          "isDeclaration": true
        },
        "hour2_reassign_58": {
          "variable": "hour2",
          "type": "call-result",
          "dependencies": [
            "RandomNumber"
          ],
          "location": 58,
          "isReassignment": true
        },
        "minute": {
          "type": "unknown",
          "dependencies": [],
          "location": 60,
          "isDeclaration": true
        },
        "hour": {
          "type": "unknown",
          "dependencies": [],
          "location": 61,
          "isDeclaration": true
        },
        "detailTimeArr": {
          "type": "call-result",
          "dependencies": [
            "getAllDay"
          ],
          "location": 93,
          "isDeclaration": true
        },
        "index": {
          "type": "call-result",
          "dependencies": [],
          "location": 96,
          "isDeclaration": true
        },
        "dayCommitNumber": {
          "type": "unknown",
          "dependencies": [],
          "location": 305,
          "isDeclaration": true
        },
        "dateArr1": {
          "type": "call-result",
          "dependencies": [],
          "location": 117,
          "isDeclaration": true
        },
        "dateArr2": {
          "type": "call-result",
          "dependencies": [],
          "location": 118,
          "isDeclaration": true
        },
        "i": {
          "type": "number",
          "dependencies": [],
          "location": 162,
          "isDeclaration": true
        },
        "i_reassign_142": {
          "variable": "i",
          "type": "number",
          "dependencies": [],
          "location": 142,
          "isReassignment": true
        },
        "ranDomNum": {
          "type": "call-result",
          "dependencies": [],
          "location": 143,
          "isDeclaration": true
        },
        "totalNum": {
          "type": "number",
          "dependencies": [],
          "location": 152,
          "isDeclaration": true
        },
        "reg": {
          "type": "unknown",
          "dependencies": [],
          "location": 154,
          "isDeclaration": true
        },
        "item": {
          "type": "undefined",
          "dependencies": [],
          "location": 158,
          "isDeclaration": true
        },
        "i_reassign_162": {
          "variable": "i",
          "type": "number",
          "dependencies": [],
          "location": 162,
          "isReassignment": true
        },
        "time": {
          "type": "call-result",
          "dependencies": [
            "getTodayRandomNumber",
            "item"
          ],
          "location": 164,
          "isDeclaration": true
        },
        "time_reassign_165": {
          "variable": "time",
          "type": "call-result",
          "dependencies": [],
          "location": 165,
          "isReassignment": true
        },
        "commitContent": {
          "type": "unknown",
          "dependencies": [],
          "location": 268,
          "isDeclaration": true
        },
        "commitMsg": {
          "type": "undefined",
          "dependencies": [],
          "location": 167,
          "isDeclaration": true
        },
        "isDebug": {
          "type": "boolean",
          "dependencies": [],
          "location": 168,
          "isDeclaration": true
        },
        "commitCmd": {
          "type": "string",
          "dependencies": [],
          "location": 173,
          "isDeclaration": true
        },
        "commitMsg_reassign_176": {
          "variable": "commitMsg",
          "type": "unknown",
          "dependencies": [],
          "location": 176,
          "isReassignment": true
        },
        "cmd": {
          "type": "unknown",
          "dependencies": [],
          "location": 239,
          "isDeclaration": true
        },
        "commitMsg_reassign_187": {
          "variable": "commitMsg",
          "type": "unknown",
          "dependencies": [],
          "location": 187,
          "isReassignment": true
        },
        "totalNum_reassign_201": {
          "variable": "totalNum",
          "type": "number",
          "dependencies": [],
          "location": 201,
          "isReassignment": true
        },
        "commitNumberBig": {
          "type": "number",
          "dependencies": [],
          "location": 211,
          "isDeclaration": true
        },
        "thinkNumber": {
          "type": "number",
          "dependencies": [],
          "location": 212,
          "isDeclaration": true
        },
        "thinkNumber_reassign_217": {
          "variable": "thinkNumber",
          "type": "number",
          "dependencies": [],
          "location": 217,
          "isReassignment": true
        },
        "res": {
          "type": "unknown",
          "dependencies": [],
          "location": 230,
          "isDeclaration": true
        },
        "p": {
          "type": "unknown",
          "dependencies": [],
          "location": 240,
          "isDeclaration": true
        },
        "dayCommitNumber_reassign_308": {
          "variable": "dayCommitNumber",
          "type": "call-result",
          "dependencies": [
            "RandomNumber"
          ],
          "location": 308,
          "isReassignment": true
        },
        "dayCommitNumber_reassign_313": {
          "variable": "dayCommitNumber",
          "type": "variable",
          "dependencies": [
            "commitNumber"
          ],
          "location": 313,
          "isReassignment": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [
        {
          "name": "constructor",
          "location": 78,
          "isAsync": false
        }
      ],
      "conditionalRendering": [
        {
          "type": "LogicalExpression",
          "condition": "scopeDay < null || noCommitDay < null",
          "location": 139,
          "operator": "||"
        },
        {
          "type": "LogicalExpression",
          "condition": "null || null",
          "location": 169,
          "operator": "||"
        }
      ],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "beginDate.getTime": [
          {
            "chain": [
              "beginDate",
              "getTime"
            ],
            "location": 39,
            "argumentCount": 0
          }
        ],
        "endDate.getTime": [
          {
            "chain": [
              "endDate",
              "getTime"
            ],
            "location": 41,
            "argumentCount": 0
          }
        ],
        "timeArr.push": [
          {
            "chain": [
              "timeArr",
              "push"
            ],
            "location": 46,
            "argumentCount": 1
          },
          {
            "chain": [
              "timeArr",
              "push"
            ],
            "location": 104,
            "argumentCount": 1
          }
        ],
        "paramsObj.timeArr.forEach": [
          {
            "chain": [
              "paramsObj",
              "timeArr",
              "forEach"
            ],
            "location": 91,
            "argumentCount": 1
          }
        ],
        "detailTimeArr.forEach": [
          {
            "chain": [
              "detailTimeArr",
              "forEach"
            ],
            "location": 95,
            "argumentCount": 1
          }
        ],
        "timeArr.findIndex": [
          {
            "chain": [
              "timeArr",
              "findIndex"
            ],
            "location": 96,
            "argumentCount": 1
          }
        ],
        "timeArr.splice": [
          {
            "chain": [
              "timeArr",
              "splice"
            ],
            "location": 99,
            "argumentCount": 2
          },
          {
            "chain": [
              "timeArr",
              "splice"
            ],
            "location": 144,
            "argumentCount": 2
          }
        ],
        "timeArr.sort": [
          {
            "chain": [
              "timeArr",
              "sort"
            ],
            "location": 115,
            "argumentCount": 1
          }
        ],
        "item1.value.split": [
          {
            "chain": [
              "item1",
              "value",
              "split"
            ],
            "location": 117,
            "argumentCount": 1
          }
        ],
        "item2.value.split": [
          {
            "chain": [
              "item2",
              "value",
              "split"
            ],
            "location": 118,
            "argumentCount": 1
          }
        ],
        "Math.floor": [
          {
            "chain": [
              "Math",
              "floor"
            ],
            "location": 143,
            "argumentCount": 1
          }
        ],
        "Math.random": [
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 143,
            "argumentCount": 0
          }
        ],
        "JSON.stringify": [
          {
            "chain": [
              "JSON",
              "stringify"
            ],
            "location": 149,
            "argumentCount": 1
          }
        ],
        "paramsObj.itemSrc.replace": [
          {
            "chain": [
              "paramsObj",
              "itemSrc",
              "replace"
            ],
            "location": 155,
            "argumentCount": 2
          }
        ],
        "timeArr.values": [
          {
            "chain": [
              "timeArr",
              "values"
            ],
            "location": 158,
            "argumentCount": 0
          }
        ],
        "console.log": [
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 203,
            "argumentCount": 2
          },
          {
            "chain": [
              "console",
              "log"
            ],
            "location": 204,
            "argumentCount": 2
          }
        ],
        "autoCommitView.postMessage": [
          {
            "chain": [
              "autoCommitView",
              "postMessage"
            ],
            "location": 228,
            "argumentCount": 2
          },
          {
            "chain": [
              "autoCommitView",
              "postMessage"
            ],
            "location": 237,
            "argumentCount": 2
          },
          {
            "chain": [
              "autoCommitView",
              "postMessage"
            ],
            "location": 248,
            "argumentCount": 2
          }
        ],
        "globalState.update": [
          {
            "chain": [
              "globalState",
              "update"
            ],
            "location": 249,
            "argumentCount": 2
          }
        ],
        "fs.writeFileSync": [
          {
            "chain": [
              "fs",
              "writeFileSync"
            ],
            "location": 273,
            "argumentCount": 3
          }
        ]
      },
      "asyncOperations": [
        {
          "type": "timer",
          "method": "setTimeout",
          "location": 195
        },
        {
          "type": "timer",
          "method": "setTimeout",
          "location": 220
        }
      ],
      "relativePath": "autoCommit/src/models/commitHandle.ts"
    },
    "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts": {
      "id": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
      "name": "models",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 4,
      "cyclomaticComplexity": 0,
      "dependencies": [
        "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts"
      ],
      "dependents": [
        "/Users/xiamuguizhi/code/autoCommit/src/extension.ts"
      ],
      "functionCalls": {
        "anonymous": [],
        "anonymous_definition": {
          "internalCalls": [
            "fs.statSync"
          ],
          "referencedVariables": [
            "itemSrc",
            "sep",
            "fs",
            "url",
            "isDirectory"
          ],
          "parameters": [
            "itemSrc"
          ]
        },
        "fs.statSync": [
          {
            "location": 21,
            "context": "fs",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "setPanelWebview": [
          {
            "location": 48,
            "context": "",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "isProduction": [
          {
            "location": 59,
            "context": "",
            "arguments": [],
            "argumentCount": 0
          }
        ],
        "hasGit": [
          {
            "location": 89,
            "context": "",
            "arguments": [
              "variable"
            ],
            "argumentCount": 1
          }
        ],
        "outputLog": [
          {
            "location": 93,
            "context": "",
            "arguments": [
              "string",
              "unknown"
            ],
            "argumentCount": 2
          }
        ]
      },
      "variableReferences": {
        "fs": [
          {
            "property": "statSync",
            "location": 21,
            "isComputed": false
          }
        ],
        "message": [
          {
            "property": "command",
            "location": 66,
            "isComputed": false
          },
          {
            "property": "command",
            "location": 68,
            "isComputed": false
          },
          {
            "property": "command",
            "location": 70,
            "isComputed": false
          }
        ],
        "vscode": [
          {
            "property": "window",
            "location": 77,
            "isComputed": false
          }
        ],
        "urlArr": [
          {
            "property": "computed",
            "location": 83,
            "isComputed": true
          },
          {
            "property": "computed",
            "location": 86,
            "isComputed": true
          }
        ]
      },
      "dataFlow": {
        "hasGit": {
          "type": "function",
          "dependencies": [],
          "location": 18,
          "isDeclaration": true
        },
        "url": {
          "type": "unknown",
          "dependencies": [],
          "location": 19,
          "isDeclaration": true
        },
        "isDirectory": {
          "type": "call-result",
          "dependencies": [],
          "location": 21,
          "isDeclaration": true
        },
        "option": {
          "type": "object",
          "dependencies": [],
          "location": 53,
          "isDeclaration": true
        },
        "formData": {
          "type": "call-result",
          "dependencies": [],
          "location": 60,
          "isDeclaration": true
        },
        "urlArr": {
          "type": "unknown",
          "dependencies": [],
          "location": 77,
          "isDeclaration": true
        },
        "itemSrc": {
          "type": "unknown",
          "dependencies": [],
          "location": 83,
          "isDeclaration": true
        },
        "itemSrc_reassign_86": {
          "variable": "itemSrc",
          "type": "unknown",
          "dependencies": [],
          "location": 86,
          "isReassignment": true
        }
      },
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [
        {
          "name": "constructor",
          "location": 38,
          "isAsync": false
        }
      ],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "fs.statSync": [
          {
            "chain": [
              "fs",
              "statSync"
            ],
            "location": 21,
            "argumentCount": 1
          }
        ],
        "messageCallBack.bind": [
          {
            "chain": [
              "messageCallBack",
              "bind"
            ],
            "location": 46,
            "argumentCount": 1
          }
        ],
        "autoCommitView.create": [
          {
            "chain": [
              "autoCommitView",
              "create"
            ],
            "location": 58,
            "argumentCount": 1
          }
        ],
        "autoCommitView.postMessage": [
          {
            "chain": [
              "autoCommitView",
              "postMessage"
            ],
            "location": 59,
            "argumentCount": 2
          },
          {
            "chain": [
              "autoCommitView",
              "postMessage"
            ],
            "location": 61,
            "argumentCount": 2
          },
          {
            "chain": [
              "autoCommitView",
              "postMessage"
            ],
            "location": 90,
            "argumentCount": 2
          },
          {
            "chain": [
              "autoCommitView",
              "postMessage"
            ],
            "location": 92,
            "argumentCount": 2
          }
        ],
        "context.globalState.get": [
          {
            "chain": [
              "context",
              "globalState",
              "get"
            ],
            "location": 60,
            "argumentCount": 1
          }
        ],
        "CommitHandle.closeCommit": [
          {
            "chain": [
              "CommitHandle",
              "closeCommit"
            ],
            "location": 71,
            "argumentCount": 0
          }
        ],
        "vscode.window.showOpenDialog": [
          {
            "chain": [
              "vscode",
              "window",
              "showOpenDialog"
            ],
            "location": 77,
            "argumentCount": 1
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "autoCommit/src/models/index.ts"
    },
    "/Users/xiamuguizhi/code/autoCommit/src/util/util.ts": {
      "id": "/Users/xiamuguizhi/code/autoCommit/src/util/util.ts",
      "name": "util",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts"
      ],
      "functionCalls": {
        "RandomNumber": [],
        "RandomNumber_definition": {
          "internalCalls": [
            "Math.round",
            "Math.random"
          ],
          "referencedVariables": [
            "Math",
            "max",
            "min"
          ],
          "parameters": [
            "min",
            "max"
          ]
        },
        "Math.round": [
          {
            "location": 19,
            "context": "Math",
            "arguments": [
              "unknown"
            ],
            "argumentCount": 1
          }
        ],
        "Math.random": [
          {
            "location": 19,
            "context": "Math",
            "arguments": [],
            "argumentCount": 0
          }
        ]
      },
      "variableReferences": {
        "Math": [
          {
            "property": "round",
            "location": 19,
            "isComputed": false
          },
          {
            "property": "random",
            "location": 19,
            "isComputed": false
          }
        ]
      },
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {
        "Math.round": [
          {
            "chain": [
              "Math",
              "round"
            ],
            "location": 19,
            "argumentCount": 1
          }
        ],
        "Math.random": [
          {
            "chain": [
              "Math",
              "random"
            ],
            "location": 19,
            "argumentCount": 0
          }
        ]
      },
      "asyncOperations": [],
      "relativePath": "autoCommit/src/util/util.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.css": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.css",
      "name": "App",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 2,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx"
      ],
      "functionCalls": {},
      "variableReferences": {},
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/App.css"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts",
      "name": "types",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 3,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/hooks/useApi.ts",
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/services/api.ts"
      ],
      "functionCalls": {},
      "variableReferences": {},
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/react-demo/src/types/index.ts"
    },
    "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/types/index.ts": {
      "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/types/index.ts",
      "name": "types",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/services/api.ts"
      ],
      "functionCalls": {},
      "variableReferences": {},
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "Dependency-Analyzer/examples/vue-demo/src/types/index.ts"
    },
    "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.css": {
      "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.css",
      "name": "App",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 1,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx"
      ],
      "functionCalls": {},
      "variableReferences": {},
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "MedSegAssist/frontend/src/App.css"
    },
    "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts": {
      "id": "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
      "name": "vscodeUtil",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 4,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/autoCommit/src/extension.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts"
      ],
      "functionCalls": {},
      "variableReferences": {},
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "autoCommit/src/util/vscodeUtil.ts"
    },
    "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts": {
      "id": "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts",
      "name": "dataStatement",
      "propsDeclared": [],
      "propsUsedInBody": [],
      "unusedProps": [],
      "inDegree": 3,
      "outDegree": 0,
      "cyclomaticComplexity": 0,
      "dependencies": [],
      "dependents": [
        "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
        "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts"
      ],
      "functionCalls": {},
      "variableReferences": {},
      "dataFlow": {},
      "hookUsage": [],
      "eventHandlers": [],
      "stateManagement": {},
      "componentLifecycle": [],
      "conditionalRendering": [],
      "dynamicImports": [],
      "contextUsage": [],
      "methodChains": {},
      "asyncOperations": [],
      "relativePath": "autoCommit/src/util/dataStatement.ts"
    }
  },
  "edges": [
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "Button"
          }
        ],
        "source": "./components/Button",
        "usage": {
          "count": 4,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Card.jsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "Card"
          }
        ],
        "source": "./components/Card",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.css",
      "metadata": {
        "importSpecifiers": [],
        "source": "./App.css"
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "Task",
            "local": "Task"
          },
          {
            "type": "named",
            "imported": "User",
            "local": "User"
          },
          {
            "type": "named",
            "imported": "CreateTaskDto",
            "local": "CreateTaskDto"
          },
          {
            "type": "named",
            "imported": "CreateUserDto",
            "local": "CreateUserDto"
          },
          {
            "type": "named",
            "imported": "AppState",
            "local": "AppState"
          }
        ],
        "source": "./types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/services/api.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "taskService",
            "local": "taskService"
          },
          {
            "type": "named",
            "imported": "userService",
            "local": "userService"
          }
        ],
        "source": "./services/api",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/hooks/useApi.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "useApi",
            "local": "useApi"
          },
          {
            "type": "named",
            "imported": "useAsyncOperation",
            "local": "useAsyncOperation"
          },
          {
            "type": "named",
            "imported": "useList",
            "local": "useList"
          }
        ],
        "source": "./hooks/useApi",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.css",
      "metadata": {
        "importSpecifiers": [],
        "source": "./App.css",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Card.jsx",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "Button"
          }
        ],
        "source": "./Button",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/hooks/useApi.ts",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "ApiResponse",
            "local": "ApiResponse"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/services/api.ts",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "Task",
            "local": "Task"
          },
          {
            "type": "named",
            "imported": "CreateTaskDto",
            "local": "CreateTaskDto"
          },
          {
            "type": "named",
            "imported": "UpdateTaskDto",
            "local": "UpdateTaskDto"
          },
          {
            "type": "named",
            "imported": "User",
            "local": "User"
          },
          {
            "type": "named",
            "imported": "CreateUserDto",
            "local": "CreateUserDto"
          },
          {
            "type": "named",
            "imported": "UpdateUserDto",
            "local": "UpdateUserDto"
          },
          {
            "type": "named",
            "imported": "ApiResponse",
            "local": "ApiResponse"
          },
          {
            "type": "named",
            "imported": "PaginatedResponse",
            "local": "PaginatedResponse"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/services/api.ts",
      "target": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "Task",
            "local": "Task"
          },
          {
            "type": "named",
            "imported": "CreateTaskDto",
            "local": "CreateTaskDto"
          },
          {
            "type": "named",
            "imported": "UpdateTaskDto",
            "local": "UpdateTaskDto"
          },
          {
            "type": "named",
            "imported": "User",
            "local": "User"
          },
          {
            "type": "named",
            "imported": "CreateUserDto",
            "local": "CreateUserDto"
          },
          {
            "type": "named",
            "imported": "UpdateUserDto",
            "local": "UpdateUserDto"
          },
          {
            "type": "named",
            "imported": "ApiResponse",
            "local": "ApiResponse"
          },
          {
            "type": "named",
            "imported": "PaginatedResponse",
            "local": "PaginatedResponse"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Toolbar.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "Toolbar"
          }
        ],
        "source": "./components/Toolbar",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImageCanvas.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "ImageCanvas"
          }
        ],
        "source": "./components/ImageCanvas",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/FileUpload.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "FileUpload"
          }
        ],
        "source": "./components/FileUpload"
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "DICOMUploader"
          }
        ],
        "source": "./components/DICOMUploader",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/StatusBar.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "StatusBar"
          }
        ],
        "source": "./components/StatusBar",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/HelpPanel.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "HelpPanel"
          }
        ],
        "source": "./components/HelpPanel",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "Sidebar"
          }
        ],
        "source": "./components/Sidebar",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/QuickActions.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "QuickActions"
          }
        ],
        "source": "./components/QuickActions",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "performSegmentation",
            "local": "performSegmentation"
          }
        ],
        "source": "./services/api"
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "ToolType",
            "local": "Tools"
          }
        ],
        "source": "./types"
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.css",
      "metadata": {
        "importSpecifiers": [],
        "source": "./App.css"
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "uploadDICOM",
            "local": "uploadDICOM"
          }
        ],
        "source": "../services/api",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "DICOMMetadata",
            "local": "DICOMMetadata"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/FileUpload.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "uploadDICOM",
            "local": "uploadDICOM"
          }
        ],
        "source": "../services/api",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImageCanvas.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "ToolType",
            "local": "Tools"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/PatientInfo.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "DICOMMetadata",
            "local": "DICOMMetadata"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "DICOMMetadata",
            "local": "DICOMMetadata"
          },
          {
            "type": "named",
            "imported": "Point",
            "local": "Point"
          }
        ],
        "source": "../types"
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImagePresets.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "ImagePresets"
          }
        ],
        "source": "./ImagePresets",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/PatientInfo.tsx",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "PatientInfo"
          }
        ],
        "source": "./PatientInfo",
        "usage": {
          "count": 1,
          "props": {}
        }
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/StatusBar.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "ToolType",
            "local": "ToolType"
          },
          {
            "type": "named",
            "imported": "DICOMMetadata",
            "local": "DICOMMetadata"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Toolbar.tsx",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "ToolType",
            "local": "Tools"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts",
      "target": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "UploadResponse",
            "local": "UploadResponse"
          },
          {
            "type": "named",
            "imported": "SegmentationRequest",
            "local": "SegmentationRequest"
          },
          {
            "type": "named",
            "imported": "SegmentationResult",
            "local": "SegmentationResult"
          }
        ],
        "source": "../types",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/extension.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "ExtensionLogic"
          }
        ],
        "source": "./models/index",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/extension.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "setExtensionContext",
            "local": "setExtensionContext"
          }
        ],
        "source": "./util/vscodeUtil",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "showMessage",
            "local": "showMessage"
          },
          {
            "type": "named",
            "imported": "isProduction",
            "local": "isProduction"
          }
        ],
        "source": "../util/vscodeUtil",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "WebviewMsg",
            "local": "WebviewMsg"
          }
        ],
        "source": "../util/dataStatement",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "WebviewMsg",
            "local": "WebviewMsg"
          }
        ],
        "source": "../util/dataStatement",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/util/util.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "RandomNumber",
            "local": "RandomNumber"
          }
        ],
        "source": "../util/util",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "getPanelWebview",
            "local": "getPanelWebview"
          },
          {
            "type": "named",
            "imported": "outputLog",
            "local": "outputLog"
          },
          {
            "type": "named",
            "imported": "isProduction",
            "local": "isProduction"
          },
          {
            "type": "named",
            "imported": "getExtensionContext",
            "local": "getExtensionContext"
          }
        ],
        "source": "../util/vscodeUtil",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "WebView"
          }
        ],
        "source": "./WebView",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "WebView"
          }
        ],
        "source": "./WebView",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "WebviewMsg",
            "local": "WebviewMsg"
          }
        ],
        "source": "../util/dataStatement",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "named",
            "imported": "setPanelWebview",
            "local": "setPanelWebview"
          },
          {
            "type": "named",
            "imported": "isProduction",
            "local": "isProduction"
          },
          {
            "type": "named",
            "imported": "outputLog",
            "local": "outputLog"
          }
        ],
        "source": "../util/vscodeUtil",
        "usage": null
      }
    },
    {
      "source": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
      "target": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
      "metadata": {
        "importSpecifiers": [
          {
            "type": "default",
            "local": "CommitHandle"
          }
        ],
        "source": "./commitHandle",
        "usage": null
      }
    }
  ],
  "metadata": {
    "nodeCount": 40,
    "edgeCount": 45,
    "density": 0.028846153846153848,
    "degreeDistribution": {
      "inDegree": {
        "min": 0,
        "max": 8,
        "mean": 1.125,
        "median": 1,
        "std": 1.4694812009685594
      },
      "outDegree": {
        "min": 0,
        "max": 11,
        "mean": 1.125,
        "median": 0,
        "std": 1.9898178308578904
      },
      "totalDegree": {
        "min": 0,
        "max": 11,
        "mean": 2.25,
        "median": 2,
        "std": 2.2332711434127295
      }
    },
    "isolatedNodes": [
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.component.ts",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.module.ts",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/task.service.ts",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/user.service.ts",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/main.ts",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/test-upload.js",
      "/Users/xiamuguizhi/code/MedSegAssist/frontend/eslint.config.js",
      "/Users/xiamuguizhi/code/MedSegAssist/frontend/vite.config.ts"
    ],
    "leafNodes": [
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx",
      "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/HelpPanel.tsx",
      "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImagePresets.tsx",
      "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/QuickActions.tsx",
      "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
      "/Users/xiamuguizhi/code/autoCommit/src/util/util.ts",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.css",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/types/index.ts",
      "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.css",
      "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
      "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts"
    ],
    "rootNodes": [
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
      "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/services/api.ts",
      "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
      "/Users/xiamuguizhi/code/autoCommit/src/extension.ts"
    ],
    "connectedComponents": 13,
    "largestComponentSize": 14,
    "generatedAt": "2025-10-15T06:19:15.664Z",
    "projectPath": "/Users/xiamuguizhi/code",
    "framework": "react"
  },
  "analysis": {
    "summary": {
      "totalComponents": 40,
      "totalDependencies": 45,
      "orphanCount": 14,
      "unusedPropsCount": 4,
      "circularDependenciesCount": 0,
      "deadCodeCount": 11,
      "density": 0.028846153846153848
    },
    "orphanComponents": [
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
        "name": "App",
        "outDegree": 11,
        "reason": "entry_point"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
        "name": "App",
        "outDegree": 4,
        "reason": "entry_point"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
        "name": "App",
        "outDegree": 3,
        "reason": "entry_point"
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/extension.ts",
        "name": "extension",
        "outDegree": 2,
        "reason": "entry_point"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/services/api.ts",
        "name": "api",
        "outDegree": 1,
        "reason": "entry_point"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.component.ts",
        "name": "app.component",
        "outDegree": 0,
        "reason": "isolated"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.module.ts",
        "name": "app.module",
        "outDegree": 0,
        "reason": "isolated"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/task.service.ts",
        "name": "task.service",
        "outDegree": 0,
        "reason": "isolated"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/user.service.ts",
        "name": "user.service",
        "outDegree": 0,
        "reason": "isolated"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx",
        "name": "OrphanComponent",
        "outDegree": 0,
        "reason": "isolated"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/main.ts",
        "name": "main",
        "outDegree": 0,
        "reason": "isolated"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/test-upload.js",
        "name": "test-upload",
        "outDegree": 0,
        "reason": "isolated"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/eslint.config.js",
        "name": "eslint.config",
        "outDegree": 0,
        "reason": "isolated"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/vite.config.ts",
        "name": "vite.config",
        "outDegree": 0,
        "reason": "isolated"
      }
    ],
    "unusedProps": [
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx",
        "name": "OrphanComponent",
        "unusedProps": [
          "unusedProp1",
          "unusedProp2",
          "unusedProp3"
        ],
        "totalProps": 6,
        "usageRate": 50
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx",
        "name": "Button",
        "unusedProps": [
          "unusedProp"
        ],
        "totalProps": 7,
        "usageRate": 85.71428571428571
      }
    ],
    "circularDependencies": [],
    "componentComplexity": [
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
        "name": "App",
        "complexity": 22,
        "inDegree": 0,
        "outDegree": 11,
        "propsCount": 0,
        "category": "very_high"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
        "name": "types",
        "complexity": 12,
        "inDegree": 8,
        "outDegree": 0,
        "propsCount": 0,
        "category": "medium"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Sidebar.tsx",
        "name": "Sidebar",
        "complexity": 11.5,
        "inDegree": 1,
        "outDegree": 3,
        "propsCount": 8,
        "category": "medium"
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
        "name": "commitHandle",
        "complexity": 9.5,
        "inDegree": 1,
        "outDegree": 4,
        "propsCount": 0,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
        "name": "models",
        "complexity": 9.5,
        "inDegree": 1,
        "outDegree": 4,
        "propsCount": 0,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/Toolbar.tsx",
        "name": "Toolbar",
        "complexity": 8.5,
        "inDegree": 1,
        "outDegree": 1,
        "propsCount": 10,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.tsx",
        "name": "App",
        "complexity": 8,
        "inDegree": 0,
        "outDegree": 4,
        "propsCount": 0,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/QuickActions.tsx",
        "name": "QuickActions",
        "complexity": 8,
        "inDegree": 1,
        "outDegree": 0,
        "propsCount": 13,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx",
        "name": "Button",
        "complexity": 7.5,
        "inDegree": 2,
        "outDegree": 0,
        "propsCount": 7,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImageCanvas.tsx",
        "name": "ImageCanvas",
        "complexity": 7,
        "inDegree": 1,
        "outDegree": 1,
        "propsCount": 7,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/models/WebView.ts",
        "name": "WebView",
        "complexity": 7,
        "inDegree": 2,
        "outDegree": 2,
        "propsCount": 0,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/DICOMUploader.tsx",
        "name": "DICOMUploader",
        "complexity": 6.5,
        "inDegree": 1,
        "outDegree": 2,
        "propsCount": 2,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/services/api.ts",
        "name": "api",
        "complexity": 6.5,
        "inDegree": 3,
        "outDegree": 1,
        "propsCount": 0,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.jsx",
        "name": "App",
        "complexity": 6,
        "inDegree": 0,
        "outDegree": 3,
        "propsCount": 0,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Card.jsx",
        "name": "Card",
        "complexity": 6,
        "inDegree": 1,
        "outDegree": 1,
        "propsCount": 5,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx",
        "name": "OrphanComponent",
        "complexity": 6,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 6,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/StatusBar.tsx",
        "name": "StatusBar",
        "complexity": 6,
        "inDegree": 1,
        "outDegree": 1,
        "propsCount": 5,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/util/vscodeUtil.ts",
        "name": "vscodeUtil",
        "complexity": 6,
        "inDegree": 4,
        "outDegree": 0,
        "propsCount": 0,
        "category": "low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/FileUpload.tsx",
        "name": "FileUpload",
        "complexity": 4.5,
        "inDegree": 1,
        "outDegree": 1,
        "propsCount": 2,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/types/index.ts",
        "name": "types",
        "complexity": 4.5,
        "inDegree": 3,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/util/dataStatement.ts",
        "name": "dataStatement",
        "complexity": 4.5,
        "inDegree": 3,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/PatientInfo.tsx",
        "name": "PatientInfo",
        "complexity": 4,
        "inDegree": 1,
        "outDegree": 1,
        "propsCount": 1,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/extension.ts",
        "name": "extension",
        "complexity": 4,
        "inDegree": 0,
        "outDegree": 2,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/hooks/useApi.ts",
        "name": "useApi",
        "complexity": 3.5,
        "inDegree": 1,
        "outDegree": 1,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/services/api.ts",
        "name": "api",
        "complexity": 3.5,
        "inDegree": 1,
        "outDegree": 1,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/App.css",
        "name": "App",
        "complexity": 3,
        "inDegree": 2,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/services/api.ts",
        "name": "api",
        "complexity": 2,
        "inDegree": 0,
        "outDegree": 1,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/HelpPanel.tsx",
        "name": "HelpPanel",
        "complexity": 2,
        "inDegree": 1,
        "outDegree": 0,
        "propsCount": 1,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/components/ImagePresets.tsx",
        "name": "ImagePresets",
        "complexity": 2,
        "inDegree": 1,
        "outDegree": 0,
        "propsCount": 1,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/util/util.ts",
        "name": "util",
        "complexity": 1.5,
        "inDegree": 1,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/types/index.ts",
        "name": "types",
        "complexity": 1.5,
        "inDegree": 1,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.css",
        "name": "App",
        "complexity": 1.5,
        "inDegree": 1,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.component.ts",
        "name": "app.component",
        "complexity": 0,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.module.ts",
        "name": "app.module",
        "complexity": 0,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/task.service.ts",
        "name": "task.service",
        "complexity": 0,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/user.service.ts",
        "name": "user.service",
        "complexity": 0,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/main.ts",
        "name": "main",
        "complexity": 0,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/test-upload.js",
        "name": "test-upload",
        "complexity": 0,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/eslint.config.js",
        "name": "eslint.config",
        "complexity": 0,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/vite.config.ts",
        "name": "vite.config",
        "complexity": 0,
        "inDegree": 0,
        "outDegree": 0,
        "propsCount": 0,
        "category": "very_low"
      }
    ],
    "dependencyDepth": {
      "averageDepth": 0.8,
      "maxDepth": 4,
      "deepestComponents": [
        {
          "id": "/Users/xiamuguizhi/code/autoCommit/src/extension.ts",
          "name": "extension",
          "depth": 4,
          "outDegree": 2
        }
      ],
      "depthDistribution": {
        "0": 21,
        "1": 10,
        "2": 6,
        "3": 2,
        "4": 1
      }
    },
    "hubComponents": [
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
        "name": "App",
        "totalDegree": 11,
        "inDegree": 0,
        "outDegree": 11,
        "centrality": 0.28205128205128205,
        "impact": 0
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
        "name": "types",
        "totalDegree": 8,
        "inDegree": 8,
        "outDegree": 0,
        "centrality": 0.20512820512820512,
        "impact": 28.67
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
        "name": "commitHandle",
        "totalDegree": 5,
        "inDegree": 1,
        "outDegree": 4,
        "centrality": 0.1282051282051282,
        "impact": 3.5
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
        "name": "models",
        "totalDegree": 5,
        "inDegree": 1,
        "outDegree": 4,
        "centrality": 0.1282051282051282,
        "impact": 3
      }
    ],
    "deadCode": [
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.component.ts",
        "name": "app.component",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.module.ts",
        "name": "app.module",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/task.service.ts",
        "name": "task.service",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/user.service.ts",
        "name": "user.service",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx",
        "name": "OrphanComponent",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/main.ts",
        "name": "main",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/test-upload.js",
        "name": "test-upload",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/eslint.config.js",
        "name": "eslint.config",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/vite.config.ts",
        "name": "vite.config",
        "reason": "isolated_component",
        "confidence": 0.9
      },
      {
        "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/vue-demo/src/services/api.ts",
        "name": "api",
        "reason": "unused_entry_point",
        "confidence": 0.6,
        "outDegree": 1
      },
      {
        "id": "/Users/xiamuguizhi/code/autoCommit/src/extension.ts",
        "name": "extension",
        "reason": "unused_entry_point",
        "confidence": 0.6,
        "outDegree": 2
      }
    ],
    "couplingAnalysis": {
      "metrics": {
        "afferentCoupling": {},
        "efferentCoupling": {},
        "instability": {},
        "abstractness": {}
      },
      "highCouplingComponents": [
        {
          "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
          "name": "App",
          "afferentCoupling": 0,
          "efferentCoupling": 11,
          "totalCoupling": 11,
          "instability": 1,
          "category": "high"
        },
        {
          "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
          "name": "types",
          "afferentCoupling": 8,
          "efferentCoupling": 0,
          "totalCoupling": 8,
          "instability": 0,
          "category": "medium"
        },
        {
          "id": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
          "name": "commitHandle",
          "afferentCoupling": 1,
          "efferentCoupling": 4,
          "totalCoupling": 5,
          "instability": 0.8,
          "category": "medium"
        },
        {
          "id": "/Users/xiamuguizhi/code/autoCommit/src/models/index.ts",
          "name": "models",
          "afferentCoupling": 1,
          "efferentCoupling": 4,
          "totalCoupling": 5,
          "instability": 0.8,
          "category": "medium"
        }
      ],
      "averageCoupling": 2.25,
      "couplingDistribution": {
        "low": 36,
        "medium": 3,
        "high": 1,
        "very_high": 0
      }
    },
    "recommendations": [
      {
        "type": "orphan_components",
        "priority": "high",
        "title": "移除孤立组件",
        "description": "发现 9 个孤立组件，建议检查是否可以安全删除",
        "components": [
          {
            "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.component.ts",
            "name": "app.component",
            "outDegree": 0,
            "reason": "isolated"
          },
          {
            "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/app.module.ts",
            "name": "app.module",
            "outDegree": 0,
            "reason": "isolated"
          },
          {
            "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/task.service.ts",
            "name": "task.service",
            "outDegree": 0,
            "reason": "isolated"
          },
          {
            "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/angular-demo/src/app/services/user.service.ts",
            "name": "user.service",
            "outDegree": 0,
            "reason": "isolated"
          },
          {
            "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx",
            "name": "OrphanComponent",
            "outDegree": 0,
            "reason": "isolated"
          }
        ]
      },
      {
        "type": "unused_props",
        "priority": "medium",
        "title": "清理未使用的Props",
        "description": "发现 4 个未使用的Props，建议清理以简化组件接口",
        "components": [
          {
            "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/OrphanComponent.jsx",
            "name": "OrphanComponent",
            "unusedProps": [
              "unusedProp1",
              "unusedProp2",
              "unusedProp3"
            ],
            "totalProps": 6,
            "usageRate": 50
          },
          {
            "id": "/Users/xiamuguizhi/code/Dependency-Analyzer/examples/react-demo/src/components/Button.jsx",
            "name": "Button",
            "unusedProps": [
              "unusedProp"
            ],
            "totalProps": 7,
            "usageRate": 85.71428571428571
          }
        ]
      },
      {
        "type": "hub_components",
        "priority": "medium",
        "title": "关注枢纽组件",
        "description": "发现 4 个枢纽组件，建议重点维护和测试",
        "components": [
          {
            "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/App.tsx",
            "name": "App",
            "totalDegree": 11,
            "inDegree": 0,
            "outDegree": 11,
            "centrality": 0.28205128205128205,
            "impact": 0
          },
          {
            "id": "/Users/xiamuguizhi/code/MedSegAssist/frontend/src/types/index.ts",
            "name": "types",
            "totalDegree": 8,
            "inDegree": 8,
            "outDegree": 0,
            "centrality": 0.20512820512820512,
            "impact": 28.67
          },
          {
            "id": "/Users/xiamuguizhi/code/autoCommit/src/models/commitHandle.ts",
            "name": "commitHandle",
            "totalDegree": 5,
            "inDegree": 1,
            "outDegree": 4,
            "centrality": 0.1282051282051282,
            "impact": 3.5
          }
        ]
      }
    ]
  }
}